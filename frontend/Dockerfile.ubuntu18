# Ubuntu 18.04优化的前端Dockerfile

# 构建阶段 - 使用最新的Node LTS版本
FROM node:22-alpine as build-stage

# 代理参数
ARG HTTP_PROXY
ARG HTTPS_PROXY
ARG NO_PROXY

# 设置代理环境变量（构建时使用）
ENV http_proxy=$HTTP_PROXY
ENV https_proxy=$HTTPS_PROXY
ENV HTTP_PROXY=$HTTP_PROXY
ENV HTTPS_PROXY=$HTTPS_PROXY
ENV NO_PROXY=$NO_PROXY

# 设置标签
LABEL maintainer="AI QA Platform Team"
LABEL version="1.0"
LABEL description="Frontend service optimized for Ubuntu 18.04"

# 替换Alpine镜像源为国内镜像源（匹配Node 22的Alpine版本）
RUN sed -i 's/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g' /etc/apk/repositories && \
    echo "https://mirrors.aliyun.com/alpine/v3.20/main" > /etc/apk/repositories && \
    echo "https://mirrors.aliyun.com/alpine/v3.20/community" >> /etc/apk/repositories

# 更新apk包索引（添加超时和重试）
RUN apk update --no-cache || apk update --no-cache || apk update --no-cache

# 设置工作目录
WORKDIR /app

# 检查并锁定npm版本，设置镜像源
RUN echo "Node version: $(node --version)" && \
    echo "npm version: $(npm --version)" && \
    npm install -g npm@^10.0.0 && \
    npm config set registry https://registry.npmmirror.com

# 复制package文件
COPY package*.json ./

# 安装依赖 (使用npm install，自动同步lock文件)
RUN npm install

# 复制源代码
COPY . .

# 构建生产版本
RUN npm run build

# 生产阶段 - 使用nginx alpine版本 (轻量级)
FROM nginx:1.20-alpine as production-stage

# 替换Alpine镜像源为国内镜像源（优化网络连接）
RUN sed -i 's/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g' /etc/apk/repositories && \
    echo "https://mirrors.aliyun.com/alpine/v3.17/main" > /etc/apk/repositories && \
    echo "https://mirrors.aliyun.com/alpine/v3.17/community" >> /etc/apk/repositories

# 更新apk包索引并安装必要工具（添加重试机制）
RUN (apk update --no-cache || apk update --no-cache || apk update --no-cache) && \
    apk add --no-cache \
    curl \
    bash \
    tzdata

# 设置时区
ENV TZ=Asia/Shanghai
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

# 复制构建结果
COPY --from=build-stage /app/dist /usr/share/nginx/html

# 复制nginx配置
COPY nginx.ubuntu18.conf /etc/nginx/nginx.conf

# 创建必要目录
RUN mkdir -p /etc/nginx/ssl \
    && mkdir -p /var/log/nginx \
    && mkdir -p /var/cache/nginx

# 创建nginx用户 (如果不存在)
RUN addgroup -g 101 -S nginx || true \
    && adduser -S -D -H -u 101 -h /var/cache/nginx -s /sbin/nologin -G nginx -g nginx nginx || true

# 设置权限
RUN chown -R nginx:nginx /usr/share/nginx/html \
    && chown -R nginx:nginx /var/log/nginx \
    && chown -R nginx:nginx /var/cache/nginx \
    && chmod -R 755 /usr/share/nginx/html

# 创建启动脚本
RUN cat > /docker-entrypoint.sh << 'EOF' && chmod +x /docker-entrypoint.sh
#!/bin/bash
set -e

echo "Starting QA Platform Frontend..."
echo "Nginx version: $(nginx -v 2>&1)"
echo "Time zone: $(date)"

# 检查配置文件
echo "Testing nginx configuration..."
nginx -t

# 创建PID文件目录
mkdir -p /var/run

# 启动nginx
echo "Starting nginx..."
exec nginx -g "daemon off;"
EOF

# 健康检查脚本
RUN cat > /health-check.sh << 'EOF' && chmod +x /health-check.sh
#!/bin/bash
# 检查nginx进程
if ! pgrep nginx > /dev/null; then
    echo "Nginx process not found"
    exit 1
fi

# 检查HTTP响应
if ! curl -f http://localhost/ > /dev/null 2>&1; then
    echo "Nginx not responding"
    exit 1
fi

echo "Health check passed"
exit 0
EOF

# 暴露端口
EXPOSE 80 443

# 健康检查
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD /health-check.sh

# 启动命令
CMD ["/docker-entrypoint.sh"]
