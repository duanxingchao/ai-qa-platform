2025-08-15 11:23:06 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:23:06 - sqlalchemy.engine.Engine - INFO - [cached since 4051s ago] {'created_at_1': datetime.datetime(2025, 8, 14, 21, 23, 6, 624023)}
2025-08-15 11:23:06 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.updated_at >= %(updated_at_1)s AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s) AS anon_1
2025-08-15 11:23:06 - sqlalchemy.engine.Engine - INFO - [cached since 4051s ago] {'updated_at_1': datetime.datetime(2025, 8, 15, 2, 53, 6, 624023), 'classification_1': ''}
2025-08-15 11:23:06 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers JOIN questions ON answers.question_business_id = questions.business_id 
WHERE answers.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:23:06 - sqlalchemy.engine.Engine - INFO - [cached since 4051s ago] {'created_at_1': datetime.datetime(2025, 8, 15, 2, 53, 6, 624023)}
2025-08-15 11:23:06 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.updated_at >= %(updated_at_1)s AND answers.is_scored = true) AS anon_1
2025-08-15 11:23:06 - sqlalchemy.engine.Engine - INFO - [cached since 4051s ago] {'updated_at_1': datetime.datetime(2025, 8, 15, 2, 53, 6, 624023)}
2025-08-15 11:23:06 - sqlalchemy.engine.Engine - INFO - SELECT date_trunc(%(date_trunc_1)s, questions.created_at) AS day, count(questions.id) AS count 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s GROUP BY date_trunc(%(date_trunc_2)s, questions.created_at) ORDER BY day
2025-08-15 11:23:06 - sqlalchemy.engine.Engine - INFO - [cached since 4051s ago] {'date_trunc_1': 'day', 'created_at_1': datetime.datetime(2025, 8, 8, 3, 23, 6, 643414), 'date_trunc_2': 'day'}
2025-08-15 11:23:06 - sqlalchemy.engine.Engine - INFO - SELECT date_trunc(%(date_trunc_1)s, questions.updated_at) AS day, count(questions.id) AS count 
FROM questions 
WHERE questions.updated_at >= %(updated_at_1)s AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s AND questions.processing_status IN (%(processing_status_1_1)s, %(processing_status_1_2)s, %(processing_status_1_3)s) GROUP BY date_trunc(%(date_trunc_2)s, questions.updated_at) ORDER BY day
2025-08-15 11:23:06 - sqlalchemy.engine.Engine - INFO - [cached since 4051s ago] {'date_trunc_1': 'day', 'updated_at_1': datetime.datetime(2025, 8, 8, 3, 23, 6, 643414), 'classification_1': '', 'date_trunc_2': 'day', 'processing_status_1_1': 'classified', 'processing_status_1_2': 'answers_generated', 'processing_status_1_3': 'scored'}
2025-08-15 11:23:06 - sqlalchemy.engine.Engine - INFO - SELECT date_trunc(%(date_trunc_1)s, answers.created_at) AS day, count(answers.id) AS count 
FROM answers JOIN questions ON answers.question_business_id = questions.business_id 
WHERE answers.created_at >= %(created_at_1)s AND questions.created_at >= %(created_at_2)s AND answers.assistant_type IN (%(assistant_type_1_1)s, %(assistant_type_1_2)s) AND answers.is_scored = true AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s GROUP BY date_trunc(%(date_trunc_2)s, answers.created_at) ORDER BY day
2025-08-15 11:23:06 - sqlalchemy.engine.Engine - INFO - [cached since 4051s ago] {'date_trunc_1': 'day', 'created_at_1': datetime.datetime(2025, 8, 8, 3, 23, 6, 643414), 'created_at_2': datetime.datetime(2025, 8, 8, 3, 23, 6, 643414), 'classification_1': '', 'date_trunc_2': 'day', 'assistant_type_1_1': 'doubao', 'assistant_type_1_2': 'xiaotian'}
2025-08-15 11:23:06 - sqlalchemy.engine.Engine - INFO - SELECT answers.assistant_type AS answers_assistant_type, avg(scores.score_1) AS avg_score_1, avg(scores.score_2) AS avg_score_2, avg(scores.score_3) AS avg_score_3, avg(scores.score_4) AS avg_score_4, avg(scores.score_5) AS avg_score_5, avg(scores.average_score) AS avg_total, count(scores.id) AS score_count 
FROM answers JOIN scores ON answers.id = scores.answer_id GROUP BY answers.assistant_type
2025-08-15 11:23:06 - sqlalchemy.engine.Engine - INFO - [cached since 4051s ago] {}
2025-08-15 11:23:06 - sqlalchemy.engine.Engine - INFO - SELECT system_config.id AS system_config_id, system_config.config_key AS system_config_config_key, system_config.config_value AS system_config_config_value, system_config.config_type AS system_config_config_type, system_config.description AS system_config_description, system_config.effective_time AS system_config_effective_time, system_config.previous_value AS system_config_previous_value, system_config.status AS system_config_status, system_config.created_at AS system_config_created_at, system_config.updated_at AS system_config_updated_at 
FROM system_config 
WHERE system_config.config_key = %(config_key_1)s 
 LIMIT %(param_1)s
2025-08-15 11:23:06 - sqlalchemy.engine.Engine - INFO - [cached since 4051s ago] {'config_key_1': 'display.hot_categories_time_range', 'param_1': 1}
2025-08-15 11:23:06 - sqlalchemy.engine.Engine - INFO - SELECT questions.classification AS name, count(questions.id) AS count 
FROM questions 
WHERE questions.classification IS NOT NULL AND questions.classification != %(classification_1)s GROUP BY questions.classification
2025-08-15 11:23:06 - sqlalchemy.engine.Engine - INFO - [cached since 4051s ago] {'classification_1': ''}
2025-08-15 11:23:06 - sqlalchemy.engine.Engine - INFO - SELECT questions.classification AS name, count(questions.id) AS count 
FROM questions 
WHERE questions.classification IS NOT NULL AND questions.classification != %(classification_1)s AND questions.created_at >= %(created_at_1)s GROUP BY questions.classification ORDER BY count(questions.id) DESC
2025-08-15 11:23:06 - sqlalchemy.engine.Engine - INFO - [cached since 4051s ago] {'classification_1': '', 'created_at_1': datetime.datetime(2025, 8, 8, 3, 23, 6, 654200)}
2025-08-15 11:23:06 - sqlalchemy.engine.Engine - INFO - SELECT questions.classification AS name, count(questions.id) AS count 
FROM questions 
WHERE questions.classification IS NOT NULL AND questions.classification != %(classification_1)s GROUP BY questions.classification ORDER BY count(questions.id) DESC
2025-08-15 11:23:06 - sqlalchemy.engine.Engine - INFO - [cached since 4054s ago] {'classification_1': ''}
2025-08-15 11:23:06 - sqlalchemy.engine.Engine - INFO - SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions ORDER BY questions.created_at DESC 
 LIMIT %(param_1)s
2025-08-15 11:23:06 - sqlalchemy.engine.Engine - INFO - [cached since 4051s ago] {'param_1': 5}
2025-08-15 11:23:06 - sqlalchemy.engine.Engine - INFO - SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers ORDER BY answers.created_at DESC 
 LIMIT %(param_1)s
2025-08-15 11:23:06 - sqlalchemy.engine.Engine - INFO - [cached since 4051s ago] {'param_1': 5}
2025-08-15 11:23:06 - sqlalchemy.engine.Engine - INFO - SELECT scores.id AS scores_id, scores.answer_id AS scores_answer_id, scores.score_1 AS scores_score_1, scores.score_2 AS scores_score_2, scores.score_3 AS scores_score_3, scores.score_4 AS scores_score_4, scores.score_5 AS scores_score_5, scores.dimension_1_name AS scores_dimension_1_name, scores.dimension_2_name AS scores_dimension_2_name, scores.dimension_3_name AS scores_dimension_3_name, scores.dimension_4_name AS scores_dimension_4_name, scores.dimension_5_name AS scores_dimension_5_name, scores.average_score AS scores_average_score, scores.comment AS scores_comment, scores.rated_at AS scores_rated_at 
FROM scores ORDER BY scores.rated_at DESC 
 LIMIT %(param_1)s
2025-08-15 11:23:06 - sqlalchemy.engine.Engine - INFO - [cached since 4051s ago] {'param_1': 5}
2025-08-15 11:23:06 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:23:06 - sqlalchemy.engine.Engine - INFO - [cached since 4051s ago] {'created_at_1': datetime.datetime(2025, 8, 15, 3, 18, 6, 659698)}
2025-08-15 11:23:06 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:23:06 - sqlalchemy.engine.Engine - INFO - [cached since 4051s ago] {'created_at_1': datetime.datetime(2025, 8, 15, 3, 18, 6, 659698)}
2025-08-15 11:23:06 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT scores.id AS scores_id, scores.answer_id AS scores_answer_id, scores.score_1 AS scores_score_1, scores.score_2 AS scores_score_2, scores.score_3 AS scores_score_3, scores.score_4 AS scores_score_4, scores.score_5 AS scores_score_5, scores.dimension_1_name AS scores_dimension_1_name, scores.dimension_2_name AS scores_dimension_2_name, scores.dimension_3_name AS scores_dimension_3_name, scores.dimension_4_name AS scores_dimension_4_name, scores.dimension_5_name AS scores_dimension_5_name, scores.average_score AS scores_average_score, scores.comment AS scores_comment, scores.rated_at AS scores_rated_at 
FROM scores 
WHERE scores.rated_at >= %(rated_at_1)s) AS anon_1
2025-08-15 11:23:06 - sqlalchemy.engine.Engine - INFO - [cached since 4051s ago] {'rated_at_1': datetime.datetime(2025, 8, 15, 3, 18, 6, 659698)}
2025-08-15 11:23:06 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.assistant_type = %(assistant_type_1)s AND answers.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:23:06 - sqlalchemy.engine.Engine - INFO - [cached since 4051s ago] {'assistant_type_1': 'yoyo', 'created_at_1': datetime.datetime(2025, 8, 15, 3, 18, 6, 659698)}
2025-08-15 11:23:06 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.assistant_type = %(assistant_type_1)s AND answers.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:23:06 - sqlalchemy.engine.Engine - INFO - [cached since 4051s ago] {'assistant_type_1': 'doubao', 'created_at_1': datetime.datetime(2025, 8, 15, 3, 18, 6, 659698)}
2025-08-15 11:23:06 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.assistant_type = %(assistant_type_1)s AND answers.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:23:06 - sqlalchemy.engine.Engine - INFO - [cached since 4051s ago] {'assistant_type_1': 'xiaotian', 'created_at_1': datetime.datetime(2025, 8, 15, 3, 18, 6, 659698)}
2025-08-15 11:23:06 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-15 11:23:36 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-15 11:23:36 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-15 11:23:36 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-15 11:23:36 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions) AS anon_1
2025-08-15 11:23:36 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s) AS anon_1
2025-08-15 11:23:36 - sqlalchemy.engine.Engine - INFO - SELECT questions.classification AS questions_classification, count(questions.id) AS badcase_count 
FROM questions 
WHERE questions.is_badcase = true GROUP BY questions.classification ORDER BY count(questions.id) DESC 
 LIMIT %(param_1)s
2025-08-15 11:23:36 - sqlalchemy.engine.Engine - INFO - [cached since 4084s ago] {}
2025-08-15 11:23:36 - sqlalchemy.engine.Engine - INFO - [cached since 4081s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 17, 23, 59, 59, 999999), 'processing_status_1': 'scored'}
2025-08-15 11:23:36 - sqlalchemy.engine.Engine - INFO - [cached since 4081s ago] {'param_1': 3}
2025-08-15 11:23:36 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:23:36 - sqlalchemy.engine.Engine - INFO - 
                WITH dimension_scores AS (
                    -- 维度1的数据
                    SELECT
                        s.dimension_1_name as dimension_name,
                        s.score_1 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_1_name IS NOT NULL
                    AND s.score_1 IS NOT NULL

                    UNION ALL

                    -- 维度2的数据
                    SELECT
                        s.dimension_2_name as dimension_name,
                        s.score_2 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_2_name IS NOT NULL
                    AND s.score_2 IS NOT NULL

                    UNION ALL

                    -- 维度3的数据
                    SELECT
                        s.dimension_3_name as dimension_name,
                        s.score_3 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_3_name IS NOT NULL
                    AND s.score_3 IS NOT NULL

                    UNION ALL

                    -- 维度4的数据
                    SELECT
                        s.dimension_4_name as dimension_name,
                        s.score_4 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_4_name IS NOT NULL
                    AND s.score_4 IS NOT NULL

                    UNION ALL

                    -- 维度5的数据
                    SELECT
                        s.dimension_5_name as dimension_name,
                        s.score_5 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_5_name IS NOT NULL
                    AND s.score_5 IS NOT NULL
                )
                SELECT
                    dimension_name,
                    AVG(score) as avg_score,
                    COUNT(*) as sample_count
                FROM dimension_scores
                GROUP BY dimension_name
                ORDER BY avg_score ASC
            
2025-08-15 11:23:36 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s AND questions.is_badcase = true) AS anon_1
2025-08-15 11:23:36 - sqlalchemy.engine.Engine - INFO - [cached since 4081s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0)}
2025-08-15 11:23:36 - sqlalchemy.engine.Engine - INFO - [cached since 4081s ago] {'classification': '其他'}
2025-08-15 11:23:36 - sqlalchemy.engine.Engine - INFO - [cached since 4081s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 17, 23, 59, 59, 999999), 'processing_status_1': 'scored'}
2025-08-15 11:23:36 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s) AS anon_1
2025-08-15 11:23:36 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s AND questions.is_badcase = true AND questions.badcase_review_status = %(badcase_review_status_1)s) AS anon_1
2025-08-15 11:23:36 - sqlalchemy.engine.Engine - INFO - [cached since 4081s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'classification_1': ''}
2025-08-15 11:23:36 - sqlalchemy.engine.Engine - INFO - [cached since 4081s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 17, 23, 59, 59, 999999), 'processing_status_1': 'scored', 'badcase_review_status_1': 'pending'}
2025-08-15 11:23:36 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.classification IS NOT NULL AND questions.classification != %(classification_1)s) AS anon_1
2025-08-15 11:23:36 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s AND questions.badcase_review_status = %(badcase_review_status_1)s) AS anon_1
2025-08-15 11:23:36 - sqlalchemy.engine.Engine - INFO - [cached since 4081s ago] {'classification_1': ''}
2025-08-15 11:23:36 - sqlalchemy.engine.Engine - INFO - [cached since 4081s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 17, 23, 59, 59, 999999), 'processing_status_1': 'scored', 'badcase_review_status_1': 'reviewed'}
2025-08-15 11:23:36 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT access_logs.id AS access_logs_id, access_logs.user_id AS access_logs_user_id, access_logs.username AS access_logs_username, access_logs.action AS access_logs_action, access_logs.ip_address AS access_logs_ip_address, access_logs.created_at AS access_logs_created_at 
FROM access_logs 
WHERE access_logs.action = %(action_1)s) AS anon_1
2025-08-15 11:23:36 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s AND questions.badcase_review_status = %(badcase_review_status_1)s AND questions.is_badcase = false) AS anon_1
2025-08-15 11:23:36 - sqlalchemy.engine.Engine - INFO - [cached since 4081s ago] {'action_1': 'login'}
2025-08-15 11:23:36 - sqlalchemy.engine.Engine - INFO - [cached since 4081s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 17, 23, 59, 59, 999999), 'processing_status_1': 'scored', 'badcase_review_status_1': 'reviewed'}
2025-08-15 11:23:36 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-15 11:23:36 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT access_logs.id AS access_logs_id, access_logs.user_id AS access_logs_user_id, access_logs.username AS access_logs_username, access_logs.action AS access_logs_action, access_logs.ip_address AS access_logs_ip_address, access_logs.created_at AS access_logs_created_at 
FROM access_logs 
WHERE access_logs.action = %(action_1)s AND access_logs.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:23:36 - sqlalchemy.engine.Engine - INFO - [cached since 4081s ago] {'action_1': 'login', 'created_at_1': datetime.datetime(2025, 8, 11, 0, 0)}
2025-08-15 11:23:36 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:23:36 - sqlalchemy.engine.Engine - INFO - 
                WITH dimension_scores AS (
                    -- 维度1的数据
                    SELECT
                        s.dimension_1_name as dimension_name,
                        s.score_1 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_1_name IS NOT NULL
                    AND s.score_1 IS NOT NULL

                    UNION ALL

                    -- 维度2的数据
                    SELECT
                        s.dimension_2_name as dimension_name,
                        s.score_2 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_2_name IS NOT NULL
                    AND s.score_2 IS NOT NULL

                    UNION ALL

                    -- 维度3的数据
                    SELECT
                        s.dimension_3_name as dimension_name,
                        s.score_3 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_3_name IS NOT NULL
                    AND s.score_3 IS NOT NULL

                    UNION ALL

                    -- 维度4的数据
                    SELECT
                        s.dimension_4_name as dimension_name,
                        s.score_4 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_4_name IS NOT NULL
                    AND s.score_4 IS NOT NULL

                    UNION ALL

                    -- 维度5的数据
                    SELECT
                        s.dimension_5_name as dimension_name,
                        s.score_5 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_5_name IS NOT NULL
                    AND s.score_5 IS NOT NULL
                )
                SELECT
                    dimension_name,
                    AVG(score) as avg_score,
                    COUNT(*) as sample_count
                FROM dimension_scores
                GROUP BY dimension_name
                ORDER BY avg_score ASC
            
2025-08-15 11:23:36 - sqlalchemy.engine.Engine - INFO - [cached since 4081s ago] {'created_at_1': datetime.datetime(2025, 8, 15, 0, 0)}
2025-08-15 11:23:36 - sqlalchemy.engine.Engine - INFO - [cached since 4081s ago] {'classification': '产品使用'}
2025-08-15 11:23:36 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:23:36 - sqlalchemy.engine.Engine - INFO - [cached since 4081s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0)}
2025-08-15 11:23:36 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s) AS anon_1
2025-08-15 11:23:36 - sqlalchemy.engine.Engine - INFO - [cached since 4081s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'classification_1': ''}
2025-08-15 11:23:36 - sqlalchemy.engine.Engine - INFO - SELECT coalesce(sum(least(anon_1.cnt, %(least_1)s)), %(coalesce_2)s) AS coalesce_1 
FROM (SELECT answers.question_business_id AS qbid, count(answers.id) AS cnt 
FROM answers JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.created_at >= %(created_at_1)s AND answers.created_at >= %(created_at_2)s AND answers.assistant_type IN (%(assistant_type_1_1)s, %(assistant_type_1_2)s) AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s GROUP BY answers.question_business_id) AS anon_1
2025-08-15 11:23:36 - sqlalchemy.engine.Engine - INFO - [cached since 4081s ago] {'least_1': 2, 'coalesce_2': 0, 'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 11, 0, 0), 'classification_1': '', 'assistant_type_1_1': 'doubao', 'assistant_type_1_2': 'xiaotian'}
2025-08-15 11:23:36 - sqlalchemy.engine.Engine - INFO - 
                WITH dimension_scores AS (
                    -- 维度1的数据
                    SELECT
                        s.dimension_1_name as dimension_name,
                        s.score_1 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_1_name IS NOT NULL
                    AND s.score_1 IS NOT NULL

                    UNION ALL

                    -- 维度2的数据
                    SELECT
                        s.dimension_2_name as dimension_name,
                        s.score_2 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_2_name IS NOT NULL
                    AND s.score_2 IS NOT NULL

                    UNION ALL

                    -- 维度3的数据
                    SELECT
                        s.dimension_3_name as dimension_name,
                        s.score_3 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_3_name IS NOT NULL
                    AND s.score_3 IS NOT NULL

                    UNION ALL

                    -- 维度4的数据
                    SELECT
                        s.dimension_4_name as dimension_name,
                        s.score_4 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_4_name IS NOT NULL
                    AND s.score_4 IS NOT NULL

                    UNION ALL

                    -- 维度5的数据
                    SELECT
                        s.dimension_5_name as dimension_name,
                        s.score_5 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_5_name IS NOT NULL
                    AND s.score_5 IS NOT NULL
                )
                SELECT
                    dimension_name,
                    AVG(score) as avg_score,
                    COUNT(*) as sample_count
                FROM dimension_scores
                GROUP BY dimension_name
                ORDER BY avg_score ASC
            
2025-08-15 11:23:36 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT count(distinct(answers.question_business_id)) AS count_2 
FROM answers JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.created_at >= %(created_at_1)s AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s AND answers.is_scored = true AND answers.assistant_type IN (%(assistant_type_1_1)s, %(assistant_type_1_2)s, %(assistant_type_1_3)s) GROUP BY answers.question_business_id 
HAVING count(distinct(answers.assistant_type)) = %(count_3)s) AS anon_1
2025-08-15 11:23:36 - sqlalchemy.engine.Engine - INFO - [cached since 4081s ago] {'classification': '功能建议'}
2025-08-15 11:23:36 - sqlalchemy.engine.Engine - INFO - [cached since 4081s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'classification_1': '', 'count_3': 3, 'assistant_type_1_1': 'yoyo', 'assistant_type_1_2': 'doubao', 'assistant_type_1_3': 'xiaotian'}
2025-08-15 11:23:36 - sqlalchemy.engine.Engine - INFO - SELECT count(distinct(questions.business_id)) AS count_1 
FROM questions JOIN answers ON questions.business_id = answers.question_business_id 
WHERE questions.created_at >= %(created_at_1)s AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s AND answers.assistant_type IN (%(assistant_type_1_1)s, %(assistant_type_1_2)s) AND answers.created_at >= %(created_at_2)s
2025-08-15 11:23:36 - sqlalchemy.engine.Engine - INFO - [cached since 4081s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'classification_1': '', 'created_at_2': datetime.datetime(2025, 8, 11, 0, 0), 'assistant_type_1_1': 'doubao', 'assistant_type_1_2': 'xiaotian'}
2025-08-15 11:23:36 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-15 11:23:36 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.processing_status = %(processing_status_1)s AND questions.is_badcase = true) AS anon_1
2025-08-15 11:23:36 - sqlalchemy.engine.Engine - INFO - [cached since 4081s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'processing_status_1': 'scored'}
2025-08-15 11:23:36 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.processing_status = %(processing_status_1)s AND questions.badcase_review_status = %(badcase_review_status_1)s) AS anon_1
2025-08-15 11:23:36 - sqlalchemy.engine.Engine - INFO - [cached since 4081s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'processing_status_1': 'scored', 'badcase_review_status_1': 'reviewed'}
2025-08-15 11:23:36 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:23:36 - sqlalchemy.engine.Engine - INFO - [cached since 4081s ago] {'created_at_1': datetime.datetime(2025, 8, 15, 2, 23, 36, 610606)}
2025-08-15 11:23:36 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:23:36 - sqlalchemy.engine.Engine - INFO - [cached since 4081s ago] {'created_at_1': datetime.datetime(2025, 8, 14, 21, 23, 36, 610606)}
2025-08-15 11:23:36 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.updated_at >= %(updated_at_1)s AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s) AS anon_1
2025-08-15 11:23:36 - sqlalchemy.engine.Engine - INFO - [cached since 4081s ago] {'updated_at_1': datetime.datetime(2025, 8, 15, 2, 53, 36, 610606), 'classification_1': ''}
2025-08-15 11:23:36 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers JOIN questions ON answers.question_business_id = questions.business_id 
WHERE answers.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:23:36 - sqlalchemy.engine.Engine - INFO - [cached since 4081s ago] {'created_at_1': datetime.datetime(2025, 8, 15, 2, 53, 36, 610606)}
2025-08-15 11:23:36 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.updated_at >= %(updated_at_1)s AND answers.is_scored = true) AS anon_1
2025-08-15 11:23:36 - sqlalchemy.engine.Engine - INFO - [cached since 4081s ago] {'updated_at_1': datetime.datetime(2025, 8, 15, 2, 53, 36, 610606)}
2025-08-15 11:23:36 - sqlalchemy.engine.Engine - INFO - SELECT date_trunc(%(date_trunc_1)s, questions.created_at) AS day, count(questions.id) AS count 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s GROUP BY date_trunc(%(date_trunc_2)s, questions.created_at) ORDER BY day
2025-08-15 11:23:36 - sqlalchemy.engine.Engine - INFO - [cached since 4081s ago] {'date_trunc_1': 'day', 'created_at_1': datetime.datetime(2025, 8, 8, 3, 23, 36, 631286), 'date_trunc_2': 'day'}
2025-08-15 11:23:36 - sqlalchemy.engine.Engine - INFO - SELECT date_trunc(%(date_trunc_1)s, questions.updated_at) AS day, count(questions.id) AS count 
FROM questions 
WHERE questions.updated_at >= %(updated_at_1)s AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s AND questions.processing_status IN (%(processing_status_1_1)s, %(processing_status_1_2)s, %(processing_status_1_3)s) GROUP BY date_trunc(%(date_trunc_2)s, questions.updated_at) ORDER BY day
2025-08-15 11:23:36 - sqlalchemy.engine.Engine - INFO - [cached since 4081s ago] {'date_trunc_1': 'day', 'updated_at_1': datetime.datetime(2025, 8, 8, 3, 23, 36, 631286), 'classification_1': '', 'date_trunc_2': 'day', 'processing_status_1_1': 'classified', 'processing_status_1_2': 'answers_generated', 'processing_status_1_3': 'scored'}
2025-08-15 11:23:36 - sqlalchemy.engine.Engine - INFO - SELECT date_trunc(%(date_trunc_1)s, answers.created_at) AS day, count(answers.id) AS count 
FROM answers JOIN questions ON answers.question_business_id = questions.business_id 
WHERE answers.created_at >= %(created_at_1)s AND questions.created_at >= %(created_at_2)s AND answers.assistant_type IN (%(assistant_type_1_1)s, %(assistant_type_1_2)s) AND answers.is_scored = true AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s GROUP BY date_trunc(%(date_trunc_2)s, answers.created_at) ORDER BY day
2025-08-15 11:23:36 - sqlalchemy.engine.Engine - INFO - [cached since 4081s ago] {'date_trunc_1': 'day', 'created_at_1': datetime.datetime(2025, 8, 8, 3, 23, 36, 631286), 'created_at_2': datetime.datetime(2025, 8, 8, 3, 23, 36, 631286), 'classification_1': '', 'date_trunc_2': 'day', 'assistant_type_1_1': 'doubao', 'assistant_type_1_2': 'xiaotian'}
2025-08-15 11:23:36 - sqlalchemy.engine.Engine - INFO - SELECT answers.assistant_type AS answers_assistant_type, avg(scores.score_1) AS avg_score_1, avg(scores.score_2) AS avg_score_2, avg(scores.score_3) AS avg_score_3, avg(scores.score_4) AS avg_score_4, avg(scores.score_5) AS avg_score_5, avg(scores.average_score) AS avg_total, count(scores.id) AS score_count 
FROM answers JOIN scores ON answers.id = scores.answer_id GROUP BY answers.assistant_type
2025-08-15 11:23:36 - sqlalchemy.engine.Engine - INFO - [cached since 4081s ago] {}
2025-08-15 11:23:36 - sqlalchemy.engine.Engine - INFO - SELECT system_config.id AS system_config_id, system_config.config_key AS system_config_config_key, system_config.config_value AS system_config_config_value, system_config.config_type AS system_config_config_type, system_config.description AS system_config_description, system_config.effective_time AS system_config_effective_time, system_config.previous_value AS system_config_previous_value, system_config.status AS system_config_status, system_config.created_at AS system_config_created_at, system_config.updated_at AS system_config_updated_at 
FROM system_config 
WHERE system_config.config_key = %(config_key_1)s 
 LIMIT %(param_1)s
2025-08-15 11:23:36 - sqlalchemy.engine.Engine - INFO - [cached since 4081s ago] {'config_key_1': 'display.hot_categories_time_range', 'param_1': 1}
2025-08-15 11:23:36 - sqlalchemy.engine.Engine - INFO - SELECT questions.classification AS name, count(questions.id) AS count 
FROM questions 
WHERE questions.classification IS NOT NULL AND questions.classification != %(classification_1)s GROUP BY questions.classification
2025-08-15 11:23:36 - sqlalchemy.engine.Engine - INFO - [cached since 4081s ago] {'classification_1': ''}
2025-08-15 11:23:36 - sqlalchemy.engine.Engine - INFO - SELECT questions.classification AS name, count(questions.id) AS count 
FROM questions 
WHERE questions.classification IS NOT NULL AND questions.classification != %(classification_1)s AND questions.created_at >= %(created_at_1)s GROUP BY questions.classification ORDER BY count(questions.id) DESC
2025-08-15 11:23:36 - sqlalchemy.engine.Engine - INFO - [cached since 4081s ago] {'classification_1': '', 'created_at_1': datetime.datetime(2025, 8, 8, 3, 23, 36, 642701)}
2025-08-15 11:23:36 - sqlalchemy.engine.Engine - INFO - SELECT questions.classification AS name, count(questions.id) AS count 
FROM questions 
WHERE questions.classification IS NOT NULL AND questions.classification != %(classification_1)s GROUP BY questions.classification ORDER BY count(questions.id) DESC
2025-08-15 11:23:36 - sqlalchemy.engine.Engine - INFO - [cached since 4084s ago] {'classification_1': ''}
2025-08-15 11:23:36 - sqlalchemy.engine.Engine - INFO - SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions ORDER BY questions.created_at DESC 
 LIMIT %(param_1)s
2025-08-15 11:23:36 - sqlalchemy.engine.Engine - INFO - [cached since 4081s ago] {'param_1': 5}
2025-08-15 11:23:36 - sqlalchemy.engine.Engine - INFO - SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers ORDER BY answers.created_at DESC 
 LIMIT %(param_1)s
2025-08-15 11:23:36 - sqlalchemy.engine.Engine - INFO - [cached since 4081s ago] {'param_1': 5}
2025-08-15 11:23:36 - sqlalchemy.engine.Engine - INFO - SELECT scores.id AS scores_id, scores.answer_id AS scores_answer_id, scores.score_1 AS scores_score_1, scores.score_2 AS scores_score_2, scores.score_3 AS scores_score_3, scores.score_4 AS scores_score_4, scores.score_5 AS scores_score_5, scores.dimension_1_name AS scores_dimension_1_name, scores.dimension_2_name AS scores_dimension_2_name, scores.dimension_3_name AS scores_dimension_3_name, scores.dimension_4_name AS scores_dimension_4_name, scores.dimension_5_name AS scores_dimension_5_name, scores.average_score AS scores_average_score, scores.comment AS scores_comment, scores.rated_at AS scores_rated_at 
FROM scores ORDER BY scores.rated_at DESC 
 LIMIT %(param_1)s
2025-08-15 11:23:36 - sqlalchemy.engine.Engine - INFO - [cached since 4081s ago] {'param_1': 5}
2025-08-15 11:23:36 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:23:36 - sqlalchemy.engine.Engine - INFO - [cached since 4081s ago] {'created_at_1': datetime.datetime(2025, 8, 15, 3, 18, 36, 648134)}
2025-08-15 11:23:36 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:23:36 - sqlalchemy.engine.Engine - INFO - [cached since 4081s ago] {'created_at_1': datetime.datetime(2025, 8, 15, 3, 18, 36, 648134)}
2025-08-15 11:23:36 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT scores.id AS scores_id, scores.answer_id AS scores_answer_id, scores.score_1 AS scores_score_1, scores.score_2 AS scores_score_2, scores.score_3 AS scores_score_3, scores.score_4 AS scores_score_4, scores.score_5 AS scores_score_5, scores.dimension_1_name AS scores_dimension_1_name, scores.dimension_2_name AS scores_dimension_2_name, scores.dimension_3_name AS scores_dimension_3_name, scores.dimension_4_name AS scores_dimension_4_name, scores.dimension_5_name AS scores_dimension_5_name, scores.average_score AS scores_average_score, scores.comment AS scores_comment, scores.rated_at AS scores_rated_at 
FROM scores 
WHERE scores.rated_at >= %(rated_at_1)s) AS anon_1
2025-08-15 11:23:36 - sqlalchemy.engine.Engine - INFO - [cached since 4081s ago] {'rated_at_1': datetime.datetime(2025, 8, 15, 3, 18, 36, 648134)}
2025-08-15 11:23:36 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.assistant_type = %(assistant_type_1)s AND answers.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:23:36 - sqlalchemy.engine.Engine - INFO - [cached since 4081s ago] {'assistant_type_1': 'yoyo', 'created_at_1': datetime.datetime(2025, 8, 15, 3, 18, 36, 648134)}
2025-08-15 11:23:36 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.assistant_type = %(assistant_type_1)s AND answers.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:23:36 - sqlalchemy.engine.Engine - INFO - [cached since 4081s ago] {'assistant_type_1': 'doubao', 'created_at_1': datetime.datetime(2025, 8, 15, 3, 18, 36, 648134)}
2025-08-15 11:23:36 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.assistant_type = %(assistant_type_1)s AND answers.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:23:36 - sqlalchemy.engine.Engine - INFO - [cached since 4081s ago] {'assistant_type_1': 'xiaotian', 'created_at_1': datetime.datetime(2025, 8, 15, 3, 18, 36, 648134)}
2025-08-15 11:23:36 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-15 11:23:48 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-15 11:23:48 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-15 11:23:48 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-15 11:23:48 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s) AS anon_1
2025-08-15 11:23:48 - sqlalchemy.engine.Engine - INFO - SELECT questions.classification AS questions_classification, count(questions.id) AS badcase_count 
FROM questions 
WHERE questions.is_badcase = true GROUP BY questions.classification ORDER BY count(questions.id) DESC 
 LIMIT %(param_1)s
2025-08-15 11:23:48 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions) AS anon_1
2025-08-15 11:23:48 - sqlalchemy.engine.Engine - INFO - [cached since 4093s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 17, 23, 59, 59, 999999), 'processing_status_1': 'scored'}
2025-08-15 11:23:48 - sqlalchemy.engine.Engine - INFO - [cached since 4093s ago] {'param_1': 3}
2025-08-15 11:23:48 - sqlalchemy.engine.Engine - INFO - [cached since 4096s ago] {}
2025-08-15 11:23:48 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:23:48 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s AND questions.is_badcase = true) AS anon_1
2025-08-15 11:23:48 - sqlalchemy.engine.Engine - INFO - 
                WITH dimension_scores AS (
                    -- 维度1的数据
                    SELECT
                        s.dimension_1_name as dimension_name,
                        s.score_1 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_1_name IS NOT NULL
                    AND s.score_1 IS NOT NULL

                    UNION ALL

                    -- 维度2的数据
                    SELECT
                        s.dimension_2_name as dimension_name,
                        s.score_2 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_2_name IS NOT NULL
                    AND s.score_2 IS NOT NULL

                    UNION ALL

                    -- 维度3的数据
                    SELECT
                        s.dimension_3_name as dimension_name,
                        s.score_3 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_3_name IS NOT NULL
                    AND s.score_3 IS NOT NULL

                    UNION ALL

                    -- 维度4的数据
                    SELECT
                        s.dimension_4_name as dimension_name,
                        s.score_4 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_4_name IS NOT NULL
                    AND s.score_4 IS NOT NULL

                    UNION ALL

                    -- 维度5的数据
                    SELECT
                        s.dimension_5_name as dimension_name,
                        s.score_5 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_5_name IS NOT NULL
                    AND s.score_5 IS NOT NULL
                )
                SELECT
                    dimension_name,
                    AVG(score) as avg_score,
                    COUNT(*) as sample_count
                FROM dimension_scores
                GROUP BY dimension_name
                ORDER BY avg_score ASC
            
2025-08-15 11:23:48 - sqlalchemy.engine.Engine - INFO - [cached since 4093s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0)}
2025-08-15 11:23:48 - sqlalchemy.engine.Engine - INFO - [cached since 4093s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 17, 23, 59, 59, 999999), 'processing_status_1': 'scored'}
2025-08-15 11:23:48 - sqlalchemy.engine.Engine - INFO - [cached since 4093s ago] {'classification': '其他'}
2025-08-15 11:23:48 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s) AS anon_1
2025-08-15 11:23:48 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s AND questions.is_badcase = true AND questions.badcase_review_status = %(badcase_review_status_1)s) AS anon_1
2025-08-15 11:23:48 - sqlalchemy.engine.Engine - INFO - [cached since 4093s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'classification_1': ''}
2025-08-15 11:23:48 - sqlalchemy.engine.Engine - INFO - [cached since 4093s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 17, 23, 59, 59, 999999), 'processing_status_1': 'scored', 'badcase_review_status_1': 'pending'}
2025-08-15 11:23:48 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s AND questions.badcase_review_status = %(badcase_review_status_1)s) AS anon_1
2025-08-15 11:23:48 - sqlalchemy.engine.Engine - INFO - [cached since 4093s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 17, 23, 59, 59, 999999), 'processing_status_1': 'scored', 'badcase_review_status_1': 'reviewed'}
2025-08-15 11:23:48 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s AND questions.badcase_review_status = %(badcase_review_status_1)s AND questions.is_badcase = false) AS anon_1
2025-08-15 11:23:48 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.classification IS NOT NULL AND questions.classification != %(classification_1)s) AS anon_1
2025-08-15 11:23:48 - sqlalchemy.engine.Engine - INFO - [cached since 4093s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 17, 23, 59, 59, 999999), 'processing_status_1': 'scored', 'badcase_review_status_1': 'reviewed'}
2025-08-15 11:23:48 - sqlalchemy.engine.Engine - INFO - 
                WITH dimension_scores AS (
                    -- 维度1的数据
                    SELECT
                        s.dimension_1_name as dimension_name,
                        s.score_1 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_1_name IS NOT NULL
                    AND s.score_1 IS NOT NULL

                    UNION ALL

                    -- 维度2的数据
                    SELECT
                        s.dimension_2_name as dimension_name,
                        s.score_2 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_2_name IS NOT NULL
                    AND s.score_2 IS NOT NULL

                    UNION ALL

                    -- 维度3的数据
                    SELECT
                        s.dimension_3_name as dimension_name,
                        s.score_3 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_3_name IS NOT NULL
                    AND s.score_3 IS NOT NULL

                    UNION ALL

                    -- 维度4的数据
                    SELECT
                        s.dimension_4_name as dimension_name,
                        s.score_4 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_4_name IS NOT NULL
                    AND s.score_4 IS NOT NULL

                    UNION ALL

                    -- 维度5的数据
                    SELECT
                        s.dimension_5_name as dimension_name,
                        s.score_5 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_5_name IS NOT NULL
                    AND s.score_5 IS NOT NULL
                )
                SELECT
                    dimension_name,
                    AVG(score) as avg_score,
                    COUNT(*) as sample_count
                FROM dimension_scores
                GROUP BY dimension_name
                ORDER BY avg_score ASC
            
2025-08-15 11:23:48 - sqlalchemy.engine.Engine - INFO - [cached since 4093s ago] {'classification_1': ''}
2025-08-15 11:23:48 - sqlalchemy.engine.Engine - INFO - [cached since 4093s ago] {'classification': '产品使用'}
2025-08-15 11:23:48 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-15 11:23:48 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT access_logs.id AS access_logs_id, access_logs.user_id AS access_logs_user_id, access_logs.username AS access_logs_username, access_logs.action AS access_logs_action, access_logs.ip_address AS access_logs_ip_address, access_logs.created_at AS access_logs_created_at 
FROM access_logs 
WHERE access_logs.action = %(action_1)s) AS anon_1
2025-08-15 11:23:48 - sqlalchemy.engine.Engine - INFO - [cached since 4093s ago] {'action_1': 'login'}
2025-08-15 11:23:48 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT access_logs.id AS access_logs_id, access_logs.user_id AS access_logs_user_id, access_logs.username AS access_logs_username, access_logs.action AS access_logs_action, access_logs.ip_address AS access_logs_ip_address, access_logs.created_at AS access_logs_created_at 
FROM access_logs 
WHERE access_logs.action = %(action_1)s AND access_logs.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:23:48 - sqlalchemy.engine.Engine - INFO - [cached since 4093s ago] {'action_1': 'login', 'created_at_1': datetime.datetime(2025, 8, 11, 0, 0)}
2025-08-15 11:23:48 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:23:48 - sqlalchemy.engine.Engine - INFO - [cached since 4093s ago] {'created_at_1': datetime.datetime(2025, 8, 15, 0, 0)}
2025-08-15 11:23:48 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:23:48 - sqlalchemy.engine.Engine - INFO - [cached since 4093s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0)}
2025-08-15 11:23:48 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s) AS anon_1
2025-08-15 11:23:48 - sqlalchemy.engine.Engine - INFO - 
                WITH dimension_scores AS (
                    -- 维度1的数据
                    SELECT
                        s.dimension_1_name as dimension_name,
                        s.score_1 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_1_name IS NOT NULL
                    AND s.score_1 IS NOT NULL

                    UNION ALL

                    -- 维度2的数据
                    SELECT
                        s.dimension_2_name as dimension_name,
                        s.score_2 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_2_name IS NOT NULL
                    AND s.score_2 IS NOT NULL

                    UNION ALL

                    -- 维度3的数据
                    SELECT
                        s.dimension_3_name as dimension_name,
                        s.score_3 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_3_name IS NOT NULL
                    AND s.score_3 IS NOT NULL

                    UNION ALL

                    -- 维度4的数据
                    SELECT
                        s.dimension_4_name as dimension_name,
                        s.score_4 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_4_name IS NOT NULL
                    AND s.score_4 IS NOT NULL

                    UNION ALL

                    -- 维度5的数据
                    SELECT
                        s.dimension_5_name as dimension_name,
                        s.score_5 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_5_name IS NOT NULL
                    AND s.score_5 IS NOT NULL
                )
                SELECT
                    dimension_name,
                    AVG(score) as avg_score,
                    COUNT(*) as sample_count
                FROM dimension_scores
                GROUP BY dimension_name
                ORDER BY avg_score ASC
            
2025-08-15 11:23:48 - sqlalchemy.engine.Engine - INFO - [cached since 4093s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'classification_1': ''}
2025-08-15 11:23:48 - sqlalchemy.engine.Engine - INFO - [cached since 4093s ago] {'classification': '功能建议'}
2025-08-15 11:23:48 - sqlalchemy.engine.Engine - INFO - SELECT coalesce(sum(least(anon_1.cnt, %(least_1)s)), %(coalesce_2)s) AS coalesce_1 
FROM (SELECT answers.question_business_id AS qbid, count(answers.id) AS cnt 
FROM answers JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.created_at >= %(created_at_1)s AND answers.created_at >= %(created_at_2)s AND answers.assistant_type IN (%(assistant_type_1_1)s, %(assistant_type_1_2)s) AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s GROUP BY answers.question_business_id) AS anon_1
2025-08-15 11:23:48 - sqlalchemy.engine.Engine - INFO - [cached since 4093s ago] {'least_1': 2, 'coalesce_2': 0, 'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 11, 0, 0), 'classification_1': '', 'assistant_type_1_1': 'doubao', 'assistant_type_1_2': 'xiaotian'}
2025-08-15 11:23:48 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT count(distinct(answers.question_business_id)) AS count_2 
FROM answers JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.created_at >= %(created_at_1)s AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s AND answers.is_scored = true AND answers.assistant_type IN (%(assistant_type_1_1)s, %(assistant_type_1_2)s, %(assistant_type_1_3)s) GROUP BY answers.question_business_id 
HAVING count(distinct(answers.assistant_type)) = %(count_3)s) AS anon_1
2025-08-15 11:23:48 - sqlalchemy.engine.Engine - INFO - [cached since 4093s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'classification_1': '', 'count_3': 3, 'assistant_type_1_1': 'yoyo', 'assistant_type_1_2': 'doubao', 'assistant_type_1_3': 'xiaotian'}
2025-08-15 11:23:48 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-15 11:23:48 - sqlalchemy.engine.Engine - INFO - SELECT count(distinct(questions.business_id)) AS count_1 
FROM questions JOIN answers ON questions.business_id = answers.question_business_id 
WHERE questions.created_at >= %(created_at_1)s AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s AND answers.assistant_type IN (%(assistant_type_1_1)s, %(assistant_type_1_2)s) AND answers.created_at >= %(created_at_2)s
2025-08-15 11:23:48 - sqlalchemy.engine.Engine - INFO - [cached since 4093s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'classification_1': '', 'created_at_2': datetime.datetime(2025, 8, 11, 0, 0), 'assistant_type_1_1': 'doubao', 'assistant_type_1_2': 'xiaotian'}
2025-08-15 11:23:48 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.processing_status = %(processing_status_1)s AND questions.is_badcase = true) AS anon_1
2025-08-15 11:23:48 - sqlalchemy.engine.Engine - INFO - [cached since 4093s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'processing_status_1': 'scored'}
2025-08-15 11:23:48 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.processing_status = %(processing_status_1)s AND questions.badcase_review_status = %(badcase_review_status_1)s) AS anon_1
2025-08-15 11:23:48 - sqlalchemy.engine.Engine - INFO - [cached since 4093s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'processing_status_1': 'scored', 'badcase_review_status_1': 'reviewed'}
2025-08-15 11:23:48 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:23:48 - sqlalchemy.engine.Engine - INFO - [cached since 4093s ago] {'created_at_1': datetime.datetime(2025, 8, 15, 2, 23, 48, 614000)}
2025-08-15 11:23:48 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:23:48 - sqlalchemy.engine.Engine - INFO - [cached since 4093s ago] {'created_at_1': datetime.datetime(2025, 8, 14, 21, 23, 48, 614000)}
2025-08-15 11:23:48 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.updated_at >= %(updated_at_1)s AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s) AS anon_1
2025-08-15 11:23:48 - sqlalchemy.engine.Engine - INFO - [cached since 4093s ago] {'updated_at_1': datetime.datetime(2025, 8, 15, 2, 53, 48, 614000), 'classification_1': ''}
2025-08-15 11:23:48 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers JOIN questions ON answers.question_business_id = questions.business_id 
WHERE answers.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:23:48 - sqlalchemy.engine.Engine - INFO - [cached since 4093s ago] {'created_at_1': datetime.datetime(2025, 8, 15, 2, 53, 48, 614000)}
2025-08-15 11:23:48 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.updated_at >= %(updated_at_1)s AND answers.is_scored = true) AS anon_1
2025-08-15 11:23:48 - sqlalchemy.engine.Engine - INFO - [cached since 4093s ago] {'updated_at_1': datetime.datetime(2025, 8, 15, 2, 53, 48, 614000)}
2025-08-15 11:23:48 - sqlalchemy.engine.Engine - INFO - SELECT date_trunc(%(date_trunc_1)s, questions.created_at) AS day, count(questions.id) AS count 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s GROUP BY date_trunc(%(date_trunc_2)s, questions.created_at) ORDER BY day
2025-08-15 11:23:48 - sqlalchemy.engine.Engine - INFO - [cached since 4093s ago] {'date_trunc_1': 'day', 'created_at_1': datetime.datetime(2025, 8, 8, 3, 23, 48, 635507), 'date_trunc_2': 'day'}
2025-08-15 11:23:48 - sqlalchemy.engine.Engine - INFO - SELECT date_trunc(%(date_trunc_1)s, questions.updated_at) AS day, count(questions.id) AS count 
FROM questions 
WHERE questions.updated_at >= %(updated_at_1)s AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s AND questions.processing_status IN (%(processing_status_1_1)s, %(processing_status_1_2)s, %(processing_status_1_3)s) GROUP BY date_trunc(%(date_trunc_2)s, questions.updated_at) ORDER BY day
2025-08-15 11:23:48 - sqlalchemy.engine.Engine - INFO - [cached since 4093s ago] {'date_trunc_1': 'day', 'updated_at_1': datetime.datetime(2025, 8, 8, 3, 23, 48, 635507), 'classification_1': '', 'date_trunc_2': 'day', 'processing_status_1_1': 'classified', 'processing_status_1_2': 'answers_generated', 'processing_status_1_3': 'scored'}
2025-08-15 11:23:48 - sqlalchemy.engine.Engine - INFO - SELECT date_trunc(%(date_trunc_1)s, answers.created_at) AS day, count(answers.id) AS count 
FROM answers JOIN questions ON answers.question_business_id = questions.business_id 
WHERE answers.created_at >= %(created_at_1)s AND questions.created_at >= %(created_at_2)s AND answers.assistant_type IN (%(assistant_type_1_1)s, %(assistant_type_1_2)s) AND answers.is_scored = true AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s GROUP BY date_trunc(%(date_trunc_2)s, answers.created_at) ORDER BY day
2025-08-15 11:23:48 - sqlalchemy.engine.Engine - INFO - [cached since 4093s ago] {'date_trunc_1': 'day', 'created_at_1': datetime.datetime(2025, 8, 8, 3, 23, 48, 635507), 'created_at_2': datetime.datetime(2025, 8, 8, 3, 23, 48, 635507), 'classification_1': '', 'date_trunc_2': 'day', 'assistant_type_1_1': 'doubao', 'assistant_type_1_2': 'xiaotian'}
2025-08-15 11:23:48 - sqlalchemy.engine.Engine - INFO - SELECT answers.assistant_type AS answers_assistant_type, avg(scores.score_1) AS avg_score_1, avg(scores.score_2) AS avg_score_2, avg(scores.score_3) AS avg_score_3, avg(scores.score_4) AS avg_score_4, avg(scores.score_5) AS avg_score_5, avg(scores.average_score) AS avg_total, count(scores.id) AS score_count 
FROM answers JOIN scores ON answers.id = scores.answer_id GROUP BY answers.assistant_type
2025-08-15 11:23:48 - sqlalchemy.engine.Engine - INFO - [cached since 4093s ago] {}
2025-08-15 11:23:48 - sqlalchemy.engine.Engine - INFO - SELECT system_config.id AS system_config_id, system_config.config_key AS system_config_config_key, system_config.config_value AS system_config_config_value, system_config.config_type AS system_config_config_type, system_config.description AS system_config_description, system_config.effective_time AS system_config_effective_time, system_config.previous_value AS system_config_previous_value, system_config.status AS system_config_status, system_config.created_at AS system_config_created_at, system_config.updated_at AS system_config_updated_at 
FROM system_config 
WHERE system_config.config_key = %(config_key_1)s 
 LIMIT %(param_1)s
2025-08-15 11:23:48 - sqlalchemy.engine.Engine - INFO - [cached since 4093s ago] {'config_key_1': 'display.hot_categories_time_range', 'param_1': 1}
2025-08-15 11:23:48 - sqlalchemy.engine.Engine - INFO - SELECT questions.classification AS name, count(questions.id) AS count 
FROM questions 
WHERE questions.classification IS NOT NULL AND questions.classification != %(classification_1)s GROUP BY questions.classification
2025-08-15 11:23:48 - sqlalchemy.engine.Engine - INFO - [cached since 4093s ago] {'classification_1': ''}
2025-08-15 11:23:48 - sqlalchemy.engine.Engine - INFO - SELECT questions.classification AS name, count(questions.id) AS count 
FROM questions 
WHERE questions.classification IS NOT NULL AND questions.classification != %(classification_1)s AND questions.created_at >= %(created_at_1)s GROUP BY questions.classification ORDER BY count(questions.id) DESC
2025-08-15 11:23:48 - sqlalchemy.engine.Engine - INFO - [cached since 4093s ago] {'classification_1': '', 'created_at_1': datetime.datetime(2025, 8, 8, 3, 23, 48, 647787)}
2025-08-15 11:23:48 - sqlalchemy.engine.Engine - INFO - SELECT questions.classification AS name, count(questions.id) AS count 
FROM questions 
WHERE questions.classification IS NOT NULL AND questions.classification != %(classification_1)s GROUP BY questions.classification ORDER BY count(questions.id) DESC
2025-08-15 11:23:48 - sqlalchemy.engine.Engine - INFO - [cached since 4096s ago] {'classification_1': ''}
2025-08-15 11:23:48 - sqlalchemy.engine.Engine - INFO - SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions ORDER BY questions.created_at DESC 
 LIMIT %(param_1)s
2025-08-15 11:23:48 - sqlalchemy.engine.Engine - INFO - [cached since 4093s ago] {'param_1': 5}
2025-08-15 11:23:48 - sqlalchemy.engine.Engine - INFO - SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers ORDER BY answers.created_at DESC 
 LIMIT %(param_1)s
2025-08-15 11:23:48 - sqlalchemy.engine.Engine - INFO - [cached since 4093s ago] {'param_1': 5}
2025-08-15 11:23:48 - sqlalchemy.engine.Engine - INFO - SELECT scores.id AS scores_id, scores.answer_id AS scores_answer_id, scores.score_1 AS scores_score_1, scores.score_2 AS scores_score_2, scores.score_3 AS scores_score_3, scores.score_4 AS scores_score_4, scores.score_5 AS scores_score_5, scores.dimension_1_name AS scores_dimension_1_name, scores.dimension_2_name AS scores_dimension_2_name, scores.dimension_3_name AS scores_dimension_3_name, scores.dimension_4_name AS scores_dimension_4_name, scores.dimension_5_name AS scores_dimension_5_name, scores.average_score AS scores_average_score, scores.comment AS scores_comment, scores.rated_at AS scores_rated_at 
FROM scores ORDER BY scores.rated_at DESC 
 LIMIT %(param_1)s
2025-08-15 11:23:48 - sqlalchemy.engine.Engine - INFO - [cached since 4093s ago] {'param_1': 5}
2025-08-15 11:23:48 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:23:48 - sqlalchemy.engine.Engine - INFO - [cached since 4093s ago] {'created_at_1': datetime.datetime(2025, 8, 15, 3, 18, 48, 653350)}
2025-08-15 11:23:48 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:23:48 - sqlalchemy.engine.Engine - INFO - [cached since 4093s ago] {'created_at_1': datetime.datetime(2025, 8, 15, 3, 18, 48, 653350)}
2025-08-15 11:23:48 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT scores.id AS scores_id, scores.answer_id AS scores_answer_id, scores.score_1 AS scores_score_1, scores.score_2 AS scores_score_2, scores.score_3 AS scores_score_3, scores.score_4 AS scores_score_4, scores.score_5 AS scores_score_5, scores.dimension_1_name AS scores_dimension_1_name, scores.dimension_2_name AS scores_dimension_2_name, scores.dimension_3_name AS scores_dimension_3_name, scores.dimension_4_name AS scores_dimension_4_name, scores.dimension_5_name AS scores_dimension_5_name, scores.average_score AS scores_average_score, scores.comment AS scores_comment, scores.rated_at AS scores_rated_at 
FROM scores 
WHERE scores.rated_at >= %(rated_at_1)s) AS anon_1
2025-08-15 11:23:48 - sqlalchemy.engine.Engine - INFO - [cached since 4093s ago] {'rated_at_1': datetime.datetime(2025, 8, 15, 3, 18, 48, 653350)}
2025-08-15 11:23:48 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.assistant_type = %(assistant_type_1)s AND answers.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:23:48 - sqlalchemy.engine.Engine - INFO - [cached since 4093s ago] {'assistant_type_1': 'yoyo', 'created_at_1': datetime.datetime(2025, 8, 15, 3, 18, 48, 653350)}
2025-08-15 11:23:48 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.assistant_type = %(assistant_type_1)s AND answers.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:23:48 - sqlalchemy.engine.Engine - INFO - [cached since 4093s ago] {'assistant_type_1': 'doubao', 'created_at_1': datetime.datetime(2025, 8, 15, 3, 18, 48, 653350)}
2025-08-15 11:23:48 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.assistant_type = %(assistant_type_1)s AND answers.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:23:48 - sqlalchemy.engine.Engine - INFO - [cached since 4093s ago] {'assistant_type_1': 'xiaotian', 'created_at_1': datetime.datetime(2025, 8, 15, 3, 18, 48, 653350)}
2025-08-15 11:23:48 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-15 11:24:06 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-15 11:24:06 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-15 11:24:06 - app.api.word_analysis_api - INFO - 获取词云数据请求: time_range=week, limit=40
2025-08-15 11:24:06 - app.api.word_analysis_api - INFO - 获取词云数据请求: time_range=week, limit=40
2025-08-15 11:24:06 - sqlalchemy.engine.Engine - INFO - SELECT questions.classification AS questions_classification, count(questions.id) AS badcase_count 
FROM questions 
WHERE questions.is_badcase = true GROUP BY questions.classification ORDER BY count(questions.id) DESC 
 LIMIT %(param_1)s
2025-08-15 11:24:06 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-15 11:24:06 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions) AS anon_1
2025-08-15 11:24:06 - app.services.word_analysis_service - INFO - 开始获取热词分析数据，时间范围: week, 限制: 40
2025-08-15 11:24:06 - app.services.word_analysis_service - INFO - 开始获取热词分析数据，时间范围: week, 限制: 40
2025-08-15 11:24:06 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s) AS anon_1
2025-08-15 11:24:06 - sqlalchemy.engine.Engine - INFO - [cached since 4114s ago] {}
2025-08-15 11:24:06 - sqlalchemy.engine.Engine - INFO - [cached since 4111s ago] {'param_1': 3}
2025-08-15 11:24:06 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-15 11:24:06 - sqlalchemy.engine.Engine - INFO - [cached since 4111s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 17, 23, 59, 59, 999999), 'processing_status_1': 'scored'}
2025-08-15 11:24:06 - sqlalchemy.engine.Engine - INFO - SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.query IS NOT NULL AND questions.query != %(query_1)s AND questions.is_deleted = false
2025-08-15 11:24:06 - sqlalchemy.engine.Engine - INFO - [cached since 4111s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 17, 23, 59, 59, 999999), 'query_1': ''}
2025-08-15 11:24:06 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:24:06 - app.services.word_analysis_service - INFO - 查询到 260 个问题，时间范围: 2025-08-11 00:00:00 至 2025-08-17 23:59:59.999999
2025-08-15 11:24:06 - sqlalchemy.engine.Engine - INFO - 
                WITH dimension_scores AS (
                    -- 维度1的数据
                    SELECT
                        s.dimension_1_name as dimension_name,
                        s.score_1 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_1_name IS NOT NULL
                    AND s.score_1 IS NOT NULL

                    UNION ALL

                    -- 维度2的数据
                    SELECT
                        s.dimension_2_name as dimension_name,
                        s.score_2 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_2_name IS NOT NULL
                    AND s.score_2 IS NOT NULL

                    UNION ALL

                    -- 维度3的数据
                    SELECT
                        s.dimension_3_name as dimension_name,
                        s.score_3 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_3_name IS NOT NULL
                    AND s.score_3 IS NOT NULL

                    UNION ALL

                    -- 维度4的数据
                    SELECT
                        s.dimension_4_name as dimension_name,
                        s.score_4 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_4_name IS NOT NULL
                    AND s.score_4 IS NOT NULL

                    UNION ALL

                    -- 维度5的数据
                    SELECT
                        s.dimension_5_name as dimension_name,
                        s.score_5 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_5_name IS NOT NULL
                    AND s.score_5 IS NOT NULL
                )
                SELECT
                    dimension_name,
                    AVG(score) as avg_score,
                    COUNT(*) as sample_count
                FROM dimension_scores
                GROUP BY dimension_name
                ORDER BY avg_score ASC
            
2025-08-15 11:24:06 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s AND questions.is_badcase = true) AS anon_1
2025-08-15 11:24:06 - sqlalchemy.engine.Engine - INFO - [cached since 4111s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0)}
2025-08-15 11:24:06 - app.services.word_analysis_service - INFO - 查询到 260 个问题，时间范围: 2025-08-11 00:00:00 至 2025-08-17 23:59:59.999999
2025-08-15 11:24:06 - sqlalchemy.engine.Engine - INFO - [cached since 4111s ago] {'classification': '其他'}
2025-08-15 11:24:06 - sqlalchemy.engine.Engine - INFO - [cached since 4111s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 17, 23, 59, 59, 999999), 'processing_status_1': 'scored'}
2025-08-15 11:24:06 - app.services.word_analysis_service - INFO - 问题样本 1: 为什么支付失败了？...
2025-08-15 11:24:06 - app.services.word_analysis_service - INFO - 问题样本 1: 为什么支付失败了？...
2025-08-15 11:24:06 - app.services.word_analysis_service - INFO - 问题样本 2: 数据统计在哪里可以找到？...
2025-08-15 11:24:06 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s) AS anon_1
2025-08-15 11:24:06 - app.services.word_analysis_service - INFO - 问题样本 2: 数据统计在哪里可以找到？...
2025-08-15 11:24:06 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s AND questions.is_badcase = true AND questions.badcase_review_status = %(badcase_review_status_1)s) AS anon_1
2025-08-15 11:24:06 - sqlalchemy.engine.Engine - INFO - [cached since 4111s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'classification_1': ''}
2025-08-15 11:24:06 - app.services.word_analysis_service - INFO - 问题样本 3: 如何更新个人信息？...
2025-08-15 11:24:06 - app.services.word_analysis_service - INFO - 问题样本 3: 如何更新个人信息？...
2025-08-15 11:24:06 - sqlalchemy.engine.Engine - INFO - [cached since 4111s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 17, 23, 59, 59, 999999), 'processing_status_1': 'scored', 'badcase_review_status_1': 'pending'}
2025-08-15 11:24:06 - app.services.word_analysis_service - INFO - 有效问题文本数: 260, 总文本长度: 2914
2025-08-15 11:24:06 - app.services.word_analysis_service - INFO - 有效问题文本数: 260, 总文本长度: 2914
2025-08-15 11:24:06 - app.services.word_analysis_service - INFO - 文本分析完成，原始词汇: 1755, 过滤后: 653, 唯一词汇: 58
2025-08-15 11:24:06 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.classification IS NOT NULL AND questions.classification != %(classification_1)s) AS anon_1
2025-08-15 11:24:06 - app.services.word_analysis_service - INFO - 文本分析完成，原始词汇: 1755, 过滤后: 653, 唯一词汇: 58
2025-08-15 11:24:06 - sqlalchemy.engine.Engine - INFO - 
                WITH dimension_scores AS (
                    -- 维度1的数据
                    SELECT
                        s.dimension_1_name as dimension_name,
                        s.score_1 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_1_name IS NOT NULL
                    AND s.score_1 IS NOT NULL

                    UNION ALL

                    -- 维度2的数据
                    SELECT
                        s.dimension_2_name as dimension_name,
                        s.score_2 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_2_name IS NOT NULL
                    AND s.score_2 IS NOT NULL

                    UNION ALL

                    -- 维度3的数据
                    SELECT
                        s.dimension_3_name as dimension_name,
                        s.score_3 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_3_name IS NOT NULL
                    AND s.score_3 IS NOT NULL

                    UNION ALL

                    -- 维度4的数据
                    SELECT
                        s.dimension_4_name as dimension_name,
                        s.score_4 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_4_name IS NOT NULL
                    AND s.score_4 IS NOT NULL

                    UNION ALL

                    -- 维度5的数据
                    SELECT
                        s.dimension_5_name as dimension_name,
                        s.score_5 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_5_name IS NOT NULL
                    AND s.score_5 IS NOT NULL
                )
                SELECT
                    dimension_name,
                    AVG(score) as avg_score,
                    COUNT(*) as sample_count
                FROM dimension_scores
                GROUP BY dimension_name
                ORDER BY avg_score ASC
            
2025-08-15 11:24:06 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s AND questions.badcase_review_status = %(badcase_review_status_1)s) AS anon_1
2025-08-15 11:24:06 - sqlalchemy.engine.Engine - INFO - [cached since 4111s ago] {'classification_1': ''}
2025-08-15 11:24:06 - app.services.word_analysis_service - INFO - 热词分析完成，共分析 260 个问题，生成 40 个热词
2025-08-15 11:24:06 - app.services.word_analysis_service - INFO - 热词分析完成，共分析 260 个问题，生成 40 个热词
2025-08-15 11:24:06 - sqlalchemy.engine.Engine - INFO - [cached since 4111s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 17, 23, 59, 59, 999999), 'processing_status_1': 'scored', 'badcase_review_status_1': 'reviewed'}
2025-08-15 11:24:06 - sqlalchemy.engine.Engine - INFO - [cached since 4111s ago] {'classification': '产品使用'}
2025-08-15 11:24:06 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-15 11:24:06 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT access_logs.id AS access_logs_id, access_logs.user_id AS access_logs_user_id, access_logs.username AS access_logs_username, access_logs.action AS access_logs_action, access_logs.ip_address AS access_logs_ip_address, access_logs.created_at AS access_logs_created_at 
FROM access_logs 
WHERE access_logs.action = %(action_1)s) AS anon_1
2025-08-15 11:24:06 - sqlalchemy.engine.Engine - INFO - [cached since 4111s ago] {'action_1': 'login'}
2025-08-15 11:24:06 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s AND questions.badcase_review_status = %(badcase_review_status_1)s AND questions.is_badcase = false) AS anon_1
2025-08-15 11:24:06 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT access_logs.id AS access_logs_id, access_logs.user_id AS access_logs_user_id, access_logs.username AS access_logs_username, access_logs.action AS access_logs_action, access_logs.ip_address AS access_logs_ip_address, access_logs.created_at AS access_logs_created_at 
FROM access_logs 
WHERE access_logs.action = %(action_1)s AND access_logs.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:24:06 - sqlalchemy.engine.Engine - INFO - [cached since 4111s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 17, 23, 59, 59, 999999), 'processing_status_1': 'scored', 'badcase_review_status_1': 'reviewed'}
2025-08-15 11:24:06 - sqlalchemy.engine.Engine - INFO - [cached since 4111s ago] {'action_1': 'login', 'created_at_1': datetime.datetime(2025, 8, 11, 0, 0)}
2025-08-15 11:24:06 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:24:06 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-15 11:24:06 - sqlalchemy.engine.Engine - INFO - [cached since 4111s ago] {'created_at_1': datetime.datetime(2025, 8, 15, 0, 0)}
2025-08-15 11:24:06 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:24:06 - sqlalchemy.engine.Engine - INFO - 
                WITH dimension_scores AS (
                    -- 维度1的数据
                    SELECT
                        s.dimension_1_name as dimension_name,
                        s.score_1 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_1_name IS NOT NULL
                    AND s.score_1 IS NOT NULL

                    UNION ALL

                    -- 维度2的数据
                    SELECT
                        s.dimension_2_name as dimension_name,
                        s.score_2 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_2_name IS NOT NULL
                    AND s.score_2 IS NOT NULL

                    UNION ALL

                    -- 维度3的数据
                    SELECT
                        s.dimension_3_name as dimension_name,
                        s.score_3 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_3_name IS NOT NULL
                    AND s.score_3 IS NOT NULL

                    UNION ALL

                    -- 维度4的数据
                    SELECT
                        s.dimension_4_name as dimension_name,
                        s.score_4 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_4_name IS NOT NULL
                    AND s.score_4 IS NOT NULL

                    UNION ALL

                    -- 维度5的数据
                    SELECT
                        s.dimension_5_name as dimension_name,
                        s.score_5 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_5_name IS NOT NULL
                    AND s.score_5 IS NOT NULL
                )
                SELECT
                    dimension_name,
                    AVG(score) as avg_score,
                    COUNT(*) as sample_count
                FROM dimension_scores
                GROUP BY dimension_name
                ORDER BY avg_score ASC
            
2025-08-15 11:24:06 - sqlalchemy.engine.Engine - INFO - [cached since 4111s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0)}
2025-08-15 11:24:06 - sqlalchemy.engine.Engine - INFO - [cached since 4111s ago] {'classification': '功能建议'}
2025-08-15 11:24:06 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s) AS anon_1
2025-08-15 11:24:06 - sqlalchemy.engine.Engine - INFO - [cached since 4111s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'classification_1': ''}
2025-08-15 11:24:06 - sqlalchemy.engine.Engine - INFO - SELECT coalesce(sum(least(anon_1.cnt, %(least_1)s)), %(coalesce_2)s) AS coalesce_1 
FROM (SELECT answers.question_business_id AS qbid, count(answers.id) AS cnt 
FROM answers JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.created_at >= %(created_at_1)s AND answers.created_at >= %(created_at_2)s AND answers.assistant_type IN (%(assistant_type_1_1)s, %(assistant_type_1_2)s) AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s GROUP BY answers.question_business_id) AS anon_1
2025-08-15 11:24:06 - sqlalchemy.engine.Engine - INFO - [cached since 4111s ago] {'least_1': 2, 'coalesce_2': 0, 'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 11, 0, 0), 'classification_1': '', 'assistant_type_1_1': 'doubao', 'assistant_type_1_2': 'xiaotian'}
2025-08-15 11:24:06 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT count(distinct(answers.question_business_id)) AS count_2 
FROM answers JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.created_at >= %(created_at_1)s AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s AND answers.is_scored = true AND answers.assistant_type IN (%(assistant_type_1_1)s, %(assistant_type_1_2)s, %(assistant_type_1_3)s) GROUP BY answers.question_business_id 
HAVING count(distinct(answers.assistant_type)) = %(count_3)s) AS anon_1
2025-08-15 11:24:06 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-15 11:24:06 - sqlalchemy.engine.Engine - INFO - [cached since 4111s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'classification_1': '', 'count_3': 3, 'assistant_type_1_1': 'yoyo', 'assistant_type_1_2': 'doubao', 'assistant_type_1_3': 'xiaotian'}
2025-08-15 11:24:06 - sqlalchemy.engine.Engine - INFO - SELECT count(distinct(questions.business_id)) AS count_1 
FROM questions JOIN answers ON questions.business_id = answers.question_business_id 
WHERE questions.created_at >= %(created_at_1)s AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s AND answers.assistant_type IN (%(assistant_type_1_1)s, %(assistant_type_1_2)s) AND answers.created_at >= %(created_at_2)s
2025-08-15 11:24:06 - sqlalchemy.engine.Engine - INFO - [cached since 4111s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'classification_1': '', 'created_at_2': datetime.datetime(2025, 8, 11, 0, 0), 'assistant_type_1_1': 'doubao', 'assistant_type_1_2': 'xiaotian'}
2025-08-15 11:24:06 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.processing_status = %(processing_status_1)s AND questions.is_badcase = true) AS anon_1
2025-08-15 11:24:06 - sqlalchemy.engine.Engine - INFO - [cached since 4111s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'processing_status_1': 'scored'}
2025-08-15 11:24:06 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.processing_status = %(processing_status_1)s AND questions.badcase_review_status = %(badcase_review_status_1)s) AS anon_1
2025-08-15 11:24:06 - sqlalchemy.engine.Engine - INFO - [cached since 4111s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'processing_status_1': 'scored', 'badcase_review_status_1': 'reviewed'}
2025-08-15 11:24:06 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:24:06 - sqlalchemy.engine.Engine - INFO - [cached since 4111s ago] {'created_at_1': datetime.datetime(2025, 8, 15, 2, 24, 6, 634554)}
2025-08-15 11:24:06 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:24:06 - sqlalchemy.engine.Engine - INFO - [cached since 4111s ago] {'created_at_1': datetime.datetime(2025, 8, 14, 21, 24, 6, 634554)}
2025-08-15 11:24:06 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.updated_at >= %(updated_at_1)s AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s) AS anon_1
2025-08-15 11:24:06 - sqlalchemy.engine.Engine - INFO - [cached since 4111s ago] {'updated_at_1': datetime.datetime(2025, 8, 15, 2, 54, 6, 634554), 'classification_1': ''}
2025-08-15 11:24:06 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers JOIN questions ON answers.question_business_id = questions.business_id 
WHERE answers.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:24:06 - sqlalchemy.engine.Engine - INFO - [cached since 4111s ago] {'created_at_1': datetime.datetime(2025, 8, 15, 2, 54, 6, 634554)}
2025-08-15 11:24:06 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.updated_at >= %(updated_at_1)s AND answers.is_scored = true) AS anon_1
2025-08-15 11:24:06 - sqlalchemy.engine.Engine - INFO - [cached since 4111s ago] {'updated_at_1': datetime.datetime(2025, 8, 15, 2, 54, 6, 634554)}
2025-08-15 11:24:06 - sqlalchemy.engine.Engine - INFO - SELECT date_trunc(%(date_trunc_1)s, questions.created_at) AS day, count(questions.id) AS count 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s GROUP BY date_trunc(%(date_trunc_2)s, questions.created_at) ORDER BY day
2025-08-15 11:24:06 - sqlalchemy.engine.Engine - INFO - [cached since 4111s ago] {'date_trunc_1': 'day', 'created_at_1': datetime.datetime(2025, 8, 8, 3, 24, 6, 653690), 'date_trunc_2': 'day'}
2025-08-15 11:24:06 - sqlalchemy.engine.Engine - INFO - SELECT date_trunc(%(date_trunc_1)s, questions.updated_at) AS day, count(questions.id) AS count 
FROM questions 
WHERE questions.updated_at >= %(updated_at_1)s AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s AND questions.processing_status IN (%(processing_status_1_1)s, %(processing_status_1_2)s, %(processing_status_1_3)s) GROUP BY date_trunc(%(date_trunc_2)s, questions.updated_at) ORDER BY day
2025-08-15 11:24:06 - sqlalchemy.engine.Engine - INFO - [cached since 4111s ago] {'date_trunc_1': 'day', 'updated_at_1': datetime.datetime(2025, 8, 8, 3, 24, 6, 653690), 'classification_1': '', 'date_trunc_2': 'day', 'processing_status_1_1': 'classified', 'processing_status_1_2': 'answers_generated', 'processing_status_1_3': 'scored'}
2025-08-15 11:24:06 - sqlalchemy.engine.Engine - INFO - SELECT date_trunc(%(date_trunc_1)s, answers.created_at) AS day, count(answers.id) AS count 
FROM answers JOIN questions ON answers.question_business_id = questions.business_id 
WHERE answers.created_at >= %(created_at_1)s AND questions.created_at >= %(created_at_2)s AND answers.assistant_type IN (%(assistant_type_1_1)s, %(assistant_type_1_2)s) AND answers.is_scored = true AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s GROUP BY date_trunc(%(date_trunc_2)s, answers.created_at) ORDER BY day
2025-08-15 11:24:06 - sqlalchemy.engine.Engine - INFO - [cached since 4111s ago] {'date_trunc_1': 'day', 'created_at_1': datetime.datetime(2025, 8, 8, 3, 24, 6, 653690), 'created_at_2': datetime.datetime(2025, 8, 8, 3, 24, 6, 653690), 'classification_1': '', 'date_trunc_2': 'day', 'assistant_type_1_1': 'doubao', 'assistant_type_1_2': 'xiaotian'}
2025-08-15 11:24:06 - sqlalchemy.engine.Engine - INFO - SELECT answers.assistant_type AS answers_assistant_type, avg(scores.score_1) AS avg_score_1, avg(scores.score_2) AS avg_score_2, avg(scores.score_3) AS avg_score_3, avg(scores.score_4) AS avg_score_4, avg(scores.score_5) AS avg_score_5, avg(scores.average_score) AS avg_total, count(scores.id) AS score_count 
FROM answers JOIN scores ON answers.id = scores.answer_id GROUP BY answers.assistant_type
2025-08-15 11:24:06 - sqlalchemy.engine.Engine - INFO - [cached since 4111s ago] {}
2025-08-15 11:24:06 - sqlalchemy.engine.Engine - INFO - SELECT system_config.id AS system_config_id, system_config.config_key AS system_config_config_key, system_config.config_value AS system_config_config_value, system_config.config_type AS system_config_config_type, system_config.description AS system_config_description, system_config.effective_time AS system_config_effective_time, system_config.previous_value AS system_config_previous_value, system_config.status AS system_config_status, system_config.created_at AS system_config_created_at, system_config.updated_at AS system_config_updated_at 
FROM system_config 
WHERE system_config.config_key = %(config_key_1)s 
 LIMIT %(param_1)s
2025-08-15 11:24:06 - sqlalchemy.engine.Engine - INFO - [cached since 4111s ago] {'config_key_1': 'display.hot_categories_time_range', 'param_1': 1}
2025-08-15 11:24:06 - sqlalchemy.engine.Engine - INFO - SELECT questions.classification AS name, count(questions.id) AS count 
FROM questions 
WHERE questions.classification IS NOT NULL AND questions.classification != %(classification_1)s GROUP BY questions.classification
2025-08-15 11:24:06 - sqlalchemy.engine.Engine - INFO - [cached since 4111s ago] {'classification_1': ''}
2025-08-15 11:24:06 - sqlalchemy.engine.Engine - INFO - SELECT questions.classification AS name, count(questions.id) AS count 
FROM questions 
WHERE questions.classification IS NOT NULL AND questions.classification != %(classification_1)s AND questions.created_at >= %(created_at_1)s GROUP BY questions.classification ORDER BY count(questions.id) DESC
2025-08-15 11:24:06 - sqlalchemy.engine.Engine - INFO - [cached since 4111s ago] {'classification_1': '', 'created_at_1': datetime.datetime(2025, 8, 8, 3, 24, 6, 664617)}
2025-08-15 11:24:06 - sqlalchemy.engine.Engine - INFO - SELECT questions.classification AS name, count(questions.id) AS count 
FROM questions 
WHERE questions.classification IS NOT NULL AND questions.classification != %(classification_1)s GROUP BY questions.classification ORDER BY count(questions.id) DESC
2025-08-15 11:24:06 - sqlalchemy.engine.Engine - INFO - [cached since 4114s ago] {'classification_1': ''}
2025-08-15 11:24:06 - sqlalchemy.engine.Engine - INFO - SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions ORDER BY questions.created_at DESC 
 LIMIT %(param_1)s
2025-08-15 11:24:06 - sqlalchemy.engine.Engine - INFO - [cached since 4111s ago] {'param_1': 5}
2025-08-15 11:24:06 - sqlalchemy.engine.Engine - INFO - SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers ORDER BY answers.created_at DESC 
 LIMIT %(param_1)s
2025-08-15 11:24:06 - sqlalchemy.engine.Engine - INFO - [cached since 4111s ago] {'param_1': 5}
2025-08-15 11:24:06 - sqlalchemy.engine.Engine - INFO - SELECT scores.id AS scores_id, scores.answer_id AS scores_answer_id, scores.score_1 AS scores_score_1, scores.score_2 AS scores_score_2, scores.score_3 AS scores_score_3, scores.score_4 AS scores_score_4, scores.score_5 AS scores_score_5, scores.dimension_1_name AS scores_dimension_1_name, scores.dimension_2_name AS scores_dimension_2_name, scores.dimension_3_name AS scores_dimension_3_name, scores.dimension_4_name AS scores_dimension_4_name, scores.dimension_5_name AS scores_dimension_5_name, scores.average_score AS scores_average_score, scores.comment AS scores_comment, scores.rated_at AS scores_rated_at 
FROM scores ORDER BY scores.rated_at DESC 
 LIMIT %(param_1)s
2025-08-15 11:24:06 - sqlalchemy.engine.Engine - INFO - [cached since 4111s ago] {'param_1': 5}
2025-08-15 11:24:06 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:24:06 - sqlalchemy.engine.Engine - INFO - [cached since 4111s ago] {'created_at_1': datetime.datetime(2025, 8, 15, 3, 19, 6, 669745)}
2025-08-15 11:24:06 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:24:06 - sqlalchemy.engine.Engine - INFO - [cached since 4111s ago] {'created_at_1': datetime.datetime(2025, 8, 15, 3, 19, 6, 669745)}
2025-08-15 11:24:06 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT scores.id AS scores_id, scores.answer_id AS scores_answer_id, scores.score_1 AS scores_score_1, scores.score_2 AS scores_score_2, scores.score_3 AS scores_score_3, scores.score_4 AS scores_score_4, scores.score_5 AS scores_score_5, scores.dimension_1_name AS scores_dimension_1_name, scores.dimension_2_name AS scores_dimension_2_name, scores.dimension_3_name AS scores_dimension_3_name, scores.dimension_4_name AS scores_dimension_4_name, scores.dimension_5_name AS scores_dimension_5_name, scores.average_score AS scores_average_score, scores.comment AS scores_comment, scores.rated_at AS scores_rated_at 
FROM scores 
WHERE scores.rated_at >= %(rated_at_1)s) AS anon_1
2025-08-15 11:24:06 - sqlalchemy.engine.Engine - INFO - [cached since 4111s ago] {'rated_at_1': datetime.datetime(2025, 8, 15, 3, 19, 6, 669745)}
2025-08-15 11:24:06 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.assistant_type = %(assistant_type_1)s AND answers.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:24:06 - sqlalchemy.engine.Engine - INFO - [cached since 4111s ago] {'assistant_type_1': 'yoyo', 'created_at_1': datetime.datetime(2025, 8, 15, 3, 19, 6, 669745)}
2025-08-15 11:24:06 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.assistant_type = %(assistant_type_1)s AND answers.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:24:06 - sqlalchemy.engine.Engine - INFO - [cached since 4111s ago] {'assistant_type_1': 'doubao', 'created_at_1': datetime.datetime(2025, 8, 15, 3, 19, 6, 669745)}
2025-08-15 11:24:06 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.assistant_type = %(assistant_type_1)s AND answers.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:24:06 - sqlalchemy.engine.Engine - INFO - [cached since 4111s ago] {'assistant_type_1': 'xiaotian', 'created_at_1': datetime.datetime(2025, 8, 15, 3, 19, 6, 669745)}
2025-08-15 11:24:06 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-15 11:24:35 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-15 11:24:35 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-15 11:24:35 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s) AS anon_1
2025-08-15 11:24:35 - sqlalchemy.engine.Engine - INFO - SELECT questions.classification AS questions_classification, count(questions.id) AS badcase_count 
FROM questions 
WHERE questions.is_badcase = true GROUP BY questions.classification ORDER BY count(questions.id) DESC 
 LIMIT %(param_1)s
2025-08-15 11:24:35 - sqlalchemy.engine.Engine - INFO - [cached since 4140s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 17, 23, 59, 59, 999999), 'processing_status_1': 'scored'}
2025-08-15 11:24:35 - sqlalchemy.engine.Engine - INFO - [cached since 4140s ago] {'param_1': 3}
2025-08-15 11:24:35 - sqlalchemy.engine.Engine - INFO - 
                WITH dimension_scores AS (
                    -- 维度1的数据
                    SELECT
                        s.dimension_1_name as dimension_name,
                        s.score_1 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_1_name IS NOT NULL
                    AND s.score_1 IS NOT NULL

                    UNION ALL

                    -- 维度2的数据
                    SELECT
                        s.dimension_2_name as dimension_name,
                        s.score_2 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_2_name IS NOT NULL
                    AND s.score_2 IS NOT NULL

                    UNION ALL

                    -- 维度3的数据
                    SELECT
                        s.dimension_3_name as dimension_name,
                        s.score_3 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_3_name IS NOT NULL
                    AND s.score_3 IS NOT NULL

                    UNION ALL

                    -- 维度4的数据
                    SELECT
                        s.dimension_4_name as dimension_name,
                        s.score_4 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_4_name IS NOT NULL
                    AND s.score_4 IS NOT NULL

                    UNION ALL

                    -- 维度5的数据
                    SELECT
                        s.dimension_5_name as dimension_name,
                        s.score_5 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_5_name IS NOT NULL
                    AND s.score_5 IS NOT NULL
                )
                SELECT
                    dimension_name,
                    AVG(score) as avg_score,
                    COUNT(*) as sample_count
                FROM dimension_scores
                GROUP BY dimension_name
                ORDER BY avg_score ASC
            
2025-08-15 11:24:35 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s AND questions.is_badcase = true) AS anon_1
2025-08-15 11:24:35 - sqlalchemy.engine.Engine - INFO - [cached since 4140s ago] {'classification': '其他'}
2025-08-15 11:24:35 - sqlalchemy.engine.Engine - INFO - [cached since 4140s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 17, 23, 59, 59, 999999), 'processing_status_1': 'scored'}
2025-08-15 11:24:35 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s AND questions.is_badcase = true AND questions.badcase_review_status = %(badcase_review_status_1)s) AS anon_1
2025-08-15 11:24:35 - sqlalchemy.engine.Engine - INFO - [cached since 4140s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 17, 23, 59, 59, 999999), 'processing_status_1': 'scored', 'badcase_review_status_1': 'pending'}
2025-08-15 11:24:35 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s AND questions.badcase_review_status = %(badcase_review_status_1)s) AS anon_1
2025-08-15 11:24:35 - sqlalchemy.engine.Engine - INFO - [cached since 4140s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 17, 23, 59, 59, 999999), 'processing_status_1': 'scored', 'badcase_review_status_1': 'reviewed'}
2025-08-15 11:24:35 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s AND questions.badcase_review_status = %(badcase_review_status_1)s AND questions.is_badcase = false) AS anon_1
2025-08-15 11:24:35 - sqlalchemy.engine.Engine - INFO - [cached since 4140s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 17, 23, 59, 59, 999999), 'processing_status_1': 'scored', 'badcase_review_status_1': 'reviewed'}
2025-08-15 11:24:35 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-15 11:24:35 - sqlalchemy.engine.Engine - INFO - 
                WITH dimension_scores AS (
                    -- 维度1的数据
                    SELECT
                        s.dimension_1_name as dimension_name,
                        s.score_1 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_1_name IS NOT NULL
                    AND s.score_1 IS NOT NULL

                    UNION ALL

                    -- 维度2的数据
                    SELECT
                        s.dimension_2_name as dimension_name,
                        s.score_2 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_2_name IS NOT NULL
                    AND s.score_2 IS NOT NULL

                    UNION ALL

                    -- 维度3的数据
                    SELECT
                        s.dimension_3_name as dimension_name,
                        s.score_3 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_3_name IS NOT NULL
                    AND s.score_3 IS NOT NULL

                    UNION ALL

                    -- 维度4的数据
                    SELECT
                        s.dimension_4_name as dimension_name,
                        s.score_4 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_4_name IS NOT NULL
                    AND s.score_4 IS NOT NULL

                    UNION ALL

                    -- 维度5的数据
                    SELECT
                        s.dimension_5_name as dimension_name,
                        s.score_5 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_5_name IS NOT NULL
                    AND s.score_5 IS NOT NULL
                )
                SELECT
                    dimension_name,
                    AVG(score) as avg_score,
                    COUNT(*) as sample_count
                FROM dimension_scores
                GROUP BY dimension_name
                ORDER BY avg_score ASC
            
2025-08-15 11:24:35 - sqlalchemy.engine.Engine - INFO - [cached since 4140s ago] {'classification': '产品使用'}
2025-08-15 11:24:35 - sqlalchemy.engine.Engine - INFO - 
                WITH dimension_scores AS (
                    -- 维度1的数据
                    SELECT
                        s.dimension_1_name as dimension_name,
                        s.score_1 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_1_name IS NOT NULL
                    AND s.score_1 IS NOT NULL

                    UNION ALL

                    -- 维度2的数据
                    SELECT
                        s.dimension_2_name as dimension_name,
                        s.score_2 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_2_name IS NOT NULL
                    AND s.score_2 IS NOT NULL

                    UNION ALL

                    -- 维度3的数据
                    SELECT
                        s.dimension_3_name as dimension_name,
                        s.score_3 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_3_name IS NOT NULL
                    AND s.score_3 IS NOT NULL

                    UNION ALL

                    -- 维度4的数据
                    SELECT
                        s.dimension_4_name as dimension_name,
                        s.score_4 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_4_name IS NOT NULL
                    AND s.score_4 IS NOT NULL

                    UNION ALL

                    -- 维度5的数据
                    SELECT
                        s.dimension_5_name as dimension_name,
                        s.score_5 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_5_name IS NOT NULL
                    AND s.score_5 IS NOT NULL
                )
                SELECT
                    dimension_name,
                    AVG(score) as avg_score,
                    COUNT(*) as sample_count
                FROM dimension_scores
                GROUP BY dimension_name
                ORDER BY avg_score ASC
            
2025-08-15 11:24:35 - sqlalchemy.engine.Engine - INFO - [cached since 4140s ago] {'classification': '功能建议'}
2025-08-15 11:24:35 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-15 11:24:35 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-15 11:24:35 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions) AS anon_1
2025-08-15 11:24:35 - sqlalchemy.engine.Engine - INFO - [cached since 4143s ago] {}
2025-08-15 11:24:35 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:24:35 - sqlalchemy.engine.Engine - INFO - [cached since 4140s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0)}
2025-08-15 11:24:35 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s) AS anon_1
2025-08-15 11:24:35 - sqlalchemy.engine.Engine - INFO - [cached since 4140s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'classification_1': ''}
2025-08-15 11:24:35 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.classification IS NOT NULL AND questions.classification != %(classification_1)s) AS anon_1
2025-08-15 11:24:35 - sqlalchemy.engine.Engine - INFO - [cached since 4140s ago] {'classification_1': ''}
2025-08-15 11:24:35 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT access_logs.id AS access_logs_id, access_logs.user_id AS access_logs_user_id, access_logs.username AS access_logs_username, access_logs.action AS access_logs_action, access_logs.ip_address AS access_logs_ip_address, access_logs.created_at AS access_logs_created_at 
FROM access_logs 
WHERE access_logs.action = %(action_1)s) AS anon_1
2025-08-15 11:24:35 - sqlalchemy.engine.Engine - INFO - [cached since 4140s ago] {'action_1': 'login'}
2025-08-15 11:24:35 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT access_logs.id AS access_logs_id, access_logs.user_id AS access_logs_user_id, access_logs.username AS access_logs_username, access_logs.action AS access_logs_action, access_logs.ip_address AS access_logs_ip_address, access_logs.created_at AS access_logs_created_at 
FROM access_logs 
WHERE access_logs.action = %(action_1)s AND access_logs.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:24:35 - sqlalchemy.engine.Engine - INFO - [cached since 4140s ago] {'action_1': 'login', 'created_at_1': datetime.datetime(2025, 8, 11, 0, 0)}
2025-08-15 11:24:35 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:24:35 - sqlalchemy.engine.Engine - INFO - [cached since 4140s ago] {'created_at_1': datetime.datetime(2025, 8, 15, 0, 0)}
2025-08-15 11:24:35 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:24:35 - sqlalchemy.engine.Engine - INFO - [cached since 4140s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0)}
2025-08-15 11:24:35 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s) AS anon_1
2025-08-15 11:24:35 - sqlalchemy.engine.Engine - INFO - [cached since 4140s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'classification_1': ''}
2025-08-15 11:24:35 - sqlalchemy.engine.Engine - INFO - SELECT coalesce(sum(least(anon_1.cnt, %(least_1)s)), %(coalesce_2)s) AS coalesce_1 
FROM (SELECT answers.question_business_id AS qbid, count(answers.id) AS cnt 
FROM answers JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.created_at >= %(created_at_1)s AND answers.created_at >= %(created_at_2)s AND answers.assistant_type IN (%(assistant_type_1_1)s, %(assistant_type_1_2)s) AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s GROUP BY answers.question_business_id) AS anon_1
2025-08-15 11:24:35 - sqlalchemy.engine.Engine - INFO - [cached since 4140s ago] {'least_1': 2, 'coalesce_2': 0, 'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 11, 0, 0), 'classification_1': '', 'assistant_type_1_1': 'doubao', 'assistant_type_1_2': 'xiaotian'}
2025-08-15 11:24:35 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT count(distinct(answers.question_business_id)) AS count_2 
FROM answers JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.created_at >= %(created_at_1)s AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s AND answers.is_scored = true AND answers.assistant_type IN (%(assistant_type_1_1)s, %(assistant_type_1_2)s, %(assistant_type_1_3)s) GROUP BY answers.question_business_id 
HAVING count(distinct(answers.assistant_type)) = %(count_3)s) AS anon_1
2025-08-15 11:24:35 - sqlalchemy.engine.Engine - INFO - [cached since 4140s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'classification_1': '', 'count_3': 3, 'assistant_type_1_1': 'yoyo', 'assistant_type_1_2': 'doubao', 'assistant_type_1_3': 'xiaotian'}
2025-08-15 11:24:35 - sqlalchemy.engine.Engine - INFO - SELECT count(distinct(questions.business_id)) AS count_1 
FROM questions JOIN answers ON questions.business_id = answers.question_business_id 
WHERE questions.created_at >= %(created_at_1)s AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s AND answers.assistant_type IN (%(assistant_type_1_1)s, %(assistant_type_1_2)s) AND answers.created_at >= %(created_at_2)s
2025-08-15 11:24:35 - sqlalchemy.engine.Engine - INFO - [cached since 4140s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'classification_1': '', 'created_at_2': datetime.datetime(2025, 8, 11, 0, 0), 'assistant_type_1_1': 'doubao', 'assistant_type_1_2': 'xiaotian'}
2025-08-15 11:24:35 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.processing_status = %(processing_status_1)s AND questions.is_badcase = true) AS anon_1
2025-08-15 11:24:35 - sqlalchemy.engine.Engine - INFO - [cached since 4140s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'processing_status_1': 'scored'}
2025-08-15 11:24:35 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.processing_status = %(processing_status_1)s AND questions.badcase_review_status = %(badcase_review_status_1)s) AS anon_1
2025-08-15 11:24:35 - sqlalchemy.engine.Engine - INFO - [cached since 4140s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'processing_status_1': 'scored', 'badcase_review_status_1': 'reviewed'}
2025-08-15 11:24:35 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:24:35 - sqlalchemy.engine.Engine - INFO - [cached since 4140s ago] {'created_at_1': datetime.datetime(2025, 8, 15, 2, 24, 35, 705452)}
2025-08-15 11:24:35 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:24:35 - sqlalchemy.engine.Engine - INFO - [cached since 4140s ago] {'created_at_1': datetime.datetime(2025, 8, 14, 21, 24, 35, 705452)}
2025-08-15 11:24:35 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.updated_at >= %(updated_at_1)s AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s) AS anon_1
2025-08-15 11:24:35 - sqlalchemy.engine.Engine - INFO - [cached since 4140s ago] {'updated_at_1': datetime.datetime(2025, 8, 15, 2, 54, 35, 705452), 'classification_1': ''}
2025-08-15 11:24:35 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers JOIN questions ON answers.question_business_id = questions.business_id 
WHERE answers.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:24:35 - sqlalchemy.engine.Engine - INFO - [cached since 4140s ago] {'created_at_1': datetime.datetime(2025, 8, 15, 2, 54, 35, 705452)}
2025-08-15 11:24:35 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.updated_at >= %(updated_at_1)s AND answers.is_scored = true) AS anon_1
2025-08-15 11:24:35 - sqlalchemy.engine.Engine - INFO - [cached since 4140s ago] {'updated_at_1': datetime.datetime(2025, 8, 15, 2, 54, 35, 705452)}
2025-08-15 11:24:35 - sqlalchemy.engine.Engine - INFO - SELECT date_trunc(%(date_trunc_1)s, questions.created_at) AS day, count(questions.id) AS count 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s GROUP BY date_trunc(%(date_trunc_2)s, questions.created_at) ORDER BY day
2025-08-15 11:24:35 - sqlalchemy.engine.Engine - INFO - [cached since 4140s ago] {'date_trunc_1': 'day', 'created_at_1': datetime.datetime(2025, 8, 8, 3, 24, 35, 724294), 'date_trunc_2': 'day'}
2025-08-15 11:24:35 - sqlalchemy.engine.Engine - INFO - SELECT date_trunc(%(date_trunc_1)s, questions.updated_at) AS day, count(questions.id) AS count 
FROM questions 
WHERE questions.updated_at >= %(updated_at_1)s AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s AND questions.processing_status IN (%(processing_status_1_1)s, %(processing_status_1_2)s, %(processing_status_1_3)s) GROUP BY date_trunc(%(date_trunc_2)s, questions.updated_at) ORDER BY day
2025-08-15 11:24:35 - sqlalchemy.engine.Engine - INFO - [cached since 4140s ago] {'date_trunc_1': 'day', 'updated_at_1': datetime.datetime(2025, 8, 8, 3, 24, 35, 724294), 'classification_1': '', 'date_trunc_2': 'day', 'processing_status_1_1': 'classified', 'processing_status_1_2': 'answers_generated', 'processing_status_1_3': 'scored'}
2025-08-15 11:24:35 - sqlalchemy.engine.Engine - INFO - SELECT date_trunc(%(date_trunc_1)s, answers.created_at) AS day, count(answers.id) AS count 
FROM answers JOIN questions ON answers.question_business_id = questions.business_id 
WHERE answers.created_at >= %(created_at_1)s AND questions.created_at >= %(created_at_2)s AND answers.assistant_type IN (%(assistant_type_1_1)s, %(assistant_type_1_2)s) AND answers.is_scored = true AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s GROUP BY date_trunc(%(date_trunc_2)s, answers.created_at) ORDER BY day
2025-08-15 11:24:35 - sqlalchemy.engine.Engine - INFO - [cached since 4140s ago] {'date_trunc_1': 'day', 'created_at_1': datetime.datetime(2025, 8, 8, 3, 24, 35, 724294), 'created_at_2': datetime.datetime(2025, 8, 8, 3, 24, 35, 724294), 'classification_1': '', 'date_trunc_2': 'day', 'assistant_type_1_1': 'doubao', 'assistant_type_1_2': 'xiaotian'}
2025-08-15 11:24:35 - sqlalchemy.engine.Engine - INFO - SELECT answers.assistant_type AS answers_assistant_type, avg(scores.score_1) AS avg_score_1, avg(scores.score_2) AS avg_score_2, avg(scores.score_3) AS avg_score_3, avg(scores.score_4) AS avg_score_4, avg(scores.score_5) AS avg_score_5, avg(scores.average_score) AS avg_total, count(scores.id) AS score_count 
FROM answers JOIN scores ON answers.id = scores.answer_id GROUP BY answers.assistant_type
2025-08-15 11:24:35 - sqlalchemy.engine.Engine - INFO - [cached since 4140s ago] {}
2025-08-15 11:24:35 - sqlalchemy.engine.Engine - INFO - SELECT system_config.id AS system_config_id, system_config.config_key AS system_config_config_key, system_config.config_value AS system_config_config_value, system_config.config_type AS system_config_config_type, system_config.description AS system_config_description, system_config.effective_time AS system_config_effective_time, system_config.previous_value AS system_config_previous_value, system_config.status AS system_config_status, system_config.created_at AS system_config_created_at, system_config.updated_at AS system_config_updated_at 
FROM system_config 
WHERE system_config.config_key = %(config_key_1)s 
 LIMIT %(param_1)s
2025-08-15 11:24:35 - sqlalchemy.engine.Engine - INFO - [cached since 4140s ago] {'config_key_1': 'display.hot_categories_time_range', 'param_1': 1}
2025-08-15 11:24:35 - sqlalchemy.engine.Engine - INFO - SELECT questions.classification AS name, count(questions.id) AS count 
FROM questions 
WHERE questions.classification IS NOT NULL AND questions.classification != %(classification_1)s GROUP BY questions.classification
2025-08-15 11:24:35 - sqlalchemy.engine.Engine - INFO - [cached since 4140s ago] {'classification_1': ''}
2025-08-15 11:24:35 - sqlalchemy.engine.Engine - INFO - SELECT questions.classification AS name, count(questions.id) AS count 
FROM questions 
WHERE questions.classification IS NOT NULL AND questions.classification != %(classification_1)s AND questions.created_at >= %(created_at_1)s GROUP BY questions.classification ORDER BY count(questions.id) DESC
2025-08-15 11:24:35 - sqlalchemy.engine.Engine - INFO - [cached since 4140s ago] {'classification_1': '', 'created_at_1': datetime.datetime(2025, 8, 8, 3, 24, 35, 734498)}
2025-08-15 11:24:35 - sqlalchemy.engine.Engine - INFO - SELECT questions.classification AS name, count(questions.id) AS count 
FROM questions 
WHERE questions.classification IS NOT NULL AND questions.classification != %(classification_1)s GROUP BY questions.classification ORDER BY count(questions.id) DESC
2025-08-15 11:24:35 - sqlalchemy.engine.Engine - INFO - [cached since 4143s ago] {'classification_1': ''}
2025-08-15 11:24:35 - sqlalchemy.engine.Engine - INFO - SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions ORDER BY questions.created_at DESC 
 LIMIT %(param_1)s
2025-08-15 11:24:35 - sqlalchemy.engine.Engine - INFO - [cached since 4140s ago] {'param_1': 5}
2025-08-15 11:24:35 - sqlalchemy.engine.Engine - INFO - SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers ORDER BY answers.created_at DESC 
 LIMIT %(param_1)s
2025-08-15 11:24:35 - sqlalchemy.engine.Engine - INFO - [cached since 4140s ago] {'param_1': 5}
2025-08-15 11:24:35 - sqlalchemy.engine.Engine - INFO - SELECT scores.id AS scores_id, scores.answer_id AS scores_answer_id, scores.score_1 AS scores_score_1, scores.score_2 AS scores_score_2, scores.score_3 AS scores_score_3, scores.score_4 AS scores_score_4, scores.score_5 AS scores_score_5, scores.dimension_1_name AS scores_dimension_1_name, scores.dimension_2_name AS scores_dimension_2_name, scores.dimension_3_name AS scores_dimension_3_name, scores.dimension_4_name AS scores_dimension_4_name, scores.dimension_5_name AS scores_dimension_5_name, scores.average_score AS scores_average_score, scores.comment AS scores_comment, scores.rated_at AS scores_rated_at 
FROM scores ORDER BY scores.rated_at DESC 
 LIMIT %(param_1)s
2025-08-15 11:24:35 - sqlalchemy.engine.Engine - INFO - [cached since 4140s ago] {'param_1': 5}
2025-08-15 11:24:35 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:24:35 - sqlalchemy.engine.Engine - INFO - [cached since 4140s ago] {'created_at_1': datetime.datetime(2025, 8, 15, 3, 19, 35, 739901)}
2025-08-15 11:24:35 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:24:35 - sqlalchemy.engine.Engine - INFO - [cached since 4140s ago] {'created_at_1': datetime.datetime(2025, 8, 15, 3, 19, 35, 739901)}
2025-08-15 11:24:35 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT scores.id AS scores_id, scores.answer_id AS scores_answer_id, scores.score_1 AS scores_score_1, scores.score_2 AS scores_score_2, scores.score_3 AS scores_score_3, scores.score_4 AS scores_score_4, scores.score_5 AS scores_score_5, scores.dimension_1_name AS scores_dimension_1_name, scores.dimension_2_name AS scores_dimension_2_name, scores.dimension_3_name AS scores_dimension_3_name, scores.dimension_4_name AS scores_dimension_4_name, scores.dimension_5_name AS scores_dimension_5_name, scores.average_score AS scores_average_score, scores.comment AS scores_comment, scores.rated_at AS scores_rated_at 
FROM scores 
WHERE scores.rated_at >= %(rated_at_1)s) AS anon_1
2025-08-15 11:24:35 - sqlalchemy.engine.Engine - INFO - [cached since 4140s ago] {'rated_at_1': datetime.datetime(2025, 8, 15, 3, 19, 35, 739901)}
2025-08-15 11:24:35 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.assistant_type = %(assistant_type_1)s AND answers.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:24:35 - sqlalchemy.engine.Engine - INFO - [cached since 4140s ago] {'assistant_type_1': 'yoyo', 'created_at_1': datetime.datetime(2025, 8, 15, 3, 19, 35, 739901)}
2025-08-15 11:24:35 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.assistant_type = %(assistant_type_1)s AND answers.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:24:35 - sqlalchemy.engine.Engine - INFO - [cached since 4140s ago] {'assistant_type_1': 'doubao', 'created_at_1': datetime.datetime(2025, 8, 15, 3, 19, 35, 739901)}
2025-08-15 11:24:35 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.assistant_type = %(assistant_type_1)s AND answers.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:24:35 - sqlalchemy.engine.Engine - INFO - [cached since 4140s ago] {'assistant_type_1': 'xiaotian', 'created_at_1': datetime.datetime(2025, 8, 15, 3, 19, 35, 739901)}
2025-08-15 11:24:35 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-15 11:24:48 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-15 11:24:48 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-15 11:24:48 - app.api.word_analysis_api - INFO - 获取词云数据请求: time_range=week, limit=40
2025-08-15 11:24:48 - app.api.word_analysis_api - INFO - 获取词云数据请求: time_range=week, limit=40
2025-08-15 11:24:48 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s) AS anon_1
2025-08-15 11:24:48 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions) AS anon_1
2025-08-15 11:24:48 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-15 11:24:48 - app.services.word_analysis_service - INFO - 开始获取热词分析数据，时间范围: week, 限制: 40
2025-08-15 11:24:48 - sqlalchemy.engine.Engine - INFO - [cached since 4153s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 17, 23, 59, 59, 999999), 'processing_status_1': 'scored'}
2025-08-15 11:24:48 - sqlalchemy.engine.Engine - INFO - [cached since 4156s ago] {}
2025-08-15 11:24:48 - app.services.word_analysis_service - INFO - 开始获取热词分析数据，时间范围: week, 限制: 40
2025-08-15 11:24:48 - sqlalchemy.engine.Engine - INFO - SELECT questions.classification AS questions_classification, count(questions.id) AS badcase_count 
FROM questions 
WHERE questions.is_badcase = true GROUP BY questions.classification ORDER BY count(questions.id) DESC 
 LIMIT %(param_1)s
2025-08-15 11:24:48 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-15 11:24:48 - sqlalchemy.engine.Engine - INFO - [cached since 4153s ago] {'param_1': 3}
2025-08-15 11:24:48 - sqlalchemy.engine.Engine - INFO - SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.query IS NOT NULL AND questions.query != %(query_1)s AND questions.is_deleted = false
2025-08-15 11:24:48 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s AND questions.is_badcase = true) AS anon_1
2025-08-15 11:24:48 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:24:48 - sqlalchemy.engine.Engine - INFO - 
                WITH dimension_scores AS (
                    -- 维度1的数据
                    SELECT
                        s.dimension_1_name as dimension_name,
                        s.score_1 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_1_name IS NOT NULL
                    AND s.score_1 IS NOT NULL

                    UNION ALL

                    -- 维度2的数据
                    SELECT
                        s.dimension_2_name as dimension_name,
                        s.score_2 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_2_name IS NOT NULL
                    AND s.score_2 IS NOT NULL

                    UNION ALL

                    -- 维度3的数据
                    SELECT
                        s.dimension_3_name as dimension_name,
                        s.score_3 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_3_name IS NOT NULL
                    AND s.score_3 IS NOT NULL

                    UNION ALL

                    -- 维度4的数据
                    SELECT
                        s.dimension_4_name as dimension_name,
                        s.score_4 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_4_name IS NOT NULL
                    AND s.score_4 IS NOT NULL

                    UNION ALL

                    -- 维度5的数据
                    SELECT
                        s.dimension_5_name as dimension_name,
                        s.score_5 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_5_name IS NOT NULL
                    AND s.score_5 IS NOT NULL
                )
                SELECT
                    dimension_name,
                    AVG(score) as avg_score,
                    COUNT(*) as sample_count
                FROM dimension_scores
                GROUP BY dimension_name
                ORDER BY avg_score ASC
            
2025-08-15 11:24:48 - sqlalchemy.engine.Engine - INFO - [cached since 4153s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 17, 23, 59, 59, 999999), 'query_1': ''}
2025-08-15 11:24:48 - sqlalchemy.engine.Engine - INFO - [cached since 4153s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 17, 23, 59, 59, 999999), 'processing_status_1': 'scored'}
2025-08-15 11:24:48 - sqlalchemy.engine.Engine - INFO - [cached since 4153s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0)}
2025-08-15 11:24:48 - sqlalchemy.engine.Engine - INFO - [cached since 4153s ago] {'classification': '其他'}
2025-08-15 11:24:48 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s AND questions.is_badcase = true AND questions.badcase_review_status = %(badcase_review_status_1)s) AS anon_1
2025-08-15 11:24:48 - app.services.word_analysis_service - INFO - 查询到 260 个问题，时间范围: 2025-08-11 00:00:00 至 2025-08-17 23:59:59.999999
2025-08-15 11:24:48 - app.services.word_analysis_service - INFO - 查询到 260 个问题，时间范围: 2025-08-11 00:00:00 至 2025-08-17 23:59:59.999999
2025-08-15 11:24:48 - sqlalchemy.engine.Engine - INFO - [cached since 4153s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 17, 23, 59, 59, 999999), 'processing_status_1': 'scored', 'badcase_review_status_1': 'pending'}
2025-08-15 11:24:48 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s) AS anon_1
2025-08-15 11:24:48 - app.services.word_analysis_service - INFO - 问题样本 1: 为什么支付失败了？...
2025-08-15 11:24:48 - app.services.word_analysis_service - INFO - 问题样本 1: 为什么支付失败了？...
2025-08-15 11:24:48 - sqlalchemy.engine.Engine - INFO - [cached since 4153s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'classification_1': ''}
2025-08-15 11:24:48 - app.services.word_analysis_service - INFO - 问题样本 2: 数据统计在哪里可以找到？...
2025-08-15 11:24:48 - app.services.word_analysis_service - INFO - 问题样本 2: 数据统计在哪里可以找到？...
2025-08-15 11:24:48 - app.services.word_analysis_service - INFO - 问题样本 3: 如何更新个人信息？...
2025-08-15 11:24:48 - app.services.word_analysis_service - INFO - 问题样本 3: 如何更新个人信息？...
2025-08-15 11:24:48 - app.services.word_analysis_service - INFO - 有效问题文本数: 260, 总文本长度: 2914
2025-08-15 11:24:48 - app.services.word_analysis_service - INFO - 有效问题文本数: 260, 总文本长度: 2914
2025-08-15 11:24:48 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s AND questions.badcase_review_status = %(badcase_review_status_1)s) AS anon_1
2025-08-15 11:24:48 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.classification IS NOT NULL AND questions.classification != %(classification_1)s) AS anon_1
2025-08-15 11:24:48 - sqlalchemy.engine.Engine - INFO - 
                WITH dimension_scores AS (
                    -- 维度1的数据
                    SELECT
                        s.dimension_1_name as dimension_name,
                        s.score_1 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_1_name IS NOT NULL
                    AND s.score_1 IS NOT NULL

                    UNION ALL

                    -- 维度2的数据
                    SELECT
                        s.dimension_2_name as dimension_name,
                        s.score_2 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_2_name IS NOT NULL
                    AND s.score_2 IS NOT NULL

                    UNION ALL

                    -- 维度3的数据
                    SELECT
                        s.dimension_3_name as dimension_name,
                        s.score_3 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_3_name IS NOT NULL
                    AND s.score_3 IS NOT NULL

                    UNION ALL

                    -- 维度4的数据
                    SELECT
                        s.dimension_4_name as dimension_name,
                        s.score_4 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_4_name IS NOT NULL
                    AND s.score_4 IS NOT NULL

                    UNION ALL

                    -- 维度5的数据
                    SELECT
                        s.dimension_5_name as dimension_name,
                        s.score_5 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_5_name IS NOT NULL
                    AND s.score_5 IS NOT NULL
                )
                SELECT
                    dimension_name,
                    AVG(score) as avg_score,
                    COUNT(*) as sample_count
                FROM dimension_scores
                GROUP BY dimension_name
                ORDER BY avg_score ASC
            
2025-08-15 11:24:48 - app.services.word_analysis_service - INFO - 文本分析完成，原始词汇: 1755, 过滤后: 653, 唯一词汇: 58
2025-08-15 11:24:48 - app.services.word_analysis_service - INFO - 文本分析完成，原始词汇: 1755, 过滤后: 653, 唯一词汇: 58
2025-08-15 11:24:48 - sqlalchemy.engine.Engine - INFO - [cached since 4153s ago] {'classification_1': ''}
2025-08-15 11:24:48 - sqlalchemy.engine.Engine - INFO - [cached since 4153s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 17, 23, 59, 59, 999999), 'processing_status_1': 'scored', 'badcase_review_status_1': 'reviewed'}
2025-08-15 11:24:48 - sqlalchemy.engine.Engine - INFO - [cached since 4153s ago] {'classification': '产品使用'}
2025-08-15 11:24:48 - app.services.word_analysis_service - INFO - 热词分析完成，共分析 260 个问题，生成 40 个热词
2025-08-15 11:24:48 - app.services.word_analysis_service - INFO - 热词分析完成，共分析 260 个问题，生成 40 个热词
2025-08-15 11:24:48 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-15 11:24:48 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT access_logs.id AS access_logs_id, access_logs.user_id AS access_logs_user_id, access_logs.username AS access_logs_username, access_logs.action AS access_logs_action, access_logs.ip_address AS access_logs_ip_address, access_logs.created_at AS access_logs_created_at 
FROM access_logs 
WHERE access_logs.action = %(action_1)s) AS anon_1
2025-08-15 11:24:48 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s AND questions.badcase_review_status = %(badcase_review_status_1)s AND questions.is_badcase = false) AS anon_1
2025-08-15 11:24:48 - sqlalchemy.engine.Engine - INFO - [cached since 4153s ago] {'action_1': 'login'}
2025-08-15 11:24:48 - sqlalchemy.engine.Engine - INFO - [cached since 4153s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 17, 23, 59, 59, 999999), 'processing_status_1': 'scored', 'badcase_review_status_1': 'reviewed'}
2025-08-15 11:24:48 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT access_logs.id AS access_logs_id, access_logs.user_id AS access_logs_user_id, access_logs.username AS access_logs_username, access_logs.action AS access_logs_action, access_logs.ip_address AS access_logs_ip_address, access_logs.created_at AS access_logs_created_at 
FROM access_logs 
WHERE access_logs.action = %(action_1)s AND access_logs.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:24:48 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-15 11:24:48 - sqlalchemy.engine.Engine - INFO - [cached since 4153s ago] {'action_1': 'login', 'created_at_1': datetime.datetime(2025, 8, 11, 0, 0)}
2025-08-15 11:24:48 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:24:48 - sqlalchemy.engine.Engine - INFO - 
                WITH dimension_scores AS (
                    -- 维度1的数据
                    SELECT
                        s.dimension_1_name as dimension_name,
                        s.score_1 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_1_name IS NOT NULL
                    AND s.score_1 IS NOT NULL

                    UNION ALL

                    -- 维度2的数据
                    SELECT
                        s.dimension_2_name as dimension_name,
                        s.score_2 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_2_name IS NOT NULL
                    AND s.score_2 IS NOT NULL

                    UNION ALL

                    -- 维度3的数据
                    SELECT
                        s.dimension_3_name as dimension_name,
                        s.score_3 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_3_name IS NOT NULL
                    AND s.score_3 IS NOT NULL

                    UNION ALL

                    -- 维度4的数据
                    SELECT
                        s.dimension_4_name as dimension_name,
                        s.score_4 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_4_name IS NOT NULL
                    AND s.score_4 IS NOT NULL

                    UNION ALL

                    -- 维度5的数据
                    SELECT
                        s.dimension_5_name as dimension_name,
                        s.score_5 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_5_name IS NOT NULL
                    AND s.score_5 IS NOT NULL
                )
                SELECT
                    dimension_name,
                    AVG(score) as avg_score,
                    COUNT(*) as sample_count
                FROM dimension_scores
                GROUP BY dimension_name
                ORDER BY avg_score ASC
            
2025-08-15 11:24:48 - sqlalchemy.engine.Engine - INFO - [cached since 4153s ago] {'created_at_1': datetime.datetime(2025, 8, 15, 0, 0)}
2025-08-15 11:24:48 - sqlalchemy.engine.Engine - INFO - [cached since 4153s ago] {'classification': '功能建议'}
2025-08-15 11:24:48 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:24:48 - sqlalchemy.engine.Engine - INFO - [cached since 4153s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0)}
2025-08-15 11:24:48 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s) AS anon_1
2025-08-15 11:24:48 - sqlalchemy.engine.Engine - INFO - [cached since 4153s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'classification_1': ''}
2025-08-15 11:24:48 - sqlalchemy.engine.Engine - INFO - SELECT coalesce(sum(least(anon_1.cnt, %(least_1)s)), %(coalesce_2)s) AS coalesce_1 
FROM (SELECT answers.question_business_id AS qbid, count(answers.id) AS cnt 
FROM answers JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.created_at >= %(created_at_1)s AND answers.created_at >= %(created_at_2)s AND answers.assistant_type IN (%(assistant_type_1_1)s, %(assistant_type_1_2)s) AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s GROUP BY answers.question_business_id) AS anon_1
2025-08-15 11:24:48 - sqlalchemy.engine.Engine - INFO - [cached since 4153s ago] {'least_1': 2, 'coalesce_2': 0, 'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 11, 0, 0), 'classification_1': '', 'assistant_type_1_1': 'doubao', 'assistant_type_1_2': 'xiaotian'}
2025-08-15 11:24:48 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-15 11:24:48 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT count(distinct(answers.question_business_id)) AS count_2 
FROM answers JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.created_at >= %(created_at_1)s AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s AND answers.is_scored = true AND answers.assistant_type IN (%(assistant_type_1_1)s, %(assistant_type_1_2)s, %(assistant_type_1_3)s) GROUP BY answers.question_business_id 
HAVING count(distinct(answers.assistant_type)) = %(count_3)s) AS anon_1
2025-08-15 11:24:48 - sqlalchemy.engine.Engine - INFO - [cached since 4153s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'classification_1': '', 'count_3': 3, 'assistant_type_1_1': 'yoyo', 'assistant_type_1_2': 'doubao', 'assistant_type_1_3': 'xiaotian'}
2025-08-15 11:24:48 - sqlalchemy.engine.Engine - INFO - SELECT count(distinct(questions.business_id)) AS count_1 
FROM questions JOIN answers ON questions.business_id = answers.question_business_id 
WHERE questions.created_at >= %(created_at_1)s AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s AND answers.assistant_type IN (%(assistant_type_1_1)s, %(assistant_type_1_2)s) AND answers.created_at >= %(created_at_2)s
2025-08-15 11:24:48 - sqlalchemy.engine.Engine - INFO - [cached since 4153s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'classification_1': '', 'created_at_2': datetime.datetime(2025, 8, 11, 0, 0), 'assistant_type_1_1': 'doubao', 'assistant_type_1_2': 'xiaotian'}
2025-08-15 11:24:48 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.processing_status = %(processing_status_1)s AND questions.is_badcase = true) AS anon_1
2025-08-15 11:24:48 - sqlalchemy.engine.Engine - INFO - [cached since 4153s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'processing_status_1': 'scored'}
2025-08-15 11:24:48 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.processing_status = %(processing_status_1)s AND questions.badcase_review_status = %(badcase_review_status_1)s) AS anon_1
2025-08-15 11:24:48 - sqlalchemy.engine.Engine - INFO - [cached since 4153s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'processing_status_1': 'scored', 'badcase_review_status_1': 'reviewed'}
2025-08-15 11:24:48 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:24:48 - sqlalchemy.engine.Engine - INFO - [cached since 4153s ago] {'created_at_1': datetime.datetime(2025, 8, 15, 2, 24, 48, 630377)}
2025-08-15 11:24:48 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:24:48 - sqlalchemy.engine.Engine - INFO - [cached since 4153s ago] {'created_at_1': datetime.datetime(2025, 8, 14, 21, 24, 48, 630377)}
2025-08-15 11:24:48 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.updated_at >= %(updated_at_1)s AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s) AS anon_1
2025-08-15 11:24:48 - sqlalchemy.engine.Engine - INFO - [cached since 4153s ago] {'updated_at_1': datetime.datetime(2025, 8, 15, 2, 54, 48, 630377), 'classification_1': ''}
2025-08-15 11:24:48 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers JOIN questions ON answers.question_business_id = questions.business_id 
WHERE answers.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:24:48 - sqlalchemy.engine.Engine - INFO - [cached since 4153s ago] {'created_at_1': datetime.datetime(2025, 8, 15, 2, 54, 48, 630377)}
2025-08-15 11:24:48 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.updated_at >= %(updated_at_1)s AND answers.is_scored = true) AS anon_1
2025-08-15 11:24:48 - sqlalchemy.engine.Engine - INFO - [cached since 4153s ago] {'updated_at_1': datetime.datetime(2025, 8, 15, 2, 54, 48, 630377)}
2025-08-15 11:24:48 - sqlalchemy.engine.Engine - INFO - SELECT date_trunc(%(date_trunc_1)s, questions.created_at) AS day, count(questions.id) AS count 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s GROUP BY date_trunc(%(date_trunc_2)s, questions.created_at) ORDER BY day
2025-08-15 11:24:48 - sqlalchemy.engine.Engine - INFO - [cached since 4153s ago] {'date_trunc_1': 'day', 'created_at_1': datetime.datetime(2025, 8, 8, 3, 24, 48, 650328), 'date_trunc_2': 'day'}
2025-08-15 11:24:48 - sqlalchemy.engine.Engine - INFO - SELECT date_trunc(%(date_trunc_1)s, questions.updated_at) AS day, count(questions.id) AS count 
FROM questions 
WHERE questions.updated_at >= %(updated_at_1)s AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s AND questions.processing_status IN (%(processing_status_1_1)s, %(processing_status_1_2)s, %(processing_status_1_3)s) GROUP BY date_trunc(%(date_trunc_2)s, questions.updated_at) ORDER BY day
2025-08-15 11:24:48 - sqlalchemy.engine.Engine - INFO - [cached since 4153s ago] {'date_trunc_1': 'day', 'updated_at_1': datetime.datetime(2025, 8, 8, 3, 24, 48, 650328), 'classification_1': '', 'date_trunc_2': 'day', 'processing_status_1_1': 'classified', 'processing_status_1_2': 'answers_generated', 'processing_status_1_3': 'scored'}
2025-08-15 11:24:48 - sqlalchemy.engine.Engine - INFO - SELECT date_trunc(%(date_trunc_1)s, answers.created_at) AS day, count(answers.id) AS count 
FROM answers JOIN questions ON answers.question_business_id = questions.business_id 
WHERE answers.created_at >= %(created_at_1)s AND questions.created_at >= %(created_at_2)s AND answers.assistant_type IN (%(assistant_type_1_1)s, %(assistant_type_1_2)s) AND answers.is_scored = true AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s GROUP BY date_trunc(%(date_trunc_2)s, answers.created_at) ORDER BY day
2025-08-15 11:24:48 - sqlalchemy.engine.Engine - INFO - [cached since 4153s ago] {'date_trunc_1': 'day', 'created_at_1': datetime.datetime(2025, 8, 8, 3, 24, 48, 650328), 'created_at_2': datetime.datetime(2025, 8, 8, 3, 24, 48, 650328), 'classification_1': '', 'date_trunc_2': 'day', 'assistant_type_1_1': 'doubao', 'assistant_type_1_2': 'xiaotian'}
2025-08-15 11:24:48 - sqlalchemy.engine.Engine - INFO - SELECT answers.assistant_type AS answers_assistant_type, avg(scores.score_1) AS avg_score_1, avg(scores.score_2) AS avg_score_2, avg(scores.score_3) AS avg_score_3, avg(scores.score_4) AS avg_score_4, avg(scores.score_5) AS avg_score_5, avg(scores.average_score) AS avg_total, count(scores.id) AS score_count 
FROM answers JOIN scores ON answers.id = scores.answer_id GROUP BY answers.assistant_type
2025-08-15 11:24:48 - sqlalchemy.engine.Engine - INFO - [cached since 4153s ago] {}
2025-08-15 11:24:48 - sqlalchemy.engine.Engine - INFO - SELECT system_config.id AS system_config_id, system_config.config_key AS system_config_config_key, system_config.config_value AS system_config_config_value, system_config.config_type AS system_config_config_type, system_config.description AS system_config_description, system_config.effective_time AS system_config_effective_time, system_config.previous_value AS system_config_previous_value, system_config.status AS system_config_status, system_config.created_at AS system_config_created_at, system_config.updated_at AS system_config_updated_at 
FROM system_config 
WHERE system_config.config_key = %(config_key_1)s 
 LIMIT %(param_1)s
2025-08-15 11:24:48 - sqlalchemy.engine.Engine - INFO - [cached since 4153s ago] {'config_key_1': 'display.hot_categories_time_range', 'param_1': 1}
2025-08-15 11:24:48 - sqlalchemy.engine.Engine - INFO - SELECT questions.classification AS name, count(questions.id) AS count 
FROM questions 
WHERE questions.classification IS NOT NULL AND questions.classification != %(classification_1)s GROUP BY questions.classification
2025-08-15 11:24:48 - sqlalchemy.engine.Engine - INFO - [cached since 4153s ago] {'classification_1': ''}
2025-08-15 11:24:48 - sqlalchemy.engine.Engine - INFO - SELECT questions.classification AS name, count(questions.id) AS count 
FROM questions 
WHERE questions.classification IS NOT NULL AND questions.classification != %(classification_1)s AND questions.created_at >= %(created_at_1)s GROUP BY questions.classification ORDER BY count(questions.id) DESC
2025-08-15 11:24:48 - sqlalchemy.engine.Engine - INFO - [cached since 4153s ago] {'classification_1': '', 'created_at_1': datetime.datetime(2025, 8, 8, 3, 24, 48, 660734)}
2025-08-15 11:24:48 - sqlalchemy.engine.Engine - INFO - SELECT questions.classification AS name, count(questions.id) AS count 
FROM questions 
WHERE questions.classification IS NOT NULL AND questions.classification != %(classification_1)s GROUP BY questions.classification ORDER BY count(questions.id) DESC
2025-08-15 11:24:48 - sqlalchemy.engine.Engine - INFO - [cached since 4156s ago] {'classification_1': ''}
2025-08-15 11:24:48 - sqlalchemy.engine.Engine - INFO - SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions ORDER BY questions.created_at DESC 
 LIMIT %(param_1)s
2025-08-15 11:24:48 - sqlalchemy.engine.Engine - INFO - [cached since 4153s ago] {'param_1': 5}
2025-08-15 11:24:48 - sqlalchemy.engine.Engine - INFO - SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers ORDER BY answers.created_at DESC 
 LIMIT %(param_1)s
2025-08-15 11:24:48 - sqlalchemy.engine.Engine - INFO - [cached since 4153s ago] {'param_1': 5}
2025-08-15 11:24:48 - sqlalchemy.engine.Engine - INFO - SELECT scores.id AS scores_id, scores.answer_id AS scores_answer_id, scores.score_1 AS scores_score_1, scores.score_2 AS scores_score_2, scores.score_3 AS scores_score_3, scores.score_4 AS scores_score_4, scores.score_5 AS scores_score_5, scores.dimension_1_name AS scores_dimension_1_name, scores.dimension_2_name AS scores_dimension_2_name, scores.dimension_3_name AS scores_dimension_3_name, scores.dimension_4_name AS scores_dimension_4_name, scores.dimension_5_name AS scores_dimension_5_name, scores.average_score AS scores_average_score, scores.comment AS scores_comment, scores.rated_at AS scores_rated_at 
FROM scores ORDER BY scores.rated_at DESC 
 LIMIT %(param_1)s
2025-08-15 11:24:48 - sqlalchemy.engine.Engine - INFO - [cached since 4153s ago] {'param_1': 5}
2025-08-15 11:24:48 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:24:48 - sqlalchemy.engine.Engine - INFO - [cached since 4153s ago] {'created_at_1': datetime.datetime(2025, 8, 15, 3, 19, 48, 666100)}
2025-08-15 11:24:48 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:24:48 - sqlalchemy.engine.Engine - INFO - [cached since 4153s ago] {'created_at_1': datetime.datetime(2025, 8, 15, 3, 19, 48, 666100)}
2025-08-15 11:24:48 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT scores.id AS scores_id, scores.answer_id AS scores_answer_id, scores.score_1 AS scores_score_1, scores.score_2 AS scores_score_2, scores.score_3 AS scores_score_3, scores.score_4 AS scores_score_4, scores.score_5 AS scores_score_5, scores.dimension_1_name AS scores_dimension_1_name, scores.dimension_2_name AS scores_dimension_2_name, scores.dimension_3_name AS scores_dimension_3_name, scores.dimension_4_name AS scores_dimension_4_name, scores.dimension_5_name AS scores_dimension_5_name, scores.average_score AS scores_average_score, scores.comment AS scores_comment, scores.rated_at AS scores_rated_at 
FROM scores 
WHERE scores.rated_at >= %(rated_at_1)s) AS anon_1
2025-08-15 11:24:48 - sqlalchemy.engine.Engine - INFO - [cached since 4153s ago] {'rated_at_1': datetime.datetime(2025, 8, 15, 3, 19, 48, 666100)}
2025-08-15 11:24:48 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.assistant_type = %(assistant_type_1)s AND answers.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:24:48 - sqlalchemy.engine.Engine - INFO - [cached since 4153s ago] {'assistant_type_1': 'yoyo', 'created_at_1': datetime.datetime(2025, 8, 15, 3, 19, 48, 666100)}
2025-08-15 11:24:48 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.assistant_type = %(assistant_type_1)s AND answers.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:24:48 - sqlalchemy.engine.Engine - INFO - [cached since 4153s ago] {'assistant_type_1': 'doubao', 'created_at_1': datetime.datetime(2025, 8, 15, 3, 19, 48, 666100)}
2025-08-15 11:24:48 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.assistant_type = %(assistant_type_1)s AND answers.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:24:48 - sqlalchemy.engine.Engine - INFO - [cached since 4153s ago] {'assistant_type_1': 'xiaotian', 'created_at_1': datetime.datetime(2025, 8, 15, 3, 19, 48, 666100)}
2025-08-15 11:24:48 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-15 11:25:02 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-15 11:25:02 - app.api.word_analysis_api - INFO - 获取词云数据请求: time_range=week, limit=40
2025-08-15 11:25:02 - app.api.word_analysis_api - INFO - 获取词云数据请求: time_range=week, limit=40
2025-08-15 11:25:02 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-15 11:25:02 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s) AS anon_1
2025-08-15 11:25:02 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-15 11:25:02 - app.services.word_analysis_service - INFO - 开始获取热词分析数据，时间范围: week, 限制: 40
2025-08-15 11:25:02 - app.services.word_analysis_service - INFO - 开始获取热词分析数据，时间范围: week, 限制: 40
2025-08-15 11:25:02 - sqlalchemy.engine.Engine - INFO - [cached since 4167s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 17, 23, 59, 59, 999999), 'processing_status_1': 'scored'}
2025-08-15 11:25:02 - sqlalchemy.engine.Engine - INFO - SELECT questions.classification AS questions_classification, count(questions.id) AS badcase_count 
FROM questions 
WHERE questions.is_badcase = true GROUP BY questions.classification ORDER BY count(questions.id) DESC 
 LIMIT %(param_1)s
2025-08-15 11:25:02 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions) AS anon_1
2025-08-15 11:25:02 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-15 11:25:02 - sqlalchemy.engine.Engine - INFO - [cached since 4167s ago] {'param_1': 3}
2025-08-15 11:25:02 - sqlalchemy.engine.Engine - INFO - [cached since 4170s ago] {}
2025-08-15 11:25:02 - sqlalchemy.engine.Engine - INFO - SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.query IS NOT NULL AND questions.query != %(query_1)s AND questions.is_deleted = false
2025-08-15 11:25:02 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s AND questions.is_badcase = true) AS anon_1
2025-08-15 11:25:02 - sqlalchemy.engine.Engine - INFO - 
                WITH dimension_scores AS (
                    -- 维度1的数据
                    SELECT
                        s.dimension_1_name as dimension_name,
                        s.score_1 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_1_name IS NOT NULL
                    AND s.score_1 IS NOT NULL

                    UNION ALL

                    -- 维度2的数据
                    SELECT
                        s.dimension_2_name as dimension_name,
                        s.score_2 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_2_name IS NOT NULL
                    AND s.score_2 IS NOT NULL

                    UNION ALL

                    -- 维度3的数据
                    SELECT
                        s.dimension_3_name as dimension_name,
                        s.score_3 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_3_name IS NOT NULL
                    AND s.score_3 IS NOT NULL

                    UNION ALL

                    -- 维度4的数据
                    SELECT
                        s.dimension_4_name as dimension_name,
                        s.score_4 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_4_name IS NOT NULL
                    AND s.score_4 IS NOT NULL

                    UNION ALL

                    -- 维度5的数据
                    SELECT
                        s.dimension_5_name as dimension_name,
                        s.score_5 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_5_name IS NOT NULL
                    AND s.score_5 IS NOT NULL
                )
                SELECT
                    dimension_name,
                    AVG(score) as avg_score,
                    COUNT(*) as sample_count
                FROM dimension_scores
                GROUP BY dimension_name
                ORDER BY avg_score ASC
            
2025-08-15 11:25:02 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:25:02 - sqlalchemy.engine.Engine - INFO - [cached since 4167s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 17, 23, 59, 59, 999999), 'query_1': ''}
2025-08-15 11:25:02 - sqlalchemy.engine.Engine - INFO - [cached since 4167s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 17, 23, 59, 59, 999999), 'processing_status_1': 'scored'}
2025-08-15 11:25:02 - sqlalchemy.engine.Engine - INFO - [cached since 4167s ago] {'classification': '其他'}
2025-08-15 11:25:02 - sqlalchemy.engine.Engine - INFO - [cached since 4167s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0)}
2025-08-15 11:25:02 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s AND questions.is_badcase = true AND questions.badcase_review_status = %(badcase_review_status_1)s) AS anon_1
2025-08-15 11:25:02 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s) AS anon_1
2025-08-15 11:25:02 - app.services.word_analysis_service - INFO - 查询到 260 个问题，时间范围: 2025-08-11 00:00:00 至 2025-08-17 23:59:59.999999
2025-08-15 11:25:02 - app.services.word_analysis_service - INFO - 查询到 260 个问题，时间范围: 2025-08-11 00:00:00 至 2025-08-17 23:59:59.999999
2025-08-15 11:25:02 - sqlalchemy.engine.Engine - INFO - [cached since 4167s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'classification_1': ''}
2025-08-15 11:25:02 - sqlalchemy.engine.Engine - INFO - [cached since 4167s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 17, 23, 59, 59, 999999), 'processing_status_1': 'scored', 'badcase_review_status_1': 'pending'}
2025-08-15 11:25:02 - app.services.word_analysis_service - INFO - 问题样本 1: 为什么支付失败了？...
2025-08-15 11:25:02 - app.services.word_analysis_service - INFO - 问题样本 1: 为什么支付失败了？...
2025-08-15 11:25:02 - app.services.word_analysis_service - INFO - 问题样本 2: 数据统计在哪里可以找到？...
2025-08-15 11:25:02 - app.services.word_analysis_service - INFO - 问题样本 2: 数据统计在哪里可以找到？...
2025-08-15 11:25:02 - app.services.word_analysis_service - INFO - 问题样本 3: 如何更新个人信息？...
2025-08-15 11:25:02 - app.services.word_analysis_service - INFO - 问题样本 3: 如何更新个人信息？...
2025-08-15 11:25:02 - app.services.word_analysis_service - INFO - 有效问题文本数: 260, 总文本长度: 2914
2025-08-15 11:25:02 - app.services.word_analysis_service - INFO - 有效问题文本数: 260, 总文本长度: 2914
2025-08-15 11:25:02 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.classification IS NOT NULL AND questions.classification != %(classification_1)s) AS anon_1
2025-08-15 11:25:02 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s AND questions.badcase_review_status = %(badcase_review_status_1)s) AS anon_1
2025-08-15 11:25:02 - app.services.word_analysis_service - INFO - 文本分析完成，原始词汇: 1755, 过滤后: 653, 唯一词汇: 58
2025-08-15 11:25:02 - app.services.word_analysis_service - INFO - 文本分析完成，原始词汇: 1755, 过滤后: 653, 唯一词汇: 58
2025-08-15 11:25:02 - sqlalchemy.engine.Engine - INFO - [cached since 4167s ago] {'classification_1': ''}
2025-08-15 11:25:02 - sqlalchemy.engine.Engine - INFO - [cached since 4167s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 17, 23, 59, 59, 999999), 'processing_status_1': 'scored', 'badcase_review_status_1': 'reviewed'}
2025-08-15 11:25:02 - sqlalchemy.engine.Engine - INFO - 
                WITH dimension_scores AS (
                    -- 维度1的数据
                    SELECT
                        s.dimension_1_name as dimension_name,
                        s.score_1 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_1_name IS NOT NULL
                    AND s.score_1 IS NOT NULL

                    UNION ALL

                    -- 维度2的数据
                    SELECT
                        s.dimension_2_name as dimension_name,
                        s.score_2 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_2_name IS NOT NULL
                    AND s.score_2 IS NOT NULL

                    UNION ALL

                    -- 维度3的数据
                    SELECT
                        s.dimension_3_name as dimension_name,
                        s.score_3 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_3_name IS NOT NULL
                    AND s.score_3 IS NOT NULL

                    UNION ALL

                    -- 维度4的数据
                    SELECT
                        s.dimension_4_name as dimension_name,
                        s.score_4 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_4_name IS NOT NULL
                    AND s.score_4 IS NOT NULL

                    UNION ALL

                    -- 维度5的数据
                    SELECT
                        s.dimension_5_name as dimension_name,
                        s.score_5 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_5_name IS NOT NULL
                    AND s.score_5 IS NOT NULL
                )
                SELECT
                    dimension_name,
                    AVG(score) as avg_score,
                    COUNT(*) as sample_count
                FROM dimension_scores
                GROUP BY dimension_name
                ORDER BY avg_score ASC
            
2025-08-15 11:25:02 - app.services.word_analysis_service - INFO - 热词分析完成，共分析 260 个问题，生成 40 个热词
2025-08-15 11:25:02 - app.services.word_analysis_service - INFO - 热词分析完成，共分析 260 个问题，生成 40 个热词
2025-08-15 11:25:02 - sqlalchemy.engine.Engine - INFO - [cached since 4167s ago] {'classification': '产品使用'}
2025-08-15 11:25:02 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-15 11:25:02 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT access_logs.id AS access_logs_id, access_logs.user_id AS access_logs_user_id, access_logs.username AS access_logs_username, access_logs.action AS access_logs_action, access_logs.ip_address AS access_logs_ip_address, access_logs.created_at AS access_logs_created_at 
FROM access_logs 
WHERE access_logs.action = %(action_1)s) AS anon_1
2025-08-15 11:25:02 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s AND questions.badcase_review_status = %(badcase_review_status_1)s AND questions.is_badcase = false) AS anon_1
2025-08-15 11:25:02 - sqlalchemy.engine.Engine - INFO - [cached since 4167s ago] {'action_1': 'login'}
2025-08-15 11:25:02 - sqlalchemy.engine.Engine - INFO - [cached since 4167s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 17, 23, 59, 59, 999999), 'processing_status_1': 'scored', 'badcase_review_status_1': 'reviewed'}
2025-08-15 11:25:02 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT access_logs.id AS access_logs_id, access_logs.user_id AS access_logs_user_id, access_logs.username AS access_logs_username, access_logs.action AS access_logs_action, access_logs.ip_address AS access_logs_ip_address, access_logs.created_at AS access_logs_created_at 
FROM access_logs 
WHERE access_logs.action = %(action_1)s AND access_logs.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:25:02 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-15 11:25:02 - sqlalchemy.engine.Engine - INFO - [cached since 4167s ago] {'action_1': 'login', 'created_at_1': datetime.datetime(2025, 8, 11, 0, 0)}
2025-08-15 11:25:02 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:25:02 - sqlalchemy.engine.Engine - INFO - [cached since 4167s ago] {'created_at_1': datetime.datetime(2025, 8, 15, 0, 0)}
2025-08-15 11:25:02 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:25:02 - sqlalchemy.engine.Engine - INFO - 
                WITH dimension_scores AS (
                    -- 维度1的数据
                    SELECT
                        s.dimension_1_name as dimension_name,
                        s.score_1 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_1_name IS NOT NULL
                    AND s.score_1 IS NOT NULL

                    UNION ALL

                    -- 维度2的数据
                    SELECT
                        s.dimension_2_name as dimension_name,
                        s.score_2 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_2_name IS NOT NULL
                    AND s.score_2 IS NOT NULL

                    UNION ALL

                    -- 维度3的数据
                    SELECT
                        s.dimension_3_name as dimension_name,
                        s.score_3 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_3_name IS NOT NULL
                    AND s.score_3 IS NOT NULL

                    UNION ALL

                    -- 维度4的数据
                    SELECT
                        s.dimension_4_name as dimension_name,
                        s.score_4 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_4_name IS NOT NULL
                    AND s.score_4 IS NOT NULL

                    UNION ALL

                    -- 维度5的数据
                    SELECT
                        s.dimension_5_name as dimension_name,
                        s.score_5 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_5_name IS NOT NULL
                    AND s.score_5 IS NOT NULL
                )
                SELECT
                    dimension_name,
                    AVG(score) as avg_score,
                    COUNT(*) as sample_count
                FROM dimension_scores
                GROUP BY dimension_name
                ORDER BY avg_score ASC
            
2025-08-15 11:25:02 - sqlalchemy.engine.Engine - INFO - [cached since 4167s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0)}
2025-08-15 11:25:02 - sqlalchemy.engine.Engine - INFO - [cached since 4167s ago] {'classification': '功能建议'}
2025-08-15 11:25:02 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s) AS anon_1
2025-08-15 11:25:02 - sqlalchemy.engine.Engine - INFO - [cached since 4167s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'classification_1': ''}
2025-08-15 11:25:02 - sqlalchemy.engine.Engine - INFO - SELECT coalesce(sum(least(anon_1.cnt, %(least_1)s)), %(coalesce_2)s) AS coalesce_1 
FROM (SELECT answers.question_business_id AS qbid, count(answers.id) AS cnt 
FROM answers JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.created_at >= %(created_at_1)s AND answers.created_at >= %(created_at_2)s AND answers.assistant_type IN (%(assistant_type_1_1)s, %(assistant_type_1_2)s) AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s GROUP BY answers.question_business_id) AS anon_1
2025-08-15 11:25:02 - sqlalchemy.engine.Engine - INFO - [cached since 4167s ago] {'least_1': 2, 'coalesce_2': 0, 'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 11, 0, 0), 'classification_1': '', 'assistant_type_1_1': 'doubao', 'assistant_type_1_2': 'xiaotian'}
2025-08-15 11:25:02 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT count(distinct(answers.question_business_id)) AS count_2 
FROM answers JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.created_at >= %(created_at_1)s AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s AND answers.is_scored = true AND answers.assistant_type IN (%(assistant_type_1_1)s, %(assistant_type_1_2)s, %(assistant_type_1_3)s) GROUP BY answers.question_business_id 
HAVING count(distinct(answers.assistant_type)) = %(count_3)s) AS anon_1
2025-08-15 11:25:02 - sqlalchemy.engine.Engine - INFO - [cached since 4167s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'classification_1': '', 'count_3': 3, 'assistant_type_1_1': 'yoyo', 'assistant_type_1_2': 'doubao', 'assistant_type_1_3': 'xiaotian'}
2025-08-15 11:25:02 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-15 11:25:02 - sqlalchemy.engine.Engine - INFO - SELECT count(distinct(questions.business_id)) AS count_1 
FROM questions JOIN answers ON questions.business_id = answers.question_business_id 
WHERE questions.created_at >= %(created_at_1)s AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s AND answers.assistant_type IN (%(assistant_type_1_1)s, %(assistant_type_1_2)s) AND answers.created_at >= %(created_at_2)s
2025-08-15 11:25:02 - sqlalchemy.engine.Engine - INFO - [cached since 4167s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'classification_1': '', 'created_at_2': datetime.datetime(2025, 8, 11, 0, 0), 'assistant_type_1_1': 'doubao', 'assistant_type_1_2': 'xiaotian'}
2025-08-15 11:25:02 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.processing_status = %(processing_status_1)s AND questions.is_badcase = true) AS anon_1
2025-08-15 11:25:02 - sqlalchemy.engine.Engine - INFO - [cached since 4167s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'processing_status_1': 'scored'}
2025-08-15 11:25:02 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.processing_status = %(processing_status_1)s AND questions.badcase_review_status = %(badcase_review_status_1)s) AS anon_1
2025-08-15 11:25:02 - sqlalchemy.engine.Engine - INFO - [cached since 4167s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'processing_status_1': 'scored', 'badcase_review_status_1': 'reviewed'}
2025-08-15 11:25:02 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:25:02 - sqlalchemy.engine.Engine - INFO - [cached since 4167s ago] {'created_at_1': datetime.datetime(2025, 8, 15, 2, 25, 2, 632242)}
2025-08-15 11:25:02 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:25:02 - sqlalchemy.engine.Engine - INFO - [cached since 4167s ago] {'created_at_1': datetime.datetime(2025, 8, 14, 21, 25, 2, 632242)}
2025-08-15 11:25:02 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.updated_at >= %(updated_at_1)s AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s) AS anon_1
2025-08-15 11:25:02 - sqlalchemy.engine.Engine - INFO - [cached since 4167s ago] {'updated_at_1': datetime.datetime(2025, 8, 15, 2, 55, 2, 632242), 'classification_1': ''}
2025-08-15 11:25:02 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers JOIN questions ON answers.question_business_id = questions.business_id 
WHERE answers.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:25:02 - sqlalchemy.engine.Engine - INFO - [cached since 4167s ago] {'created_at_1': datetime.datetime(2025, 8, 15, 2, 55, 2, 632242)}
2025-08-15 11:25:02 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.updated_at >= %(updated_at_1)s AND answers.is_scored = true) AS anon_1
2025-08-15 11:25:02 - sqlalchemy.engine.Engine - INFO - [cached since 4167s ago] {'updated_at_1': datetime.datetime(2025, 8, 15, 2, 55, 2, 632242)}
2025-08-15 11:25:02 - sqlalchemy.engine.Engine - INFO - SELECT date_trunc(%(date_trunc_1)s, questions.created_at) AS day, count(questions.id) AS count 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s GROUP BY date_trunc(%(date_trunc_2)s, questions.created_at) ORDER BY day
2025-08-15 11:25:02 - sqlalchemy.engine.Engine - INFO - [cached since 4167s ago] {'date_trunc_1': 'day', 'created_at_1': datetime.datetime(2025, 8, 8, 3, 25, 2, 652270), 'date_trunc_2': 'day'}
2025-08-15 11:25:02 - sqlalchemy.engine.Engine - INFO - SELECT date_trunc(%(date_trunc_1)s, questions.updated_at) AS day, count(questions.id) AS count 
FROM questions 
WHERE questions.updated_at >= %(updated_at_1)s AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s AND questions.processing_status IN (%(processing_status_1_1)s, %(processing_status_1_2)s, %(processing_status_1_3)s) GROUP BY date_trunc(%(date_trunc_2)s, questions.updated_at) ORDER BY day
2025-08-15 11:25:02 - sqlalchemy.engine.Engine - INFO - [cached since 4167s ago] {'date_trunc_1': 'day', 'updated_at_1': datetime.datetime(2025, 8, 8, 3, 25, 2, 652270), 'classification_1': '', 'date_trunc_2': 'day', 'processing_status_1_1': 'classified', 'processing_status_1_2': 'answers_generated', 'processing_status_1_3': 'scored'}
2025-08-15 11:25:02 - sqlalchemy.engine.Engine - INFO - SELECT date_trunc(%(date_trunc_1)s, answers.created_at) AS day, count(answers.id) AS count 
FROM answers JOIN questions ON answers.question_business_id = questions.business_id 
WHERE answers.created_at >= %(created_at_1)s AND questions.created_at >= %(created_at_2)s AND answers.assistant_type IN (%(assistant_type_1_1)s, %(assistant_type_1_2)s) AND answers.is_scored = true AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s GROUP BY date_trunc(%(date_trunc_2)s, answers.created_at) ORDER BY day
2025-08-15 11:25:02 - sqlalchemy.engine.Engine - INFO - [cached since 4167s ago] {'date_trunc_1': 'day', 'created_at_1': datetime.datetime(2025, 8, 8, 3, 25, 2, 652270), 'created_at_2': datetime.datetime(2025, 8, 8, 3, 25, 2, 652270), 'classification_1': '', 'date_trunc_2': 'day', 'assistant_type_1_1': 'doubao', 'assistant_type_1_2': 'xiaotian'}
2025-08-15 11:25:02 - sqlalchemy.engine.Engine - INFO - SELECT answers.assistant_type AS answers_assistant_type, avg(scores.score_1) AS avg_score_1, avg(scores.score_2) AS avg_score_2, avg(scores.score_3) AS avg_score_3, avg(scores.score_4) AS avg_score_4, avg(scores.score_5) AS avg_score_5, avg(scores.average_score) AS avg_total, count(scores.id) AS score_count 
FROM answers JOIN scores ON answers.id = scores.answer_id GROUP BY answers.assistant_type
2025-08-15 11:25:02 - sqlalchemy.engine.Engine - INFO - [cached since 4167s ago] {}
2025-08-15 11:25:02 - sqlalchemy.engine.Engine - INFO - SELECT system_config.id AS system_config_id, system_config.config_key AS system_config_config_key, system_config.config_value AS system_config_config_value, system_config.config_type AS system_config_config_type, system_config.description AS system_config_description, system_config.effective_time AS system_config_effective_time, system_config.previous_value AS system_config_previous_value, system_config.status AS system_config_status, system_config.created_at AS system_config_created_at, system_config.updated_at AS system_config_updated_at 
FROM system_config 
WHERE system_config.config_key = %(config_key_1)s 
 LIMIT %(param_1)s
2025-08-15 11:25:02 - sqlalchemy.engine.Engine - INFO - [cached since 4167s ago] {'config_key_1': 'display.hot_categories_time_range', 'param_1': 1}
2025-08-15 11:25:02 - sqlalchemy.engine.Engine - INFO - SELECT questions.classification AS name, count(questions.id) AS count 
FROM questions 
WHERE questions.classification IS NOT NULL AND questions.classification != %(classification_1)s GROUP BY questions.classification
2025-08-15 11:25:02 - sqlalchemy.engine.Engine - INFO - [cached since 4167s ago] {'classification_1': ''}
2025-08-15 11:25:02 - sqlalchemy.engine.Engine - INFO - SELECT questions.classification AS name, count(questions.id) AS count 
FROM questions 
WHERE questions.classification IS NOT NULL AND questions.classification != %(classification_1)s AND questions.created_at >= %(created_at_1)s GROUP BY questions.classification ORDER BY count(questions.id) DESC
2025-08-15 11:25:02 - sqlalchemy.engine.Engine - INFO - [cached since 4167s ago] {'classification_1': '', 'created_at_1': datetime.datetime(2025, 8, 8, 3, 25, 2, 662743)}
2025-08-15 11:25:02 - sqlalchemy.engine.Engine - INFO - SELECT questions.classification AS name, count(questions.id) AS count 
FROM questions 
WHERE questions.classification IS NOT NULL AND questions.classification != %(classification_1)s GROUP BY questions.classification ORDER BY count(questions.id) DESC
2025-08-15 11:25:02 - sqlalchemy.engine.Engine - INFO - [cached since 4170s ago] {'classification_1': ''}
2025-08-15 11:25:02 - sqlalchemy.engine.Engine - INFO - SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions ORDER BY questions.created_at DESC 
 LIMIT %(param_1)s
2025-08-15 11:25:02 - sqlalchemy.engine.Engine - INFO - [cached since 4167s ago] {'param_1': 5}
2025-08-15 11:25:02 - sqlalchemy.engine.Engine - INFO - SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers ORDER BY answers.created_at DESC 
 LIMIT %(param_1)s
2025-08-15 11:25:02 - sqlalchemy.engine.Engine - INFO - [cached since 4167s ago] {'param_1': 5}
2025-08-15 11:25:02 - sqlalchemy.engine.Engine - INFO - SELECT scores.id AS scores_id, scores.answer_id AS scores_answer_id, scores.score_1 AS scores_score_1, scores.score_2 AS scores_score_2, scores.score_3 AS scores_score_3, scores.score_4 AS scores_score_4, scores.score_5 AS scores_score_5, scores.dimension_1_name AS scores_dimension_1_name, scores.dimension_2_name AS scores_dimension_2_name, scores.dimension_3_name AS scores_dimension_3_name, scores.dimension_4_name AS scores_dimension_4_name, scores.dimension_5_name AS scores_dimension_5_name, scores.average_score AS scores_average_score, scores.comment AS scores_comment, scores.rated_at AS scores_rated_at 
FROM scores ORDER BY scores.rated_at DESC 
 LIMIT %(param_1)s
2025-08-15 11:25:02 - sqlalchemy.engine.Engine - INFO - [cached since 4167s ago] {'param_1': 5}
2025-08-15 11:25:02 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:25:02 - sqlalchemy.engine.Engine - INFO - [cached since 4167s ago] {'created_at_1': datetime.datetime(2025, 8, 15, 3, 20, 2, 667900)}
2025-08-15 11:25:02 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:25:02 - sqlalchemy.engine.Engine - INFO - [cached since 4167s ago] {'created_at_1': datetime.datetime(2025, 8, 15, 3, 20, 2, 667900)}
2025-08-15 11:25:02 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT scores.id AS scores_id, scores.answer_id AS scores_answer_id, scores.score_1 AS scores_score_1, scores.score_2 AS scores_score_2, scores.score_3 AS scores_score_3, scores.score_4 AS scores_score_4, scores.score_5 AS scores_score_5, scores.dimension_1_name AS scores_dimension_1_name, scores.dimension_2_name AS scores_dimension_2_name, scores.dimension_3_name AS scores_dimension_3_name, scores.dimension_4_name AS scores_dimension_4_name, scores.dimension_5_name AS scores_dimension_5_name, scores.average_score AS scores_average_score, scores.comment AS scores_comment, scores.rated_at AS scores_rated_at 
FROM scores 
WHERE scores.rated_at >= %(rated_at_1)s) AS anon_1
2025-08-15 11:25:02 - sqlalchemy.engine.Engine - INFO - [cached since 4167s ago] {'rated_at_1': datetime.datetime(2025, 8, 15, 3, 20, 2, 667900)}
2025-08-15 11:25:02 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.assistant_type = %(assistant_type_1)s AND answers.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:25:02 - sqlalchemy.engine.Engine - INFO - [cached since 4167s ago] {'assistant_type_1': 'yoyo', 'created_at_1': datetime.datetime(2025, 8, 15, 3, 20, 2, 667900)}
2025-08-15 11:25:02 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.assistant_type = %(assistant_type_1)s AND answers.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:25:02 - sqlalchemy.engine.Engine - INFO - [cached since 4167s ago] {'assistant_type_1': 'doubao', 'created_at_1': datetime.datetime(2025, 8, 15, 3, 20, 2, 667900)}
2025-08-15 11:25:02 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.assistant_type = %(assistant_type_1)s AND answers.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:25:02 - sqlalchemy.engine.Engine - INFO - [cached since 4167s ago] {'assistant_type_1': 'xiaotian', 'created_at_1': datetime.datetime(2025, 8, 15, 3, 20, 2, 667900)}
2025-08-15 11:25:02 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-15 11:25:05 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-15 11:25:05 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-15 11:25:05 - sqlalchemy.engine.Engine - INFO - SELECT questions.classification AS questions_classification, count(questions.id) AS badcase_count 
FROM questions 
WHERE questions.is_badcase = true GROUP BY questions.classification ORDER BY count(questions.id) DESC 
 LIMIT %(param_1)s
2025-08-15 11:25:05 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s) AS anon_1
2025-08-15 11:25:05 - sqlalchemy.engine.Engine - INFO - [cached since 4170s ago] {'param_1': 3}
2025-08-15 11:25:05 - sqlalchemy.engine.Engine - INFO - [cached since 4170s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 17, 23, 59, 59, 999999), 'processing_status_1': 'scored'}
2025-08-15 11:25:05 - sqlalchemy.engine.Engine - INFO - 
                WITH dimension_scores AS (
                    -- 维度1的数据
                    SELECT
                        s.dimension_1_name as dimension_name,
                        s.score_1 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_1_name IS NOT NULL
                    AND s.score_1 IS NOT NULL

                    UNION ALL

                    -- 维度2的数据
                    SELECT
                        s.dimension_2_name as dimension_name,
                        s.score_2 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_2_name IS NOT NULL
                    AND s.score_2 IS NOT NULL

                    UNION ALL

                    -- 维度3的数据
                    SELECT
                        s.dimension_3_name as dimension_name,
                        s.score_3 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_3_name IS NOT NULL
                    AND s.score_3 IS NOT NULL

                    UNION ALL

                    -- 维度4的数据
                    SELECT
                        s.dimension_4_name as dimension_name,
                        s.score_4 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_4_name IS NOT NULL
                    AND s.score_4 IS NOT NULL

                    UNION ALL

                    -- 维度5的数据
                    SELECT
                        s.dimension_5_name as dimension_name,
                        s.score_5 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_5_name IS NOT NULL
                    AND s.score_5 IS NOT NULL
                )
                SELECT
                    dimension_name,
                    AVG(score) as avg_score,
                    COUNT(*) as sample_count
                FROM dimension_scores
                GROUP BY dimension_name
                ORDER BY avg_score ASC
            
2025-08-15 11:25:05 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s AND questions.is_badcase = true) AS anon_1
2025-08-15 11:25:05 - sqlalchemy.engine.Engine - INFO - [cached since 4170s ago] {'classification': '其他'}
2025-08-15 11:25:05 - sqlalchemy.engine.Engine - INFO - [cached since 4170s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 17, 23, 59, 59, 999999), 'processing_status_1': 'scored'}
2025-08-15 11:25:05 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s AND questions.is_badcase = true AND questions.badcase_review_status = %(badcase_review_status_1)s) AS anon_1
2025-08-15 11:25:05 - sqlalchemy.engine.Engine - INFO - [cached since 4170s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 17, 23, 59, 59, 999999), 'processing_status_1': 'scored', 'badcase_review_status_1': 'pending'}
2025-08-15 11:25:05 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s AND questions.badcase_review_status = %(badcase_review_status_1)s) AS anon_1
2025-08-15 11:25:05 - sqlalchemy.engine.Engine - INFO - [cached since 4170s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 17, 23, 59, 59, 999999), 'processing_status_1': 'scored', 'badcase_review_status_1': 'reviewed'}
2025-08-15 11:25:05 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s AND questions.badcase_review_status = %(badcase_review_status_1)s AND questions.is_badcase = false) AS anon_1
2025-08-15 11:25:05 - sqlalchemy.engine.Engine - INFO - [cached since 4170s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 17, 23, 59, 59, 999999), 'processing_status_1': 'scored', 'badcase_review_status_1': 'reviewed'}
2025-08-15 11:25:05 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-15 11:25:05 - sqlalchemy.engine.Engine - INFO - 
                WITH dimension_scores AS (
                    -- 维度1的数据
                    SELECT
                        s.dimension_1_name as dimension_name,
                        s.score_1 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_1_name IS NOT NULL
                    AND s.score_1 IS NOT NULL

                    UNION ALL

                    -- 维度2的数据
                    SELECT
                        s.dimension_2_name as dimension_name,
                        s.score_2 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_2_name IS NOT NULL
                    AND s.score_2 IS NOT NULL

                    UNION ALL

                    -- 维度3的数据
                    SELECT
                        s.dimension_3_name as dimension_name,
                        s.score_3 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_3_name IS NOT NULL
                    AND s.score_3 IS NOT NULL

                    UNION ALL

                    -- 维度4的数据
                    SELECT
                        s.dimension_4_name as dimension_name,
                        s.score_4 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_4_name IS NOT NULL
                    AND s.score_4 IS NOT NULL

                    UNION ALL

                    -- 维度5的数据
                    SELECT
                        s.dimension_5_name as dimension_name,
                        s.score_5 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_5_name IS NOT NULL
                    AND s.score_5 IS NOT NULL
                )
                SELECT
                    dimension_name,
                    AVG(score) as avg_score,
                    COUNT(*) as sample_count
                FROM dimension_scores
                GROUP BY dimension_name
                ORDER BY avg_score ASC
            
2025-08-15 11:25:05 - sqlalchemy.engine.Engine - INFO - [cached since 4170s ago] {'classification': '产品使用'}
2025-08-15 11:25:05 - sqlalchemy.engine.Engine - INFO - 
                WITH dimension_scores AS (
                    -- 维度1的数据
                    SELECT
                        s.dimension_1_name as dimension_name,
                        s.score_1 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_1_name IS NOT NULL
                    AND s.score_1 IS NOT NULL

                    UNION ALL

                    -- 维度2的数据
                    SELECT
                        s.dimension_2_name as dimension_name,
                        s.score_2 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_2_name IS NOT NULL
                    AND s.score_2 IS NOT NULL

                    UNION ALL

                    -- 维度3的数据
                    SELECT
                        s.dimension_3_name as dimension_name,
                        s.score_3 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_3_name IS NOT NULL
                    AND s.score_3 IS NOT NULL

                    UNION ALL

                    -- 维度4的数据
                    SELECT
                        s.dimension_4_name as dimension_name,
                        s.score_4 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_4_name IS NOT NULL
                    AND s.score_4 IS NOT NULL

                    UNION ALL

                    -- 维度5的数据
                    SELECT
                        s.dimension_5_name as dimension_name,
                        s.score_5 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_5_name IS NOT NULL
                    AND s.score_5 IS NOT NULL
                )
                SELECT
                    dimension_name,
                    AVG(score) as avg_score,
                    COUNT(*) as sample_count
                FROM dimension_scores
                GROUP BY dimension_name
                ORDER BY avg_score ASC
            
2025-08-15 11:25:05 - sqlalchemy.engine.Engine - INFO - [cached since 4170s ago] {'classification': '功能建议'}
2025-08-15 11:25:05 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-15 11:25:05 - app.api.word_analysis_api - INFO - 获取词云数据请求: time_range=week, limit=40
2025-08-15 11:25:05 - app.api.word_analysis_api - INFO - 获取词云数据请求: time_range=week, limit=40
2025-08-15 11:25:05 - app.services.word_analysis_service - INFO - 开始获取热词分析数据，时间范围: week, 限制: 40
2025-08-15 11:25:05 - app.services.word_analysis_service - INFO - 开始获取热词分析数据，时间范围: week, 限制: 40
2025-08-15 11:25:05 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-15 11:25:05 - sqlalchemy.engine.Engine - INFO - SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.query IS NOT NULL AND questions.query != %(query_1)s AND questions.is_deleted = false
2025-08-15 11:25:05 - sqlalchemy.engine.Engine - INFO - [cached since 4170s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 17, 23, 59, 59, 999999), 'query_1': ''}
2025-08-15 11:25:05 - app.services.word_analysis_service - INFO - 查询到 260 个问题，时间范围: 2025-08-11 00:00:00 至 2025-08-17 23:59:59.999999
2025-08-15 11:25:05 - app.services.word_analysis_service - INFO - 查询到 260 个问题，时间范围: 2025-08-11 00:00:00 至 2025-08-17 23:59:59.999999
2025-08-15 11:25:05 - app.services.word_analysis_service - INFO - 问题样本 1: 为什么支付失败了？...
2025-08-15 11:25:05 - app.services.word_analysis_service - INFO - 问题样本 1: 为什么支付失败了？...
2025-08-15 11:25:05 - app.services.word_analysis_service - INFO - 问题样本 2: 数据统计在哪里可以找到？...
2025-08-15 11:25:05 - app.services.word_analysis_service - INFO - 问题样本 2: 数据统计在哪里可以找到？...
2025-08-15 11:25:05 - app.services.word_analysis_service - INFO - 问题样本 3: 如何更新个人信息？...
2025-08-15 11:25:05 - app.services.word_analysis_service - INFO - 问题样本 3: 如何更新个人信息？...
2025-08-15 11:25:05 - app.services.word_analysis_service - INFO - 有效问题文本数: 260, 总文本长度: 2914
2025-08-15 11:25:05 - app.services.word_analysis_service - INFO - 有效问题文本数: 260, 总文本长度: 2914
2025-08-15 11:25:05 - app.services.word_analysis_service - INFO - 文本分析完成，原始词汇: 1755, 过滤后: 653, 唯一词汇: 58
2025-08-15 11:25:05 - app.services.word_analysis_service - INFO - 文本分析完成，原始词汇: 1755, 过滤后: 653, 唯一词汇: 58
2025-08-15 11:25:05 - app.services.word_analysis_service - INFO - 热词分析完成，共分析 260 个问题，生成 40 个热词
2025-08-15 11:25:05 - app.services.word_analysis_service - INFO - 热词分析完成，共分析 260 个问题，生成 40 个热词
2025-08-15 11:25:05 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-15 11:25:05 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-15 11:25:05 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions) AS anon_1
2025-08-15 11:25:05 - sqlalchemy.engine.Engine - INFO - [cached since 4173s ago] {}
2025-08-15 11:25:05 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:25:05 - sqlalchemy.engine.Engine - INFO - [cached since 4170s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0)}
2025-08-15 11:25:05 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s) AS anon_1
2025-08-15 11:25:05 - sqlalchemy.engine.Engine - INFO - [cached since 4170s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'classification_1': ''}
2025-08-15 11:25:05 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.classification IS NOT NULL AND questions.classification != %(classification_1)s) AS anon_1
2025-08-15 11:25:05 - sqlalchemy.engine.Engine - INFO - [cached since 4170s ago] {'classification_1': ''}
2025-08-15 11:25:05 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT access_logs.id AS access_logs_id, access_logs.user_id AS access_logs_user_id, access_logs.username AS access_logs_username, access_logs.action AS access_logs_action, access_logs.ip_address AS access_logs_ip_address, access_logs.created_at AS access_logs_created_at 
FROM access_logs 
WHERE access_logs.action = %(action_1)s) AS anon_1
2025-08-15 11:25:05 - sqlalchemy.engine.Engine - INFO - [cached since 4170s ago] {'action_1': 'login'}
2025-08-15 11:25:05 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT access_logs.id AS access_logs_id, access_logs.user_id AS access_logs_user_id, access_logs.username AS access_logs_username, access_logs.action AS access_logs_action, access_logs.ip_address AS access_logs_ip_address, access_logs.created_at AS access_logs_created_at 
FROM access_logs 
WHERE access_logs.action = %(action_1)s AND access_logs.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:25:05 - sqlalchemy.engine.Engine - INFO - [cached since 4170s ago] {'action_1': 'login', 'created_at_1': datetime.datetime(2025, 8, 11, 0, 0)}
2025-08-15 11:25:05 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:25:05 - sqlalchemy.engine.Engine - INFO - [cached since 4170s ago] {'created_at_1': datetime.datetime(2025, 8, 15, 0, 0)}
2025-08-15 11:25:05 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:25:05 - sqlalchemy.engine.Engine - INFO - [cached since 4170s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0)}
2025-08-15 11:25:05 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s) AS anon_1
2025-08-15 11:25:05 - sqlalchemy.engine.Engine - INFO - [cached since 4170s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'classification_1': ''}
2025-08-15 11:25:05 - sqlalchemy.engine.Engine - INFO - SELECT coalesce(sum(least(anon_1.cnt, %(least_1)s)), %(coalesce_2)s) AS coalesce_1 
FROM (SELECT answers.question_business_id AS qbid, count(answers.id) AS cnt 
FROM answers JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.created_at >= %(created_at_1)s AND answers.created_at >= %(created_at_2)s AND answers.assistant_type IN (%(assistant_type_1_1)s, %(assistant_type_1_2)s) AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s GROUP BY answers.question_business_id) AS anon_1
2025-08-15 11:25:05 - sqlalchemy.engine.Engine - INFO - [cached since 4170s ago] {'least_1': 2, 'coalesce_2': 0, 'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 11, 0, 0), 'classification_1': '', 'assistant_type_1_1': 'doubao', 'assistant_type_1_2': 'xiaotian'}
2025-08-15 11:25:05 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT count(distinct(answers.question_business_id)) AS count_2 
FROM answers JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.created_at >= %(created_at_1)s AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s AND answers.is_scored = true AND answers.assistant_type IN (%(assistant_type_1_1)s, %(assistant_type_1_2)s, %(assistant_type_1_3)s) GROUP BY answers.question_business_id 
HAVING count(distinct(answers.assistant_type)) = %(count_3)s) AS anon_1
2025-08-15 11:25:05 - sqlalchemy.engine.Engine - INFO - [cached since 4170s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'classification_1': '', 'count_3': 3, 'assistant_type_1_1': 'yoyo', 'assistant_type_1_2': 'doubao', 'assistant_type_1_3': 'xiaotian'}
2025-08-15 11:25:05 - sqlalchemy.engine.Engine - INFO - SELECT count(distinct(questions.business_id)) AS count_1 
FROM questions JOIN answers ON questions.business_id = answers.question_business_id 
WHERE questions.created_at >= %(created_at_1)s AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s AND answers.assistant_type IN (%(assistant_type_1_1)s, %(assistant_type_1_2)s) AND answers.created_at >= %(created_at_2)s
2025-08-15 11:25:05 - sqlalchemy.engine.Engine - INFO - [cached since 4170s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'classification_1': '', 'created_at_2': datetime.datetime(2025, 8, 11, 0, 0), 'assistant_type_1_1': 'doubao', 'assistant_type_1_2': 'xiaotian'}
2025-08-15 11:25:05 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.processing_status = %(processing_status_1)s AND questions.is_badcase = true) AS anon_1
2025-08-15 11:25:05 - sqlalchemy.engine.Engine - INFO - [cached since 4170s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'processing_status_1': 'scored'}
2025-08-15 11:25:05 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.processing_status = %(processing_status_1)s AND questions.badcase_review_status = %(badcase_review_status_1)s) AS anon_1
2025-08-15 11:25:05 - sqlalchemy.engine.Engine - INFO - [cached since 4170s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'processing_status_1': 'scored', 'badcase_review_status_1': 'reviewed'}
2025-08-15 11:25:05 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:25:05 - sqlalchemy.engine.Engine - INFO - [cached since 4170s ago] {'created_at_1': datetime.datetime(2025, 8, 15, 2, 25, 5, 694081)}
2025-08-15 11:25:05 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:25:05 - sqlalchemy.engine.Engine - INFO - [cached since 4170s ago] {'created_at_1': datetime.datetime(2025, 8, 14, 21, 25, 5, 694081)}
2025-08-15 11:25:05 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.updated_at >= %(updated_at_1)s AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s) AS anon_1
2025-08-15 11:25:05 - sqlalchemy.engine.Engine - INFO - [cached since 4170s ago] {'updated_at_1': datetime.datetime(2025, 8, 15, 2, 55, 5, 694081), 'classification_1': ''}
2025-08-15 11:25:05 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers JOIN questions ON answers.question_business_id = questions.business_id 
WHERE answers.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:25:05 - sqlalchemy.engine.Engine - INFO - [cached since 4170s ago] {'created_at_1': datetime.datetime(2025, 8, 15, 2, 55, 5, 694081)}
2025-08-15 11:25:05 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.updated_at >= %(updated_at_1)s AND answers.is_scored = true) AS anon_1
2025-08-15 11:25:05 - sqlalchemy.engine.Engine - INFO - [cached since 4170s ago] {'updated_at_1': datetime.datetime(2025, 8, 15, 2, 55, 5, 694081)}
2025-08-15 11:25:05 - sqlalchemy.engine.Engine - INFO - SELECT date_trunc(%(date_trunc_1)s, questions.created_at) AS day, count(questions.id) AS count 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s GROUP BY date_trunc(%(date_trunc_2)s, questions.created_at) ORDER BY day
2025-08-15 11:25:05 - sqlalchemy.engine.Engine - INFO - [cached since 4170s ago] {'date_trunc_1': 'day', 'created_at_1': datetime.datetime(2025, 8, 8, 3, 25, 5, 711648), 'date_trunc_2': 'day'}
2025-08-15 11:25:05 - sqlalchemy.engine.Engine - INFO - SELECT date_trunc(%(date_trunc_1)s, questions.updated_at) AS day, count(questions.id) AS count 
FROM questions 
WHERE questions.updated_at >= %(updated_at_1)s AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s AND questions.processing_status IN (%(processing_status_1_1)s, %(processing_status_1_2)s, %(processing_status_1_3)s) GROUP BY date_trunc(%(date_trunc_2)s, questions.updated_at) ORDER BY day
2025-08-15 11:25:05 - sqlalchemy.engine.Engine - INFO - [cached since 4170s ago] {'date_trunc_1': 'day', 'updated_at_1': datetime.datetime(2025, 8, 8, 3, 25, 5, 711648), 'classification_1': '', 'date_trunc_2': 'day', 'processing_status_1_1': 'classified', 'processing_status_1_2': 'answers_generated', 'processing_status_1_3': 'scored'}
2025-08-15 11:25:05 - sqlalchemy.engine.Engine - INFO - SELECT date_trunc(%(date_trunc_1)s, answers.created_at) AS day, count(answers.id) AS count 
FROM answers JOIN questions ON answers.question_business_id = questions.business_id 
WHERE answers.created_at >= %(created_at_1)s AND questions.created_at >= %(created_at_2)s AND answers.assistant_type IN (%(assistant_type_1_1)s, %(assistant_type_1_2)s) AND answers.is_scored = true AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s GROUP BY date_trunc(%(date_trunc_2)s, answers.created_at) ORDER BY day
2025-08-15 11:25:05 - sqlalchemy.engine.Engine - INFO - [cached since 4170s ago] {'date_trunc_1': 'day', 'created_at_1': datetime.datetime(2025, 8, 8, 3, 25, 5, 711648), 'created_at_2': datetime.datetime(2025, 8, 8, 3, 25, 5, 711648), 'classification_1': '', 'date_trunc_2': 'day', 'assistant_type_1_1': 'doubao', 'assistant_type_1_2': 'xiaotian'}
2025-08-15 11:25:05 - sqlalchemy.engine.Engine - INFO - SELECT answers.assistant_type AS answers_assistant_type, avg(scores.score_1) AS avg_score_1, avg(scores.score_2) AS avg_score_2, avg(scores.score_3) AS avg_score_3, avg(scores.score_4) AS avg_score_4, avg(scores.score_5) AS avg_score_5, avg(scores.average_score) AS avg_total, count(scores.id) AS score_count 
FROM answers JOIN scores ON answers.id = scores.answer_id GROUP BY answers.assistant_type
2025-08-15 11:25:05 - sqlalchemy.engine.Engine - INFO - [cached since 4170s ago] {}
2025-08-15 11:25:05 - sqlalchemy.engine.Engine - INFO - SELECT system_config.id AS system_config_id, system_config.config_key AS system_config_config_key, system_config.config_value AS system_config_config_value, system_config.config_type AS system_config_config_type, system_config.description AS system_config_description, system_config.effective_time AS system_config_effective_time, system_config.previous_value AS system_config_previous_value, system_config.status AS system_config_status, system_config.created_at AS system_config_created_at, system_config.updated_at AS system_config_updated_at 
FROM system_config 
WHERE system_config.config_key = %(config_key_1)s 
 LIMIT %(param_1)s
2025-08-15 11:25:05 - sqlalchemy.engine.Engine - INFO - [cached since 4170s ago] {'config_key_1': 'display.hot_categories_time_range', 'param_1': 1}
2025-08-15 11:25:05 - sqlalchemy.engine.Engine - INFO - SELECT questions.classification AS name, count(questions.id) AS count 
FROM questions 
WHERE questions.classification IS NOT NULL AND questions.classification != %(classification_1)s GROUP BY questions.classification
2025-08-15 11:25:05 - sqlalchemy.engine.Engine - INFO - [cached since 4170s ago] {'classification_1': ''}
2025-08-15 11:25:05 - sqlalchemy.engine.Engine - INFO - SELECT questions.classification AS name, count(questions.id) AS count 
FROM questions 
WHERE questions.classification IS NOT NULL AND questions.classification != %(classification_1)s AND questions.created_at >= %(created_at_1)s GROUP BY questions.classification ORDER BY count(questions.id) DESC
2025-08-15 11:25:05 - sqlalchemy.engine.Engine - INFO - [cached since 4170s ago] {'classification_1': '', 'created_at_1': datetime.datetime(2025, 8, 8, 3, 25, 5, 721866)}
2025-08-15 11:25:05 - sqlalchemy.engine.Engine - INFO - SELECT questions.classification AS name, count(questions.id) AS count 
FROM questions 
WHERE questions.classification IS NOT NULL AND questions.classification != %(classification_1)s GROUP BY questions.classification ORDER BY count(questions.id) DESC
2025-08-15 11:25:05 - sqlalchemy.engine.Engine - INFO - [cached since 4173s ago] {'classification_1': ''}
2025-08-15 11:25:05 - sqlalchemy.engine.Engine - INFO - SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions ORDER BY questions.created_at DESC 
 LIMIT %(param_1)s
2025-08-15 11:25:05 - sqlalchemy.engine.Engine - INFO - [cached since 4170s ago] {'param_1': 5}
2025-08-15 11:25:05 - sqlalchemy.engine.Engine - INFO - SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers ORDER BY answers.created_at DESC 
 LIMIT %(param_1)s
2025-08-15 11:25:05 - sqlalchemy.engine.Engine - INFO - [cached since 4170s ago] {'param_1': 5}
2025-08-15 11:25:05 - sqlalchemy.engine.Engine - INFO - SELECT scores.id AS scores_id, scores.answer_id AS scores_answer_id, scores.score_1 AS scores_score_1, scores.score_2 AS scores_score_2, scores.score_3 AS scores_score_3, scores.score_4 AS scores_score_4, scores.score_5 AS scores_score_5, scores.dimension_1_name AS scores_dimension_1_name, scores.dimension_2_name AS scores_dimension_2_name, scores.dimension_3_name AS scores_dimension_3_name, scores.dimension_4_name AS scores_dimension_4_name, scores.dimension_5_name AS scores_dimension_5_name, scores.average_score AS scores_average_score, scores.comment AS scores_comment, scores.rated_at AS scores_rated_at 
FROM scores ORDER BY scores.rated_at DESC 
 LIMIT %(param_1)s
2025-08-15 11:25:05 - sqlalchemy.engine.Engine - INFO - [cached since 4170s ago] {'param_1': 5}
2025-08-15 11:25:05 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:25:05 - sqlalchemy.engine.Engine - INFO - [cached since 4170s ago] {'created_at_1': datetime.datetime(2025, 8, 15, 3, 20, 5, 726960)}
2025-08-15 11:25:05 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:25:05 - sqlalchemy.engine.Engine - INFO - [cached since 4170s ago] {'created_at_1': datetime.datetime(2025, 8, 15, 3, 20, 5, 726960)}
2025-08-15 11:25:05 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT scores.id AS scores_id, scores.answer_id AS scores_answer_id, scores.score_1 AS scores_score_1, scores.score_2 AS scores_score_2, scores.score_3 AS scores_score_3, scores.score_4 AS scores_score_4, scores.score_5 AS scores_score_5, scores.dimension_1_name AS scores_dimension_1_name, scores.dimension_2_name AS scores_dimension_2_name, scores.dimension_3_name AS scores_dimension_3_name, scores.dimension_4_name AS scores_dimension_4_name, scores.dimension_5_name AS scores_dimension_5_name, scores.average_score AS scores_average_score, scores.comment AS scores_comment, scores.rated_at AS scores_rated_at 
FROM scores 
WHERE scores.rated_at >= %(rated_at_1)s) AS anon_1
2025-08-15 11:25:05 - sqlalchemy.engine.Engine - INFO - [cached since 4170s ago] {'rated_at_1': datetime.datetime(2025, 8, 15, 3, 20, 5, 726960)}
2025-08-15 11:25:05 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.assistant_type = %(assistant_type_1)s AND answers.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:25:05 - sqlalchemy.engine.Engine - INFO - [cached since 4170s ago] {'assistant_type_1': 'yoyo', 'created_at_1': datetime.datetime(2025, 8, 15, 3, 20, 5, 726960)}
2025-08-15 11:25:05 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.assistant_type = %(assistant_type_1)s AND answers.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:25:05 - sqlalchemy.engine.Engine - INFO - [cached since 4170s ago] {'assistant_type_1': 'doubao', 'created_at_1': datetime.datetime(2025, 8, 15, 3, 20, 5, 726960)}
2025-08-15 11:25:05 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.assistant_type = %(assistant_type_1)s AND answers.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:25:05 - sqlalchemy.engine.Engine - INFO - [cached since 4170s ago] {'assistant_type_1': 'xiaotian', 'created_at_1': datetime.datetime(2025, 8, 15, 3, 20, 5, 726960)}
2025-08-15 11:25:05 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-15 11:25:19 - apscheduler.scheduler - DEBUG - Looking for jobs to run
2025-08-15 11:25:19 - apscheduler.scheduler - DEBUG - Next wakeup is due at 2025-08-15 11:28:19.459779+08:00 (in 179.999329 seconds)
2025-08-15 11:25:19 - apscheduler.executors.default - INFO - Running job "可配置间隔AI处理工作流 (trigger: interval[0:03:00], next run at: 2025-08-15 11:28:19 CST)" (scheduled at 2025-08-15 11:25:19.459779+08:00)
2025-08-15 11:25:19 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-15 11:25:19 - sqlalchemy.engine.Engine - INFO - 
                    SELECT COUNT(*) FROM table1 t1
                    WHERE t1.query IS NOT NULL
                    AND t1.query != ''
                    AND TRIM(t1.query) != ''
                    AND t1.sendmessagetime >= %(week_start)s
                    AND NOT EXISTS (
                        SELECT 1 FROM questions q
                        WHERE q.business_id = MD5(CONCAT(
                            t1.pageid,
                            COALESCE(to_char(t1.sendmessagetime, 'YYYY-MM-DD"T"HH24:MI:SS.US'), ''),
                            t1.query
                        ))
                    )
                
2025-08-15 11:25:19 - sqlalchemy.engine.Engine - INFO - [cached since 4500s ago] {'week_start': datetime.datetime(2025, 8, 11, 0, 0)}
2025-08-15 11:25:19 - app.services.scheduler_service - INFO - 🔍 检测到 260 条新数据需要同步
2025-08-15 11:25:19 - app.services.scheduler_service - INFO - 🔍 检测到 260 条新数据需要同步
2025-08-15 11:25:19 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-15 11:25:19 - app.services.scheduler_service - INFO - 检测到可处理数据，开始执行完整工作流: workflow_20250815_032519
2025-08-15 11:25:19 - app.services.scheduler_service - INFO - 检测到可处理数据，开始执行完整工作流: workflow_20250815_032519
2025-08-15 11:25:19 - app.services.scheduler_service - INFO - 开始执行完整工作流: workflow_20250815_032519
2025-08-15 11:25:19 - app.services.scheduler_service - INFO - 开始执行完整工作流: workflow_20250815_032519
2025-08-15 11:25:19 - app.services.scheduler_service - INFO - 执行工作流阶段: data_sync
2025-08-15 11:25:19 - app.services.scheduler_service - INFO - 执行工作流阶段: data_sync
2025-08-15 11:25:19 - app.services.scheduler_service - INFO - 开始执行数据同步阶段 [workflow: workflow_20250815_032519]
2025-08-15 11:25:19 - app.services.scheduler_service - INFO - 开始执行数据同步阶段 [workflow: workflow_20250815_032519]
2025-08-15 11:25:19 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-15 11:25:19 - sqlalchemy.engine.Engine - INFO - SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.sendmessagetime <= %(sendmessagetime_1)s ORDER BY questions.sendmessagetime DESC 
 LIMIT %(param_1)s
2025-08-15 11:25:19 - sqlalchemy.engine.Engine - INFO - [cached since 4500s ago] {'sendmessagetime_1': datetime.datetime(2025, 8, 15, 3, 25, 19, 464410), 'param_1': 1}
2025-08-15 11:25:19 - app.services.sync_service - DEBUG - 获取最后同步时间: 2025-08-13 03:21:16
2025-08-15 11:25:19 - app.services.sync_service - DEBUG - 获取最后同步时间: 2025-08-13 03:21:16
2025-08-15 11:25:19 - app.services.sync_service - INFO - 开始数据同步，最后同步时间: 2025-08-13 03:21:16
2025-08-15 11:25:19 - app.services.sync_service - INFO - 开始数据同步，最后同步时间: 2025-08-13 03:21:16
2025-08-15 11:25:19 - sqlalchemy.engine.Engine - INFO - 
                    SELECT
                        t1.pageid,
                        t1.devicetypename,
                        t1.sendmessagetime,
                        t1.query,
                        t1.answer,
                        t1.serviceid,
                        t1.qatype,
                        t1.intent,
                        t1.iskeyboardinput,
                        t1.isstopanswer
                    FROM table1 t1
                    WHERE t1.query IS NOT NULL
                    AND t1.query != ''
                    AND TRIM(t1.query) != ''
                    AND t1.sendmessagetime >= %(week_start)s
                    AND NOT EXISTS (
                        SELECT 1 FROM questions q
                        WHERE q.business_id = MD5(CONCAT(
                            t1.pageid,
                            COALESCE(to_char(t1.sendmessagetime, 'YYYY-MM-DD"T"HH24:MI:SS.US'), ''),
                            t1.query
                        ))
                    )
                    ORDER BY t1.sendmessagetime ASC
                
2025-08-15 11:25:19 - sqlalchemy.engine.Engine - INFO - [cached since 4500s ago] {'week_start': datetime.datetime(2025, 8, 11, 0, 0)}
2025-08-15 11:25:19 - app.services.sync_service - ERROR - 从table1获取数据失败: not enough values to unpack (expected 11, got 10)
2025-08-15 11:25:19 - app.services.sync_service - ERROR - 从table1获取数据失败: not enough values to unpack (expected 11, got 10)
2025-08-15 11:25:19 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-15 11:25:19 - app.services.sync_service - ERROR - 数据同步失败: not enough values to unpack (expected 11, got 10)
2025-08-15 11:25:19 - app.services.sync_service - ERROR - 数据同步失败: not enough values to unpack (expected 11, got 10)
2025-08-15 11:25:19 - app.services.scheduler_service - ERROR - 数据同步阶段失败: 数据同步失败: not enough values to unpack (expected 11, got 10)
2025-08-15 11:25:19 - app.services.scheduler_service - ERROR - 数据同步阶段失败: 数据同步失败: not enough values to unpack (expected 11, got 10)
2025-08-15 11:25:19 - app.services.scheduler_service - ERROR - 工作流阶段失败: data_sync, 停止后续执行
2025-08-15 11:25:19 - app.services.scheduler_service - ERROR - 工作流阶段失败: data_sync, 停止后续执行
2025-08-15 11:25:19 - apscheduler.executors.default - INFO - Job "可配置间隔AI处理工作流 (trigger: interval[0:03:00], next run at: 2025-08-15 11:28:19 CST)" executed successfully
2025-08-15 11:25:35 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-15 11:25:35 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-15 11:25:35 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s) AS anon_1
2025-08-15 11:25:35 - sqlalchemy.engine.Engine - INFO - SELECT questions.classification AS questions_classification, count(questions.id) AS badcase_count 
FROM questions 
WHERE questions.is_badcase = true GROUP BY questions.classification ORDER BY count(questions.id) DESC 
 LIMIT %(param_1)s
2025-08-15 11:25:35 - sqlalchemy.engine.Engine - INFO - [cached since 4200s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 17, 23, 59, 59, 999999), 'processing_status_1': 'scored'}
2025-08-15 11:25:35 - sqlalchemy.engine.Engine - INFO - [cached since 4200s ago] {'param_1': 3}
2025-08-15 11:25:35 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s AND questions.is_badcase = true) AS anon_1
2025-08-15 11:25:35 - sqlalchemy.engine.Engine - INFO - [cached since 4200s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 17, 23, 59, 59, 999999), 'processing_status_1': 'scored'}
2025-08-15 11:25:35 - sqlalchemy.engine.Engine - INFO - 
                WITH dimension_scores AS (
                    -- 维度1的数据
                    SELECT
                        s.dimension_1_name as dimension_name,
                        s.score_1 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_1_name IS NOT NULL
                    AND s.score_1 IS NOT NULL

                    UNION ALL

                    -- 维度2的数据
                    SELECT
                        s.dimension_2_name as dimension_name,
                        s.score_2 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_2_name IS NOT NULL
                    AND s.score_2 IS NOT NULL

                    UNION ALL

                    -- 维度3的数据
                    SELECT
                        s.dimension_3_name as dimension_name,
                        s.score_3 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_3_name IS NOT NULL
                    AND s.score_3 IS NOT NULL

                    UNION ALL

                    -- 维度4的数据
                    SELECT
                        s.dimension_4_name as dimension_name,
                        s.score_4 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_4_name IS NOT NULL
                    AND s.score_4 IS NOT NULL

                    UNION ALL

                    -- 维度5的数据
                    SELECT
                        s.dimension_5_name as dimension_name,
                        s.score_5 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_5_name IS NOT NULL
                    AND s.score_5 IS NOT NULL
                )
                SELECT
                    dimension_name,
                    AVG(score) as avg_score,
                    COUNT(*) as sample_count
                FROM dimension_scores
                GROUP BY dimension_name
                ORDER BY avg_score ASC
            
2025-08-15 11:25:35 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s AND questions.is_badcase = true AND questions.badcase_review_status = %(badcase_review_status_1)s) AS anon_1
2025-08-15 11:25:35 - sqlalchemy.engine.Engine - INFO - [cached since 4200s ago] {'classification': '其他'}
2025-08-15 11:25:35 - sqlalchemy.engine.Engine - INFO - [cached since 4200s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 17, 23, 59, 59, 999999), 'processing_status_1': 'scored', 'badcase_review_status_1': 'pending'}
2025-08-15 11:25:35 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s AND questions.badcase_review_status = %(badcase_review_status_1)s) AS anon_1
2025-08-15 11:25:35 - sqlalchemy.engine.Engine - INFO - [cached since 4200s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 17, 23, 59, 59, 999999), 'processing_status_1': 'scored', 'badcase_review_status_1': 'reviewed'}
2025-08-15 11:25:35 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s AND questions.badcase_review_status = %(badcase_review_status_1)s AND questions.is_badcase = false) AS anon_1
2025-08-15 11:25:35 - sqlalchemy.engine.Engine - INFO - [cached since 4200s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 17, 23, 59, 59, 999999), 'processing_status_1': 'scored', 'badcase_review_status_1': 'reviewed'}
2025-08-15 11:25:35 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-15 11:25:35 - sqlalchemy.engine.Engine - INFO - 
                WITH dimension_scores AS (
                    -- 维度1的数据
                    SELECT
                        s.dimension_1_name as dimension_name,
                        s.score_1 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_1_name IS NOT NULL
                    AND s.score_1 IS NOT NULL

                    UNION ALL

                    -- 维度2的数据
                    SELECT
                        s.dimension_2_name as dimension_name,
                        s.score_2 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_2_name IS NOT NULL
                    AND s.score_2 IS NOT NULL

                    UNION ALL

                    -- 维度3的数据
                    SELECT
                        s.dimension_3_name as dimension_name,
                        s.score_3 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_3_name IS NOT NULL
                    AND s.score_3 IS NOT NULL

                    UNION ALL

                    -- 维度4的数据
                    SELECT
                        s.dimension_4_name as dimension_name,
                        s.score_4 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_4_name IS NOT NULL
                    AND s.score_4 IS NOT NULL

                    UNION ALL

                    -- 维度5的数据
                    SELECT
                        s.dimension_5_name as dimension_name,
                        s.score_5 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_5_name IS NOT NULL
                    AND s.score_5 IS NOT NULL
                )
                SELECT
                    dimension_name,
                    AVG(score) as avg_score,
                    COUNT(*) as sample_count
                FROM dimension_scores
                GROUP BY dimension_name
                ORDER BY avg_score ASC
            
2025-08-15 11:25:35 - sqlalchemy.engine.Engine - INFO - [cached since 4200s ago] {'classification': '产品使用'}
2025-08-15 11:25:35 - sqlalchemy.engine.Engine - INFO - 
                WITH dimension_scores AS (
                    -- 维度1的数据
                    SELECT
                        s.dimension_1_name as dimension_name,
                        s.score_1 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_1_name IS NOT NULL
                    AND s.score_1 IS NOT NULL

                    UNION ALL

                    -- 维度2的数据
                    SELECT
                        s.dimension_2_name as dimension_name,
                        s.score_2 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_2_name IS NOT NULL
                    AND s.score_2 IS NOT NULL

                    UNION ALL

                    -- 维度3的数据
                    SELECT
                        s.dimension_3_name as dimension_name,
                        s.score_3 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_3_name IS NOT NULL
                    AND s.score_3 IS NOT NULL

                    UNION ALL

                    -- 维度4的数据
                    SELECT
                        s.dimension_4_name as dimension_name,
                        s.score_4 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_4_name IS NOT NULL
                    AND s.score_4 IS NOT NULL

                    UNION ALL

                    -- 维度5的数据
                    SELECT
                        s.dimension_5_name as dimension_name,
                        s.score_5 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_5_name IS NOT NULL
                    AND s.score_5 IS NOT NULL
                )
                SELECT
                    dimension_name,
                    AVG(score) as avg_score,
                    COUNT(*) as sample_count
                FROM dimension_scores
                GROUP BY dimension_name
                ORDER BY avg_score ASC
            
2025-08-15 11:25:35 - sqlalchemy.engine.Engine - INFO - [cached since 4200s ago] {'classification': '功能建议'}
2025-08-15 11:25:35 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-15 11:25:35 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-15 11:25:35 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions) AS anon_1
2025-08-15 11:25:35 - sqlalchemy.engine.Engine - INFO - [cached since 4203s ago] {}
2025-08-15 11:25:35 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:25:35 - sqlalchemy.engine.Engine - INFO - [cached since 4200s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0)}
2025-08-15 11:25:35 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s) AS anon_1
2025-08-15 11:25:35 - sqlalchemy.engine.Engine - INFO - [cached since 4200s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'classification_1': ''}
2025-08-15 11:25:35 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.classification IS NOT NULL AND questions.classification != %(classification_1)s) AS anon_1
2025-08-15 11:25:35 - sqlalchemy.engine.Engine - INFO - [cached since 4200s ago] {'classification_1': ''}
2025-08-15 11:25:35 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT access_logs.id AS access_logs_id, access_logs.user_id AS access_logs_user_id, access_logs.username AS access_logs_username, access_logs.action AS access_logs_action, access_logs.ip_address AS access_logs_ip_address, access_logs.created_at AS access_logs_created_at 
FROM access_logs 
WHERE access_logs.action = %(action_1)s) AS anon_1
2025-08-15 11:25:35 - sqlalchemy.engine.Engine - INFO - [cached since 4200s ago] {'action_1': 'login'}
2025-08-15 11:25:35 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT access_logs.id AS access_logs_id, access_logs.user_id AS access_logs_user_id, access_logs.username AS access_logs_username, access_logs.action AS access_logs_action, access_logs.ip_address AS access_logs_ip_address, access_logs.created_at AS access_logs_created_at 
FROM access_logs 
WHERE access_logs.action = %(action_1)s AND access_logs.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:25:35 - sqlalchemy.engine.Engine - INFO - [cached since 4200s ago] {'action_1': 'login', 'created_at_1': datetime.datetime(2025, 8, 11, 0, 0)}
2025-08-15 11:25:35 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:25:35 - sqlalchemy.engine.Engine - INFO - [cached since 4200s ago] {'created_at_1': datetime.datetime(2025, 8, 15, 0, 0)}
2025-08-15 11:25:35 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:25:35 - sqlalchemy.engine.Engine - INFO - [cached since 4200s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0)}
2025-08-15 11:25:35 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s) AS anon_1
2025-08-15 11:25:35 - sqlalchemy.engine.Engine - INFO - [cached since 4200s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'classification_1': ''}
2025-08-15 11:25:35 - sqlalchemy.engine.Engine - INFO - SELECT coalesce(sum(least(anon_1.cnt, %(least_1)s)), %(coalesce_2)s) AS coalesce_1 
FROM (SELECT answers.question_business_id AS qbid, count(answers.id) AS cnt 
FROM answers JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.created_at >= %(created_at_1)s AND answers.created_at >= %(created_at_2)s AND answers.assistant_type IN (%(assistant_type_1_1)s, %(assistant_type_1_2)s) AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s GROUP BY answers.question_business_id) AS anon_1
2025-08-15 11:25:35 - sqlalchemy.engine.Engine - INFO - [cached since 4200s ago] {'least_1': 2, 'coalesce_2': 0, 'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 11, 0, 0), 'classification_1': '', 'assistant_type_1_1': 'doubao', 'assistant_type_1_2': 'xiaotian'}
2025-08-15 11:25:35 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT count(distinct(answers.question_business_id)) AS count_2 
FROM answers JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.created_at >= %(created_at_1)s AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s AND answers.is_scored = true AND answers.assistant_type IN (%(assistant_type_1_1)s, %(assistant_type_1_2)s, %(assistant_type_1_3)s) GROUP BY answers.question_business_id 
HAVING count(distinct(answers.assistant_type)) = %(count_3)s) AS anon_1
2025-08-15 11:25:35 - sqlalchemy.engine.Engine - INFO - [cached since 4200s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'classification_1': '', 'count_3': 3, 'assistant_type_1_1': 'yoyo', 'assistant_type_1_2': 'doubao', 'assistant_type_1_3': 'xiaotian'}
2025-08-15 11:25:35 - sqlalchemy.engine.Engine - INFO - SELECT count(distinct(questions.business_id)) AS count_1 
FROM questions JOIN answers ON questions.business_id = answers.question_business_id 
WHERE questions.created_at >= %(created_at_1)s AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s AND answers.assistant_type IN (%(assistant_type_1_1)s, %(assistant_type_1_2)s) AND answers.created_at >= %(created_at_2)s
2025-08-15 11:25:35 - sqlalchemy.engine.Engine - INFO - [cached since 4200s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'classification_1': '', 'created_at_2': datetime.datetime(2025, 8, 11, 0, 0), 'assistant_type_1_1': 'doubao', 'assistant_type_1_2': 'xiaotian'}
2025-08-15 11:25:35 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.processing_status = %(processing_status_1)s AND questions.is_badcase = true) AS anon_1
2025-08-15 11:25:35 - sqlalchemy.engine.Engine - INFO - [cached since 4200s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'processing_status_1': 'scored'}
2025-08-15 11:25:35 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.processing_status = %(processing_status_1)s AND questions.badcase_review_status = %(badcase_review_status_1)s) AS anon_1
2025-08-15 11:25:35 - sqlalchemy.engine.Engine - INFO - [cached since 4200s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'processing_status_1': 'scored', 'badcase_review_status_1': 'reviewed'}
2025-08-15 11:25:35 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:25:35 - sqlalchemy.engine.Engine - INFO - [cached since 4200s ago] {'created_at_1': datetime.datetime(2025, 8, 15, 2, 25, 35, 685375)}
2025-08-15 11:25:35 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:25:35 - sqlalchemy.engine.Engine - INFO - [cached since 4200s ago] {'created_at_1': datetime.datetime(2025, 8, 14, 21, 25, 35, 685375)}
2025-08-15 11:25:35 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.updated_at >= %(updated_at_1)s AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s) AS anon_1
2025-08-15 11:25:35 - sqlalchemy.engine.Engine - INFO - [cached since 4200s ago] {'updated_at_1': datetime.datetime(2025, 8, 15, 2, 55, 35, 685375), 'classification_1': ''}
2025-08-15 11:25:35 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers JOIN questions ON answers.question_business_id = questions.business_id 
WHERE answers.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:25:35 - sqlalchemy.engine.Engine - INFO - [cached since 4200s ago] {'created_at_1': datetime.datetime(2025, 8, 15, 2, 55, 35, 685375)}
2025-08-15 11:25:35 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.updated_at >= %(updated_at_1)s AND answers.is_scored = true) AS anon_1
2025-08-15 11:25:35 - sqlalchemy.engine.Engine - INFO - [cached since 4200s ago] {'updated_at_1': datetime.datetime(2025, 8, 15, 2, 55, 35, 685375)}
2025-08-15 11:25:35 - sqlalchemy.engine.Engine - INFO - SELECT date_trunc(%(date_trunc_1)s, questions.created_at) AS day, count(questions.id) AS count 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s GROUP BY date_trunc(%(date_trunc_2)s, questions.created_at) ORDER BY day
2025-08-15 11:25:35 - sqlalchemy.engine.Engine - INFO - [cached since 4200s ago] {'date_trunc_1': 'day', 'created_at_1': datetime.datetime(2025, 8, 8, 3, 25, 35, 703622), 'date_trunc_2': 'day'}
2025-08-15 11:25:35 - sqlalchemy.engine.Engine - INFO - SELECT date_trunc(%(date_trunc_1)s, questions.updated_at) AS day, count(questions.id) AS count 
FROM questions 
WHERE questions.updated_at >= %(updated_at_1)s AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s AND questions.processing_status IN (%(processing_status_1_1)s, %(processing_status_1_2)s, %(processing_status_1_3)s) GROUP BY date_trunc(%(date_trunc_2)s, questions.updated_at) ORDER BY day
2025-08-15 11:25:35 - sqlalchemy.engine.Engine - INFO - [cached since 4200s ago] {'date_trunc_1': 'day', 'updated_at_1': datetime.datetime(2025, 8, 8, 3, 25, 35, 703622), 'classification_1': '', 'date_trunc_2': 'day', 'processing_status_1_1': 'classified', 'processing_status_1_2': 'answers_generated', 'processing_status_1_3': 'scored'}
2025-08-15 11:25:35 - sqlalchemy.engine.Engine - INFO - SELECT date_trunc(%(date_trunc_1)s, answers.created_at) AS day, count(answers.id) AS count 
FROM answers JOIN questions ON answers.question_business_id = questions.business_id 
WHERE answers.created_at >= %(created_at_1)s AND questions.created_at >= %(created_at_2)s AND answers.assistant_type IN (%(assistant_type_1_1)s, %(assistant_type_1_2)s) AND answers.is_scored = true AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s GROUP BY date_trunc(%(date_trunc_2)s, answers.created_at) ORDER BY day
2025-08-15 11:25:35 - sqlalchemy.engine.Engine - INFO - [cached since 4200s ago] {'date_trunc_1': 'day', 'created_at_1': datetime.datetime(2025, 8, 8, 3, 25, 35, 703622), 'created_at_2': datetime.datetime(2025, 8, 8, 3, 25, 35, 703622), 'classification_1': '', 'date_trunc_2': 'day', 'assistant_type_1_1': 'doubao', 'assistant_type_1_2': 'xiaotian'}
2025-08-15 11:25:35 - sqlalchemy.engine.Engine - INFO - SELECT answers.assistant_type AS answers_assistant_type, avg(scores.score_1) AS avg_score_1, avg(scores.score_2) AS avg_score_2, avg(scores.score_3) AS avg_score_3, avg(scores.score_4) AS avg_score_4, avg(scores.score_5) AS avg_score_5, avg(scores.average_score) AS avg_total, count(scores.id) AS score_count 
FROM answers JOIN scores ON answers.id = scores.answer_id GROUP BY answers.assistant_type
2025-08-15 11:25:35 - sqlalchemy.engine.Engine - INFO - [cached since 4200s ago] {}
2025-08-15 11:25:35 - sqlalchemy.engine.Engine - INFO - SELECT system_config.id AS system_config_id, system_config.config_key AS system_config_config_key, system_config.config_value AS system_config_config_value, system_config.config_type AS system_config_config_type, system_config.description AS system_config_description, system_config.effective_time AS system_config_effective_time, system_config.previous_value AS system_config_previous_value, system_config.status AS system_config_status, system_config.created_at AS system_config_created_at, system_config.updated_at AS system_config_updated_at 
FROM system_config 
WHERE system_config.config_key = %(config_key_1)s 
 LIMIT %(param_1)s
2025-08-15 11:25:35 - sqlalchemy.engine.Engine - INFO - [cached since 4200s ago] {'config_key_1': 'display.hot_categories_time_range', 'param_1': 1}
2025-08-15 11:25:35 - sqlalchemy.engine.Engine - INFO - SELECT questions.classification AS name, count(questions.id) AS count 
FROM questions 
WHERE questions.classification IS NOT NULL AND questions.classification != %(classification_1)s GROUP BY questions.classification
2025-08-15 11:25:35 - sqlalchemy.engine.Engine - INFO - [cached since 4200s ago] {'classification_1': ''}
2025-08-15 11:25:35 - sqlalchemy.engine.Engine - INFO - SELECT questions.classification AS name, count(questions.id) AS count 
FROM questions 
WHERE questions.classification IS NOT NULL AND questions.classification != %(classification_1)s AND questions.created_at >= %(created_at_1)s GROUP BY questions.classification ORDER BY count(questions.id) DESC
2025-08-15 11:25:35 - sqlalchemy.engine.Engine - INFO - [cached since 4200s ago] {'classification_1': '', 'created_at_1': datetime.datetime(2025, 8, 8, 3, 25, 35, 714909)}
2025-08-15 11:25:35 - sqlalchemy.engine.Engine - INFO - SELECT questions.classification AS name, count(questions.id) AS count 
FROM questions 
WHERE questions.classification IS NOT NULL AND questions.classification != %(classification_1)s GROUP BY questions.classification ORDER BY count(questions.id) DESC
2025-08-15 11:25:35 - sqlalchemy.engine.Engine - INFO - [cached since 4203s ago] {'classification_1': ''}
2025-08-15 11:25:35 - sqlalchemy.engine.Engine - INFO - SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions ORDER BY questions.created_at DESC 
 LIMIT %(param_1)s
2025-08-15 11:25:35 - sqlalchemy.engine.Engine - INFO - [cached since 4200s ago] {'param_1': 5}
2025-08-15 11:25:35 - sqlalchemy.engine.Engine - INFO - SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers ORDER BY answers.created_at DESC 
 LIMIT %(param_1)s
2025-08-15 11:25:35 - sqlalchemy.engine.Engine - INFO - [cached since 4200s ago] {'param_1': 5}
2025-08-15 11:25:35 - sqlalchemy.engine.Engine - INFO - SELECT scores.id AS scores_id, scores.answer_id AS scores_answer_id, scores.score_1 AS scores_score_1, scores.score_2 AS scores_score_2, scores.score_3 AS scores_score_3, scores.score_4 AS scores_score_4, scores.score_5 AS scores_score_5, scores.dimension_1_name AS scores_dimension_1_name, scores.dimension_2_name AS scores_dimension_2_name, scores.dimension_3_name AS scores_dimension_3_name, scores.dimension_4_name AS scores_dimension_4_name, scores.dimension_5_name AS scores_dimension_5_name, scores.average_score AS scores_average_score, scores.comment AS scores_comment, scores.rated_at AS scores_rated_at 
FROM scores ORDER BY scores.rated_at DESC 
 LIMIT %(param_1)s
2025-08-15 11:25:35 - sqlalchemy.engine.Engine - INFO - [cached since 4200s ago] {'param_1': 5}
2025-08-15 11:25:35 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:25:35 - sqlalchemy.engine.Engine - INFO - [cached since 4200s ago] {'created_at_1': datetime.datetime(2025, 8, 15, 3, 20, 35, 720215)}
2025-08-15 11:25:35 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:25:35 - sqlalchemy.engine.Engine - INFO - [cached since 4200s ago] {'created_at_1': datetime.datetime(2025, 8, 15, 3, 20, 35, 720215)}
2025-08-15 11:25:35 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT scores.id AS scores_id, scores.answer_id AS scores_answer_id, scores.score_1 AS scores_score_1, scores.score_2 AS scores_score_2, scores.score_3 AS scores_score_3, scores.score_4 AS scores_score_4, scores.score_5 AS scores_score_5, scores.dimension_1_name AS scores_dimension_1_name, scores.dimension_2_name AS scores_dimension_2_name, scores.dimension_3_name AS scores_dimension_3_name, scores.dimension_4_name AS scores_dimension_4_name, scores.dimension_5_name AS scores_dimension_5_name, scores.average_score AS scores_average_score, scores.comment AS scores_comment, scores.rated_at AS scores_rated_at 
FROM scores 
WHERE scores.rated_at >= %(rated_at_1)s) AS anon_1
2025-08-15 11:25:35 - sqlalchemy.engine.Engine - INFO - [cached since 4200s ago] {'rated_at_1': datetime.datetime(2025, 8, 15, 3, 20, 35, 720215)}
2025-08-15 11:25:35 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.assistant_type = %(assistant_type_1)s AND answers.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:25:35 - sqlalchemy.engine.Engine - INFO - [cached since 4200s ago] {'assistant_type_1': 'yoyo', 'created_at_1': datetime.datetime(2025, 8, 15, 3, 20, 35, 720215)}
2025-08-15 11:25:35 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.assistant_type = %(assistant_type_1)s AND answers.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:25:35 - sqlalchemy.engine.Engine - INFO - [cached since 4200s ago] {'assistant_type_1': 'doubao', 'created_at_1': datetime.datetime(2025, 8, 15, 3, 20, 35, 720215)}
2025-08-15 11:25:35 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.assistant_type = %(assistant_type_1)s AND answers.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:25:35 - sqlalchemy.engine.Engine - INFO - [cached since 4200s ago] {'assistant_type_1': 'xiaotian', 'created_at_1': datetime.datetime(2025, 8, 15, 3, 20, 35, 720215)}
2025-08-15 11:25:35 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-15 11:26:05 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-15 11:26:05 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-15 11:26:05 - sqlalchemy.engine.Engine - INFO - SELECT questions.classification AS questions_classification, count(questions.id) AS badcase_count 
FROM questions 
WHERE questions.is_badcase = true GROUP BY questions.classification ORDER BY count(questions.id) DESC 
 LIMIT %(param_1)s
2025-08-15 11:26:05 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s) AS anon_1
2025-08-15 11:26:05 - sqlalchemy.engine.Engine - INFO - [cached since 4230s ago] {'param_1': 3}
2025-08-15 11:26:05 - sqlalchemy.engine.Engine - INFO - [cached since 4230s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 17, 23, 59, 59, 999999), 'processing_status_1': 'scored'}
2025-08-15 11:26:05 - sqlalchemy.engine.Engine - INFO - 
                WITH dimension_scores AS (
                    -- 维度1的数据
                    SELECT
                        s.dimension_1_name as dimension_name,
                        s.score_1 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_1_name IS NOT NULL
                    AND s.score_1 IS NOT NULL

                    UNION ALL

                    -- 维度2的数据
                    SELECT
                        s.dimension_2_name as dimension_name,
                        s.score_2 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_2_name IS NOT NULL
                    AND s.score_2 IS NOT NULL

                    UNION ALL

                    -- 维度3的数据
                    SELECT
                        s.dimension_3_name as dimension_name,
                        s.score_3 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_3_name IS NOT NULL
                    AND s.score_3 IS NOT NULL

                    UNION ALL

                    -- 维度4的数据
                    SELECT
                        s.dimension_4_name as dimension_name,
                        s.score_4 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_4_name IS NOT NULL
                    AND s.score_4 IS NOT NULL

                    UNION ALL

                    -- 维度5的数据
                    SELECT
                        s.dimension_5_name as dimension_name,
                        s.score_5 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_5_name IS NOT NULL
                    AND s.score_5 IS NOT NULL
                )
                SELECT
                    dimension_name,
                    AVG(score) as avg_score,
                    COUNT(*) as sample_count
                FROM dimension_scores
                GROUP BY dimension_name
                ORDER BY avg_score ASC
            
2025-08-15 11:26:05 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s AND questions.is_badcase = true) AS anon_1
2025-08-15 11:26:05 - sqlalchemy.engine.Engine - INFO - [cached since 4230s ago] {'classification': '其他'}
2025-08-15 11:26:05 - sqlalchemy.engine.Engine - INFO - [cached since 4230s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 17, 23, 59, 59, 999999), 'processing_status_1': 'scored'}
2025-08-15 11:26:05 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s AND questions.is_badcase = true AND questions.badcase_review_status = %(badcase_review_status_1)s) AS anon_1
2025-08-15 11:26:05 - sqlalchemy.engine.Engine - INFO - [cached since 4230s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 17, 23, 59, 59, 999999), 'processing_status_1': 'scored', 'badcase_review_status_1': 'pending'}
2025-08-15 11:26:05 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s AND questions.badcase_review_status = %(badcase_review_status_1)s) AS anon_1
2025-08-15 11:26:05 - sqlalchemy.engine.Engine - INFO - [cached since 4230s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 17, 23, 59, 59, 999999), 'processing_status_1': 'scored', 'badcase_review_status_1': 'reviewed'}
2025-08-15 11:26:05 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s AND questions.badcase_review_status = %(badcase_review_status_1)s AND questions.is_badcase = false) AS anon_1
2025-08-15 11:26:05 - sqlalchemy.engine.Engine - INFO - [cached since 4230s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 17, 23, 59, 59, 999999), 'processing_status_1': 'scored', 'badcase_review_status_1': 'reviewed'}
2025-08-15 11:26:05 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-15 11:26:05 - sqlalchemy.engine.Engine - INFO - 
                WITH dimension_scores AS (
                    -- 维度1的数据
                    SELECT
                        s.dimension_1_name as dimension_name,
                        s.score_1 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_1_name IS NOT NULL
                    AND s.score_1 IS NOT NULL

                    UNION ALL

                    -- 维度2的数据
                    SELECT
                        s.dimension_2_name as dimension_name,
                        s.score_2 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_2_name IS NOT NULL
                    AND s.score_2 IS NOT NULL

                    UNION ALL

                    -- 维度3的数据
                    SELECT
                        s.dimension_3_name as dimension_name,
                        s.score_3 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_3_name IS NOT NULL
                    AND s.score_3 IS NOT NULL

                    UNION ALL

                    -- 维度4的数据
                    SELECT
                        s.dimension_4_name as dimension_name,
                        s.score_4 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_4_name IS NOT NULL
                    AND s.score_4 IS NOT NULL

                    UNION ALL

                    -- 维度5的数据
                    SELECT
                        s.dimension_5_name as dimension_name,
                        s.score_5 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_5_name IS NOT NULL
                    AND s.score_5 IS NOT NULL
                )
                SELECT
                    dimension_name,
                    AVG(score) as avg_score,
                    COUNT(*) as sample_count
                FROM dimension_scores
                GROUP BY dimension_name
                ORDER BY avg_score ASC
            
2025-08-15 11:26:05 - sqlalchemy.engine.Engine - INFO - [cached since 4230s ago] {'classification': '产品使用'}
2025-08-15 11:26:05 - sqlalchemy.engine.Engine - INFO - 
                WITH dimension_scores AS (
                    -- 维度1的数据
                    SELECT
                        s.dimension_1_name as dimension_name,
                        s.score_1 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_1_name IS NOT NULL
                    AND s.score_1 IS NOT NULL

                    UNION ALL

                    -- 维度2的数据
                    SELECT
                        s.dimension_2_name as dimension_name,
                        s.score_2 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_2_name IS NOT NULL
                    AND s.score_2 IS NOT NULL

                    UNION ALL

                    -- 维度3的数据
                    SELECT
                        s.dimension_3_name as dimension_name,
                        s.score_3 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_3_name IS NOT NULL
                    AND s.score_3 IS NOT NULL

                    UNION ALL

                    -- 维度4的数据
                    SELECT
                        s.dimension_4_name as dimension_name,
                        s.score_4 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_4_name IS NOT NULL
                    AND s.score_4 IS NOT NULL

                    UNION ALL

                    -- 维度5的数据
                    SELECT
                        s.dimension_5_name as dimension_name,
                        s.score_5 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_5_name IS NOT NULL
                    AND s.score_5 IS NOT NULL
                )
                SELECT
                    dimension_name,
                    AVG(score) as avg_score,
                    COUNT(*) as sample_count
                FROM dimension_scores
                GROUP BY dimension_name
                ORDER BY avg_score ASC
            
2025-08-15 11:26:05 - sqlalchemy.engine.Engine - INFO - [cached since 4230s ago] {'classification': '功能建议'}
2025-08-15 11:26:05 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-15 11:26:05 - app.api.word_analysis_api - INFO - 获取词云数据请求: time_range=week, limit=40
2025-08-15 11:26:05 - app.api.word_analysis_api - INFO - 获取词云数据请求: time_range=week, limit=40
2025-08-15 11:26:05 - app.services.word_analysis_service - INFO - 开始获取热词分析数据，时间范围: week, 限制: 40
2025-08-15 11:26:05 - app.services.word_analysis_service - INFO - 开始获取热词分析数据，时间范围: week, 限制: 40
2025-08-15 11:26:05 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-15 11:26:05 - sqlalchemy.engine.Engine - INFO - SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.query IS NOT NULL AND questions.query != %(query_1)s AND questions.is_deleted = false
2025-08-15 11:26:05 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-15 11:26:05 - sqlalchemy.engine.Engine - INFO - [cached since 4230s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 17, 23, 59, 59, 999999), 'query_1': ''}
2025-08-15 11:26:05 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions) AS anon_1
2025-08-15 11:26:05 - sqlalchemy.engine.Engine - INFO - [cached since 4233s ago] {}
2025-08-15 11:26:05 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:26:05 - app.services.word_analysis_service - INFO - 查询到 260 个问题，时间范围: 2025-08-11 00:00:00 至 2025-08-17 23:59:59.999999
2025-08-15 11:26:05 - sqlalchemy.engine.Engine - INFO - [cached since 4230s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0)}
2025-08-15 11:26:05 - app.services.word_analysis_service - INFO - 查询到 260 个问题，时间范围: 2025-08-11 00:00:00 至 2025-08-17 23:59:59.999999
2025-08-15 11:26:05 - app.services.word_analysis_service - INFO - 问题样本 1: 为什么支付失败了？...
2025-08-15 11:26:05 - app.services.word_analysis_service - INFO - 问题样本 1: 为什么支付失败了？...
2025-08-15 11:26:05 - app.services.word_analysis_service - INFO - 问题样本 2: 数据统计在哪里可以找到？...
2025-08-15 11:26:05 - app.services.word_analysis_service - INFO - 问题样本 2: 数据统计在哪里可以找到？...
2025-08-15 11:26:05 - app.services.word_analysis_service - INFO - 问题样本 3: 如何更新个人信息？...
2025-08-15 11:26:05 - app.services.word_analysis_service - INFO - 问题样本 3: 如何更新个人信息？...
2025-08-15 11:26:05 - app.services.word_analysis_service - INFO - 有效问题文本数: 260, 总文本长度: 2914
2025-08-15 11:26:05 - app.services.word_analysis_service - INFO - 有效问题文本数: 260, 总文本长度: 2914
2025-08-15 11:26:05 - app.services.word_analysis_service - INFO - 文本分析完成，原始词汇: 1755, 过滤后: 653, 唯一词汇: 58
2025-08-15 11:26:05 - app.services.word_analysis_service - INFO - 文本分析完成，原始词汇: 1755, 过滤后: 653, 唯一词汇: 58
2025-08-15 11:26:05 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s) AS anon_1
2025-08-15 11:26:05 - app.services.word_analysis_service - INFO - 热词分析完成，共分析 260 个问题，生成 40 个热词
2025-08-15 11:26:05 - app.services.word_analysis_service - INFO - 热词分析完成，共分析 260 个问题，生成 40 个热词
2025-08-15 11:26:05 - sqlalchemy.engine.Engine - INFO - [cached since 4230s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'classification_1': ''}
2025-08-15 11:26:05 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-15 11:26:05 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.classification IS NOT NULL AND questions.classification != %(classification_1)s) AS anon_1
2025-08-15 11:26:05 - sqlalchemy.engine.Engine - INFO - [cached since 4230s ago] {'classification_1': ''}
2025-08-15 11:26:05 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT access_logs.id AS access_logs_id, access_logs.user_id AS access_logs_user_id, access_logs.username AS access_logs_username, access_logs.action AS access_logs_action, access_logs.ip_address AS access_logs_ip_address, access_logs.created_at AS access_logs_created_at 
FROM access_logs 
WHERE access_logs.action = %(action_1)s) AS anon_1
2025-08-15 11:26:05 - sqlalchemy.engine.Engine - INFO - [cached since 4230s ago] {'action_1': 'login'}
2025-08-15 11:26:05 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT access_logs.id AS access_logs_id, access_logs.user_id AS access_logs_user_id, access_logs.username AS access_logs_username, access_logs.action AS access_logs_action, access_logs.ip_address AS access_logs_ip_address, access_logs.created_at AS access_logs_created_at 
FROM access_logs 
WHERE access_logs.action = %(action_1)s AND access_logs.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:26:05 - sqlalchemy.engine.Engine - INFO - [cached since 4230s ago] {'action_1': 'login', 'created_at_1': datetime.datetime(2025, 8, 11, 0, 0)}
2025-08-15 11:26:05 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:26:05 - sqlalchemy.engine.Engine - INFO - [cached since 4230s ago] {'created_at_1': datetime.datetime(2025, 8, 15, 0, 0)}
2025-08-15 11:26:05 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:26:05 - sqlalchemy.engine.Engine - INFO - [cached since 4230s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0)}
2025-08-15 11:26:05 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s) AS anon_1
2025-08-15 11:26:05 - sqlalchemy.engine.Engine - INFO - [cached since 4230s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'classification_1': ''}
2025-08-15 11:26:05 - sqlalchemy.engine.Engine - INFO - SELECT coalesce(sum(least(anon_1.cnt, %(least_1)s)), %(coalesce_2)s) AS coalesce_1 
FROM (SELECT answers.question_business_id AS qbid, count(answers.id) AS cnt 
FROM answers JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.created_at >= %(created_at_1)s AND answers.created_at >= %(created_at_2)s AND answers.assistant_type IN (%(assistant_type_1_1)s, %(assistant_type_1_2)s) AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s GROUP BY answers.question_business_id) AS anon_1
2025-08-15 11:26:05 - sqlalchemy.engine.Engine - INFO - [cached since 4230s ago] {'least_1': 2, 'coalesce_2': 0, 'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 11, 0, 0), 'classification_1': '', 'assistant_type_1_1': 'doubao', 'assistant_type_1_2': 'xiaotian'}
2025-08-15 11:26:05 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT count(distinct(answers.question_business_id)) AS count_2 
FROM answers JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.created_at >= %(created_at_1)s AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s AND answers.is_scored = true AND answers.assistant_type IN (%(assistant_type_1_1)s, %(assistant_type_1_2)s, %(assistant_type_1_3)s) GROUP BY answers.question_business_id 
HAVING count(distinct(answers.assistant_type)) = %(count_3)s) AS anon_1
2025-08-15 11:26:05 - sqlalchemy.engine.Engine - INFO - [cached since 4230s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'classification_1': '', 'count_3': 3, 'assistant_type_1_1': 'yoyo', 'assistant_type_1_2': 'doubao', 'assistant_type_1_3': 'xiaotian'}
2025-08-15 11:26:05 - sqlalchemy.engine.Engine - INFO - SELECT count(distinct(questions.business_id)) AS count_1 
FROM questions JOIN answers ON questions.business_id = answers.question_business_id 
WHERE questions.created_at >= %(created_at_1)s AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s AND answers.assistant_type IN (%(assistant_type_1_1)s, %(assistant_type_1_2)s) AND answers.created_at >= %(created_at_2)s
2025-08-15 11:26:05 - sqlalchemy.engine.Engine - INFO - [cached since 4230s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'classification_1': '', 'created_at_2': datetime.datetime(2025, 8, 11, 0, 0), 'assistant_type_1_1': 'doubao', 'assistant_type_1_2': 'xiaotian'}
2025-08-15 11:26:05 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.processing_status = %(processing_status_1)s AND questions.is_badcase = true) AS anon_1
2025-08-15 11:26:05 - sqlalchemy.engine.Engine - INFO - [cached since 4230s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'processing_status_1': 'scored'}
2025-08-15 11:26:05 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.processing_status = %(processing_status_1)s AND questions.badcase_review_status = %(badcase_review_status_1)s) AS anon_1
2025-08-15 11:26:05 - sqlalchemy.engine.Engine - INFO - [cached since 4230s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'processing_status_1': 'scored', 'badcase_review_status_1': 'reviewed'}
2025-08-15 11:26:05 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:26:05 - sqlalchemy.engine.Engine - INFO - [cached since 4230s ago] {'created_at_1': datetime.datetime(2025, 8, 15, 2, 26, 5, 704938)}
2025-08-15 11:26:05 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:26:05 - sqlalchemy.engine.Engine - INFO - [cached since 4230s ago] {'created_at_1': datetime.datetime(2025, 8, 14, 21, 26, 5, 704938)}
2025-08-15 11:26:05 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.updated_at >= %(updated_at_1)s AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s) AS anon_1
2025-08-15 11:26:05 - sqlalchemy.engine.Engine - INFO - [cached since 4230s ago] {'updated_at_1': datetime.datetime(2025, 8, 15, 2, 56, 5, 704938), 'classification_1': ''}
2025-08-15 11:26:05 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers JOIN questions ON answers.question_business_id = questions.business_id 
WHERE answers.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:26:05 - sqlalchemy.engine.Engine - INFO - [cached since 4230s ago] {'created_at_1': datetime.datetime(2025, 8, 15, 2, 56, 5, 704938)}
2025-08-15 11:26:05 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.updated_at >= %(updated_at_1)s AND answers.is_scored = true) AS anon_1
2025-08-15 11:26:05 - sqlalchemy.engine.Engine - INFO - [cached since 4230s ago] {'updated_at_1': datetime.datetime(2025, 8, 15, 2, 56, 5, 704938)}
2025-08-15 11:26:05 - sqlalchemy.engine.Engine - INFO - SELECT date_trunc(%(date_trunc_1)s, questions.created_at) AS day, count(questions.id) AS count 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s GROUP BY date_trunc(%(date_trunc_2)s, questions.created_at) ORDER BY day
2025-08-15 11:26:05 - sqlalchemy.engine.Engine - INFO - [cached since 4230s ago] {'date_trunc_1': 'day', 'created_at_1': datetime.datetime(2025, 8, 8, 3, 26, 5, 723551), 'date_trunc_2': 'day'}
2025-08-15 11:26:05 - sqlalchemy.engine.Engine - INFO - SELECT date_trunc(%(date_trunc_1)s, questions.updated_at) AS day, count(questions.id) AS count 
FROM questions 
WHERE questions.updated_at >= %(updated_at_1)s AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s AND questions.processing_status IN (%(processing_status_1_1)s, %(processing_status_1_2)s, %(processing_status_1_3)s) GROUP BY date_trunc(%(date_trunc_2)s, questions.updated_at) ORDER BY day
2025-08-15 11:26:05 - sqlalchemy.engine.Engine - INFO - [cached since 4230s ago] {'date_trunc_1': 'day', 'updated_at_1': datetime.datetime(2025, 8, 8, 3, 26, 5, 723551), 'classification_1': '', 'date_trunc_2': 'day', 'processing_status_1_1': 'classified', 'processing_status_1_2': 'answers_generated', 'processing_status_1_3': 'scored'}
2025-08-15 11:26:05 - sqlalchemy.engine.Engine - INFO - SELECT date_trunc(%(date_trunc_1)s, answers.created_at) AS day, count(answers.id) AS count 
FROM answers JOIN questions ON answers.question_business_id = questions.business_id 
WHERE answers.created_at >= %(created_at_1)s AND questions.created_at >= %(created_at_2)s AND answers.assistant_type IN (%(assistant_type_1_1)s, %(assistant_type_1_2)s) AND answers.is_scored = true AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s GROUP BY date_trunc(%(date_trunc_2)s, answers.created_at) ORDER BY day
2025-08-15 11:26:05 - sqlalchemy.engine.Engine - INFO - [cached since 4230s ago] {'date_trunc_1': 'day', 'created_at_1': datetime.datetime(2025, 8, 8, 3, 26, 5, 723551), 'created_at_2': datetime.datetime(2025, 8, 8, 3, 26, 5, 723551), 'classification_1': '', 'date_trunc_2': 'day', 'assistant_type_1_1': 'doubao', 'assistant_type_1_2': 'xiaotian'}
2025-08-15 11:26:05 - sqlalchemy.engine.Engine - INFO - SELECT answers.assistant_type AS answers_assistant_type, avg(scores.score_1) AS avg_score_1, avg(scores.score_2) AS avg_score_2, avg(scores.score_3) AS avg_score_3, avg(scores.score_4) AS avg_score_4, avg(scores.score_5) AS avg_score_5, avg(scores.average_score) AS avg_total, count(scores.id) AS score_count 
FROM answers JOIN scores ON answers.id = scores.answer_id GROUP BY answers.assistant_type
2025-08-15 11:26:05 - sqlalchemy.engine.Engine - INFO - [cached since 4230s ago] {}
2025-08-15 11:26:05 - sqlalchemy.engine.Engine - INFO - SELECT system_config.id AS system_config_id, system_config.config_key AS system_config_config_key, system_config.config_value AS system_config_config_value, system_config.config_type AS system_config_config_type, system_config.description AS system_config_description, system_config.effective_time AS system_config_effective_time, system_config.previous_value AS system_config_previous_value, system_config.status AS system_config_status, system_config.created_at AS system_config_created_at, system_config.updated_at AS system_config_updated_at 
FROM system_config 
WHERE system_config.config_key = %(config_key_1)s 
 LIMIT %(param_1)s
2025-08-15 11:26:05 - sqlalchemy.engine.Engine - INFO - [cached since 4230s ago] {'config_key_1': 'display.hot_categories_time_range', 'param_1': 1}
2025-08-15 11:26:05 - sqlalchemy.engine.Engine - INFO - SELECT questions.classification AS name, count(questions.id) AS count 
FROM questions 
WHERE questions.classification IS NOT NULL AND questions.classification != %(classification_1)s GROUP BY questions.classification
2025-08-15 11:26:05 - sqlalchemy.engine.Engine - INFO - [cached since 4230s ago] {'classification_1': ''}
2025-08-15 11:26:05 - sqlalchemy.engine.Engine - INFO - SELECT questions.classification AS name, count(questions.id) AS count 
FROM questions 
WHERE questions.classification IS NOT NULL AND questions.classification != %(classification_1)s AND questions.created_at >= %(created_at_1)s GROUP BY questions.classification ORDER BY count(questions.id) DESC
2025-08-15 11:26:05 - sqlalchemy.engine.Engine - INFO - [cached since 4230s ago] {'classification_1': '', 'created_at_1': datetime.datetime(2025, 8, 8, 3, 26, 5, 801162)}
2025-08-15 11:26:05 - sqlalchemy.engine.Engine - INFO - SELECT questions.classification AS name, count(questions.id) AS count 
FROM questions 
WHERE questions.classification IS NOT NULL AND questions.classification != %(classification_1)s GROUP BY questions.classification ORDER BY count(questions.id) DESC
2025-08-15 11:26:05 - sqlalchemy.engine.Engine - INFO - [cached since 4233s ago] {'classification_1': ''}
2025-08-15 11:26:05 - sqlalchemy.engine.Engine - INFO - SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions ORDER BY questions.created_at DESC 
 LIMIT %(param_1)s
2025-08-15 11:26:05 - sqlalchemy.engine.Engine - INFO - [cached since 4230s ago] {'param_1': 5}
2025-08-15 11:26:05 - sqlalchemy.engine.Engine - INFO - SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers ORDER BY answers.created_at DESC 
 LIMIT %(param_1)s
2025-08-15 11:26:05 - sqlalchemy.engine.Engine - INFO - [cached since 4230s ago] {'param_1': 5}
2025-08-15 11:26:05 - sqlalchemy.engine.Engine - INFO - SELECT scores.id AS scores_id, scores.answer_id AS scores_answer_id, scores.score_1 AS scores_score_1, scores.score_2 AS scores_score_2, scores.score_3 AS scores_score_3, scores.score_4 AS scores_score_4, scores.score_5 AS scores_score_5, scores.dimension_1_name AS scores_dimension_1_name, scores.dimension_2_name AS scores_dimension_2_name, scores.dimension_3_name AS scores_dimension_3_name, scores.dimension_4_name AS scores_dimension_4_name, scores.dimension_5_name AS scores_dimension_5_name, scores.average_score AS scores_average_score, scores.comment AS scores_comment, scores.rated_at AS scores_rated_at 
FROM scores ORDER BY scores.rated_at DESC 
 LIMIT %(param_1)s
2025-08-15 11:26:05 - sqlalchemy.engine.Engine - INFO - [cached since 4230s ago] {'param_1': 5}
2025-08-15 11:26:05 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:26:05 - sqlalchemy.engine.Engine - INFO - [cached since 4230s ago] {'created_at_1': datetime.datetime(2025, 8, 15, 3, 21, 5, 808389)}
2025-08-15 11:26:05 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:26:05 - sqlalchemy.engine.Engine - INFO - [cached since 4230s ago] {'created_at_1': datetime.datetime(2025, 8, 15, 3, 21, 5, 808389)}
2025-08-15 11:26:05 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT scores.id AS scores_id, scores.answer_id AS scores_answer_id, scores.score_1 AS scores_score_1, scores.score_2 AS scores_score_2, scores.score_3 AS scores_score_3, scores.score_4 AS scores_score_4, scores.score_5 AS scores_score_5, scores.dimension_1_name AS scores_dimension_1_name, scores.dimension_2_name AS scores_dimension_2_name, scores.dimension_3_name AS scores_dimension_3_name, scores.dimension_4_name AS scores_dimension_4_name, scores.dimension_5_name AS scores_dimension_5_name, scores.average_score AS scores_average_score, scores.comment AS scores_comment, scores.rated_at AS scores_rated_at 
FROM scores 
WHERE scores.rated_at >= %(rated_at_1)s) AS anon_1
2025-08-15 11:26:05 - sqlalchemy.engine.Engine - INFO - [cached since 4230s ago] {'rated_at_1': datetime.datetime(2025, 8, 15, 3, 21, 5, 808389)}
2025-08-15 11:26:05 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.assistant_type = %(assistant_type_1)s AND answers.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:26:05 - sqlalchemy.engine.Engine - INFO - [cached since 4230s ago] {'assistant_type_1': 'yoyo', 'created_at_1': datetime.datetime(2025, 8, 15, 3, 21, 5, 808389)}
2025-08-15 11:26:05 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.assistant_type = %(assistant_type_1)s AND answers.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:26:05 - sqlalchemy.engine.Engine - INFO - [cached since 4230s ago] {'assistant_type_1': 'doubao', 'created_at_1': datetime.datetime(2025, 8, 15, 3, 21, 5, 808389)}
2025-08-15 11:26:05 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.assistant_type = %(assistant_type_1)s AND answers.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:26:05 - sqlalchemy.engine.Engine - INFO - [cached since 4230s ago] {'assistant_type_1': 'xiaotian', 'created_at_1': datetime.datetime(2025, 8, 15, 3, 21, 5, 808389)}
2025-08-15 11:26:05 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-15 11:26:35 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-15 11:26:35 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-15 11:26:35 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s) AS anon_1
2025-08-15 11:26:35 - sqlalchemy.engine.Engine - INFO - SELECT questions.classification AS questions_classification, count(questions.id) AS badcase_count 
FROM questions 
WHERE questions.is_badcase = true GROUP BY questions.classification ORDER BY count(questions.id) DESC 
 LIMIT %(param_1)s
2025-08-15 11:26:35 - sqlalchemy.engine.Engine - INFO - [cached since 4260s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 17, 23, 59, 59, 999999), 'processing_status_1': 'scored'}
2025-08-15 11:26:35 - sqlalchemy.engine.Engine - INFO - [cached since 4260s ago] {'param_1': 3}
2025-08-15 11:26:35 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s AND questions.is_badcase = true) AS anon_1
2025-08-15 11:26:35 - sqlalchemy.engine.Engine - INFO - 
                WITH dimension_scores AS (
                    -- 维度1的数据
                    SELECT
                        s.dimension_1_name as dimension_name,
                        s.score_1 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_1_name IS NOT NULL
                    AND s.score_1 IS NOT NULL

                    UNION ALL

                    -- 维度2的数据
                    SELECT
                        s.dimension_2_name as dimension_name,
                        s.score_2 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_2_name IS NOT NULL
                    AND s.score_2 IS NOT NULL

                    UNION ALL

                    -- 维度3的数据
                    SELECT
                        s.dimension_3_name as dimension_name,
                        s.score_3 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_3_name IS NOT NULL
                    AND s.score_3 IS NOT NULL

                    UNION ALL

                    -- 维度4的数据
                    SELECT
                        s.dimension_4_name as dimension_name,
                        s.score_4 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_4_name IS NOT NULL
                    AND s.score_4 IS NOT NULL

                    UNION ALL

                    -- 维度5的数据
                    SELECT
                        s.dimension_5_name as dimension_name,
                        s.score_5 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_5_name IS NOT NULL
                    AND s.score_5 IS NOT NULL
                )
                SELECT
                    dimension_name,
                    AVG(score) as avg_score,
                    COUNT(*) as sample_count
                FROM dimension_scores
                GROUP BY dimension_name
                ORDER BY avg_score ASC
            
2025-08-15 11:26:35 - sqlalchemy.engine.Engine - INFO - [cached since 4260s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 17, 23, 59, 59, 999999), 'processing_status_1': 'scored'}
2025-08-15 11:26:35 - sqlalchemy.engine.Engine - INFO - [cached since 4260s ago] {'classification': '其他'}
2025-08-15 11:26:35 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s AND questions.is_badcase = true AND questions.badcase_review_status = %(badcase_review_status_1)s) AS anon_1
2025-08-15 11:26:35 - sqlalchemy.engine.Engine - INFO - [cached since 4260s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 17, 23, 59, 59, 999999), 'processing_status_1': 'scored', 'badcase_review_status_1': 'pending'}
2025-08-15 11:26:35 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s AND questions.badcase_review_status = %(badcase_review_status_1)s) AS anon_1
2025-08-15 11:26:35 - sqlalchemy.engine.Engine - INFO - [cached since 4260s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 17, 23, 59, 59, 999999), 'processing_status_1': 'scored', 'badcase_review_status_1': 'reviewed'}
2025-08-15 11:26:35 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s AND questions.badcase_review_status = %(badcase_review_status_1)s AND questions.is_badcase = false) AS anon_1
2025-08-15 11:26:35 - sqlalchemy.engine.Engine - INFO - [cached since 4260s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 17, 23, 59, 59, 999999), 'processing_status_1': 'scored', 'badcase_review_status_1': 'reviewed'}
2025-08-15 11:26:35 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-15 11:26:35 - sqlalchemy.engine.Engine - INFO - 
                WITH dimension_scores AS (
                    -- 维度1的数据
                    SELECT
                        s.dimension_1_name as dimension_name,
                        s.score_1 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_1_name IS NOT NULL
                    AND s.score_1 IS NOT NULL

                    UNION ALL

                    -- 维度2的数据
                    SELECT
                        s.dimension_2_name as dimension_name,
                        s.score_2 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_2_name IS NOT NULL
                    AND s.score_2 IS NOT NULL

                    UNION ALL

                    -- 维度3的数据
                    SELECT
                        s.dimension_3_name as dimension_name,
                        s.score_3 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_3_name IS NOT NULL
                    AND s.score_3 IS NOT NULL

                    UNION ALL

                    -- 维度4的数据
                    SELECT
                        s.dimension_4_name as dimension_name,
                        s.score_4 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_4_name IS NOT NULL
                    AND s.score_4 IS NOT NULL

                    UNION ALL

                    -- 维度5的数据
                    SELECT
                        s.dimension_5_name as dimension_name,
                        s.score_5 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_5_name IS NOT NULL
                    AND s.score_5 IS NOT NULL
                )
                SELECT
                    dimension_name,
                    AVG(score) as avg_score,
                    COUNT(*) as sample_count
                FROM dimension_scores
                GROUP BY dimension_name
                ORDER BY avg_score ASC
            
2025-08-15 11:26:35 - sqlalchemy.engine.Engine - INFO - [cached since 4260s ago] {'classification': '产品使用'}
2025-08-15 11:26:35 - sqlalchemy.engine.Engine - INFO - 
                WITH dimension_scores AS (
                    -- 维度1的数据
                    SELECT
                        s.dimension_1_name as dimension_name,
                        s.score_1 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_1_name IS NOT NULL
                    AND s.score_1 IS NOT NULL

                    UNION ALL

                    -- 维度2的数据
                    SELECT
                        s.dimension_2_name as dimension_name,
                        s.score_2 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_2_name IS NOT NULL
                    AND s.score_2 IS NOT NULL

                    UNION ALL

                    -- 维度3的数据
                    SELECT
                        s.dimension_3_name as dimension_name,
                        s.score_3 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_3_name IS NOT NULL
                    AND s.score_3 IS NOT NULL

                    UNION ALL

                    -- 维度4的数据
                    SELECT
                        s.dimension_4_name as dimension_name,
                        s.score_4 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_4_name IS NOT NULL
                    AND s.score_4 IS NOT NULL

                    UNION ALL

                    -- 维度5的数据
                    SELECT
                        s.dimension_5_name as dimension_name,
                        s.score_5 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_5_name IS NOT NULL
                    AND s.score_5 IS NOT NULL
                )
                SELECT
                    dimension_name,
                    AVG(score) as avg_score,
                    COUNT(*) as sample_count
                FROM dimension_scores
                GROUP BY dimension_name
                ORDER BY avg_score ASC
            
2025-08-15 11:26:35 - sqlalchemy.engine.Engine - INFO - [cached since 4260s ago] {'classification': '功能建议'}
2025-08-15 11:26:35 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-15 11:26:35 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-15 11:26:35 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions) AS anon_1
2025-08-15 11:26:35 - sqlalchemy.engine.Engine - INFO - [cached since 4263s ago] {}
2025-08-15 11:26:35 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:26:35 - sqlalchemy.engine.Engine - INFO - [cached since 4260s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0)}
2025-08-15 11:26:35 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s) AS anon_1
2025-08-15 11:26:35 - sqlalchemy.engine.Engine - INFO - [cached since 4260s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'classification_1': ''}
2025-08-15 11:26:35 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.classification IS NOT NULL AND questions.classification != %(classification_1)s) AS anon_1
2025-08-15 11:26:35 - sqlalchemy.engine.Engine - INFO - [cached since 4260s ago] {'classification_1': ''}
2025-08-15 11:26:35 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT access_logs.id AS access_logs_id, access_logs.user_id AS access_logs_user_id, access_logs.username AS access_logs_username, access_logs.action AS access_logs_action, access_logs.ip_address AS access_logs_ip_address, access_logs.created_at AS access_logs_created_at 
FROM access_logs 
WHERE access_logs.action = %(action_1)s) AS anon_1
2025-08-15 11:26:35 - sqlalchemy.engine.Engine - INFO - [cached since 4260s ago] {'action_1': 'login'}
2025-08-15 11:26:35 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT access_logs.id AS access_logs_id, access_logs.user_id AS access_logs_user_id, access_logs.username AS access_logs_username, access_logs.action AS access_logs_action, access_logs.ip_address AS access_logs_ip_address, access_logs.created_at AS access_logs_created_at 
FROM access_logs 
WHERE access_logs.action = %(action_1)s AND access_logs.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:26:35 - sqlalchemy.engine.Engine - INFO - [cached since 4260s ago] {'action_1': 'login', 'created_at_1': datetime.datetime(2025, 8, 11, 0, 0)}
2025-08-15 11:26:35 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:26:35 - sqlalchemy.engine.Engine - INFO - [cached since 4260s ago] {'created_at_1': datetime.datetime(2025, 8, 15, 0, 0)}
2025-08-15 11:26:35 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:26:35 - sqlalchemy.engine.Engine - INFO - [cached since 4260s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0)}
2025-08-15 11:26:35 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s) AS anon_1
2025-08-15 11:26:35 - sqlalchemy.engine.Engine - INFO - [cached since 4260s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'classification_1': ''}
2025-08-15 11:26:35 - sqlalchemy.engine.Engine - INFO - SELECT coalesce(sum(least(anon_1.cnt, %(least_1)s)), %(coalesce_2)s) AS coalesce_1 
FROM (SELECT answers.question_business_id AS qbid, count(answers.id) AS cnt 
FROM answers JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.created_at >= %(created_at_1)s AND answers.created_at >= %(created_at_2)s AND answers.assistant_type IN (%(assistant_type_1_1)s, %(assistant_type_1_2)s) AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s GROUP BY answers.question_business_id) AS anon_1
2025-08-15 11:26:35 - sqlalchemy.engine.Engine - INFO - [cached since 4260s ago] {'least_1': 2, 'coalesce_2': 0, 'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 11, 0, 0), 'classification_1': '', 'assistant_type_1_1': 'doubao', 'assistant_type_1_2': 'xiaotian'}
2025-08-15 11:26:35 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT count(distinct(answers.question_business_id)) AS count_2 
FROM answers JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.created_at >= %(created_at_1)s AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s AND answers.is_scored = true AND answers.assistant_type IN (%(assistant_type_1_1)s, %(assistant_type_1_2)s, %(assistant_type_1_3)s) GROUP BY answers.question_business_id 
HAVING count(distinct(answers.assistant_type)) = %(count_3)s) AS anon_1
2025-08-15 11:26:35 - sqlalchemy.engine.Engine - INFO - [cached since 4260s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'classification_1': '', 'count_3': 3, 'assistant_type_1_1': 'yoyo', 'assistant_type_1_2': 'doubao', 'assistant_type_1_3': 'xiaotian'}
2025-08-15 11:26:35 - sqlalchemy.engine.Engine - INFO - SELECT count(distinct(questions.business_id)) AS count_1 
FROM questions JOIN answers ON questions.business_id = answers.question_business_id 
WHERE questions.created_at >= %(created_at_1)s AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s AND answers.assistant_type IN (%(assistant_type_1_1)s, %(assistant_type_1_2)s) AND answers.created_at >= %(created_at_2)s
2025-08-15 11:26:35 - sqlalchemy.engine.Engine - INFO - [cached since 4260s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'classification_1': '', 'created_at_2': datetime.datetime(2025, 8, 11, 0, 0), 'assistant_type_1_1': 'doubao', 'assistant_type_1_2': 'xiaotian'}
2025-08-15 11:26:35 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.processing_status = %(processing_status_1)s AND questions.is_badcase = true) AS anon_1
2025-08-15 11:26:35 - sqlalchemy.engine.Engine - INFO - [cached since 4260s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'processing_status_1': 'scored'}
2025-08-15 11:26:35 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.processing_status = %(processing_status_1)s AND questions.badcase_review_status = %(badcase_review_status_1)s) AS anon_1
2025-08-15 11:26:35 - sqlalchemy.engine.Engine - INFO - [cached since 4260s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'processing_status_1': 'scored', 'badcase_review_status_1': 'reviewed'}
2025-08-15 11:26:35 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:26:35 - sqlalchemy.engine.Engine - INFO - [cached since 4260s ago] {'created_at_1': datetime.datetime(2025, 8, 15, 2, 26, 35, 690835)}
2025-08-15 11:26:35 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:26:35 - sqlalchemy.engine.Engine - INFO - [cached since 4260s ago] {'created_at_1': datetime.datetime(2025, 8, 14, 21, 26, 35, 690835)}
2025-08-15 11:26:35 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.updated_at >= %(updated_at_1)s AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s) AS anon_1
2025-08-15 11:26:35 - sqlalchemy.engine.Engine - INFO - [cached since 4260s ago] {'updated_at_1': datetime.datetime(2025, 8, 15, 2, 56, 35, 690835), 'classification_1': ''}
2025-08-15 11:26:35 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers JOIN questions ON answers.question_business_id = questions.business_id 
WHERE answers.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:26:35 - sqlalchemy.engine.Engine - INFO - [cached since 4260s ago] {'created_at_1': datetime.datetime(2025, 8, 15, 2, 56, 35, 690835)}
2025-08-15 11:26:35 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.updated_at >= %(updated_at_1)s AND answers.is_scored = true) AS anon_1
2025-08-15 11:26:35 - sqlalchemy.engine.Engine - INFO - [cached since 4260s ago] {'updated_at_1': datetime.datetime(2025, 8, 15, 2, 56, 35, 690835)}
2025-08-15 11:26:35 - sqlalchemy.engine.Engine - INFO - SELECT date_trunc(%(date_trunc_1)s, questions.created_at) AS day, count(questions.id) AS count 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s GROUP BY date_trunc(%(date_trunc_2)s, questions.created_at) ORDER BY day
2025-08-15 11:26:35 - sqlalchemy.engine.Engine - INFO - [cached since 4260s ago] {'date_trunc_1': 'day', 'created_at_1': datetime.datetime(2025, 8, 8, 3, 26, 35, 708653), 'date_trunc_2': 'day'}
2025-08-15 11:26:35 - sqlalchemy.engine.Engine - INFO - SELECT date_trunc(%(date_trunc_1)s, questions.updated_at) AS day, count(questions.id) AS count 
FROM questions 
WHERE questions.updated_at >= %(updated_at_1)s AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s AND questions.processing_status IN (%(processing_status_1_1)s, %(processing_status_1_2)s, %(processing_status_1_3)s) GROUP BY date_trunc(%(date_trunc_2)s, questions.updated_at) ORDER BY day
2025-08-15 11:26:35 - sqlalchemy.engine.Engine - INFO - [cached since 4260s ago] {'date_trunc_1': 'day', 'updated_at_1': datetime.datetime(2025, 8, 8, 3, 26, 35, 708653), 'classification_1': '', 'date_trunc_2': 'day', 'processing_status_1_1': 'classified', 'processing_status_1_2': 'answers_generated', 'processing_status_1_3': 'scored'}
2025-08-15 11:26:35 - sqlalchemy.engine.Engine - INFO - SELECT date_trunc(%(date_trunc_1)s, answers.created_at) AS day, count(answers.id) AS count 
FROM answers JOIN questions ON answers.question_business_id = questions.business_id 
WHERE answers.created_at >= %(created_at_1)s AND questions.created_at >= %(created_at_2)s AND answers.assistant_type IN (%(assistant_type_1_1)s, %(assistant_type_1_2)s) AND answers.is_scored = true AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s GROUP BY date_trunc(%(date_trunc_2)s, answers.created_at) ORDER BY day
2025-08-15 11:26:35 - sqlalchemy.engine.Engine - INFO - [cached since 4260s ago] {'date_trunc_1': 'day', 'created_at_1': datetime.datetime(2025, 8, 8, 3, 26, 35, 708653), 'created_at_2': datetime.datetime(2025, 8, 8, 3, 26, 35, 708653), 'classification_1': '', 'date_trunc_2': 'day', 'assistant_type_1_1': 'doubao', 'assistant_type_1_2': 'xiaotian'}
2025-08-15 11:26:35 - sqlalchemy.engine.Engine - INFO - SELECT answers.assistant_type AS answers_assistant_type, avg(scores.score_1) AS avg_score_1, avg(scores.score_2) AS avg_score_2, avg(scores.score_3) AS avg_score_3, avg(scores.score_4) AS avg_score_4, avg(scores.score_5) AS avg_score_5, avg(scores.average_score) AS avg_total, count(scores.id) AS score_count 
FROM answers JOIN scores ON answers.id = scores.answer_id GROUP BY answers.assistant_type
2025-08-15 11:26:35 - sqlalchemy.engine.Engine - INFO - [cached since 4260s ago] {}
2025-08-15 11:26:35 - sqlalchemy.engine.Engine - INFO - SELECT system_config.id AS system_config_id, system_config.config_key AS system_config_config_key, system_config.config_value AS system_config_config_value, system_config.config_type AS system_config_config_type, system_config.description AS system_config_description, system_config.effective_time AS system_config_effective_time, system_config.previous_value AS system_config_previous_value, system_config.status AS system_config_status, system_config.created_at AS system_config_created_at, system_config.updated_at AS system_config_updated_at 
FROM system_config 
WHERE system_config.config_key = %(config_key_1)s 
 LIMIT %(param_1)s
2025-08-15 11:26:35 - sqlalchemy.engine.Engine - INFO - [cached since 4260s ago] {'config_key_1': 'display.hot_categories_time_range', 'param_1': 1}
2025-08-15 11:26:35 - sqlalchemy.engine.Engine - INFO - SELECT questions.classification AS name, count(questions.id) AS count 
FROM questions 
WHERE questions.classification IS NOT NULL AND questions.classification != %(classification_1)s GROUP BY questions.classification
2025-08-15 11:26:35 - sqlalchemy.engine.Engine - INFO - [cached since 4260s ago] {'classification_1': ''}
2025-08-15 11:26:35 - sqlalchemy.engine.Engine - INFO - SELECT questions.classification AS name, count(questions.id) AS count 
FROM questions 
WHERE questions.classification IS NOT NULL AND questions.classification != %(classification_1)s AND questions.created_at >= %(created_at_1)s GROUP BY questions.classification ORDER BY count(questions.id) DESC
2025-08-15 11:26:35 - sqlalchemy.engine.Engine - INFO - [cached since 4260s ago] {'classification_1': '', 'created_at_1': datetime.datetime(2025, 8, 8, 3, 26, 35, 720277)}
2025-08-15 11:26:35 - sqlalchemy.engine.Engine - INFO - SELECT questions.classification AS name, count(questions.id) AS count 
FROM questions 
WHERE questions.classification IS NOT NULL AND questions.classification != %(classification_1)s GROUP BY questions.classification ORDER BY count(questions.id) DESC
2025-08-15 11:26:35 - sqlalchemy.engine.Engine - INFO - [cached since 4263s ago] {'classification_1': ''}
2025-08-15 11:26:35 - sqlalchemy.engine.Engine - INFO - SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions ORDER BY questions.created_at DESC 
 LIMIT %(param_1)s
2025-08-15 11:26:35 - sqlalchemy.engine.Engine - INFO - [cached since 4260s ago] {'param_1': 5}
2025-08-15 11:26:35 - sqlalchemy.engine.Engine - INFO - SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers ORDER BY answers.created_at DESC 
 LIMIT %(param_1)s
2025-08-15 11:26:35 - sqlalchemy.engine.Engine - INFO - [cached since 4260s ago] {'param_1': 5}
2025-08-15 11:26:35 - sqlalchemy.engine.Engine - INFO - SELECT scores.id AS scores_id, scores.answer_id AS scores_answer_id, scores.score_1 AS scores_score_1, scores.score_2 AS scores_score_2, scores.score_3 AS scores_score_3, scores.score_4 AS scores_score_4, scores.score_5 AS scores_score_5, scores.dimension_1_name AS scores_dimension_1_name, scores.dimension_2_name AS scores_dimension_2_name, scores.dimension_3_name AS scores_dimension_3_name, scores.dimension_4_name AS scores_dimension_4_name, scores.dimension_5_name AS scores_dimension_5_name, scores.average_score AS scores_average_score, scores.comment AS scores_comment, scores.rated_at AS scores_rated_at 
FROM scores ORDER BY scores.rated_at DESC 
 LIMIT %(param_1)s
2025-08-15 11:26:35 - sqlalchemy.engine.Engine - INFO - [cached since 4260s ago] {'param_1': 5}
2025-08-15 11:26:35 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:26:35 - sqlalchemy.engine.Engine - INFO - [cached since 4260s ago] {'created_at_1': datetime.datetime(2025, 8, 15, 3, 21, 35, 726007)}
2025-08-15 11:26:35 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:26:35 - sqlalchemy.engine.Engine - INFO - [cached since 4260s ago] {'created_at_1': datetime.datetime(2025, 8, 15, 3, 21, 35, 726007)}
2025-08-15 11:26:35 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT scores.id AS scores_id, scores.answer_id AS scores_answer_id, scores.score_1 AS scores_score_1, scores.score_2 AS scores_score_2, scores.score_3 AS scores_score_3, scores.score_4 AS scores_score_4, scores.score_5 AS scores_score_5, scores.dimension_1_name AS scores_dimension_1_name, scores.dimension_2_name AS scores_dimension_2_name, scores.dimension_3_name AS scores_dimension_3_name, scores.dimension_4_name AS scores_dimension_4_name, scores.dimension_5_name AS scores_dimension_5_name, scores.average_score AS scores_average_score, scores.comment AS scores_comment, scores.rated_at AS scores_rated_at 
FROM scores 
WHERE scores.rated_at >= %(rated_at_1)s) AS anon_1
2025-08-15 11:26:35 - sqlalchemy.engine.Engine - INFO - [cached since 4260s ago] {'rated_at_1': datetime.datetime(2025, 8, 15, 3, 21, 35, 726007)}
2025-08-15 11:26:35 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.assistant_type = %(assistant_type_1)s AND answers.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:26:35 - sqlalchemy.engine.Engine - INFO - [cached since 4260s ago] {'assistant_type_1': 'yoyo', 'created_at_1': datetime.datetime(2025, 8, 15, 3, 21, 35, 726007)}
2025-08-15 11:26:35 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.assistant_type = %(assistant_type_1)s AND answers.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:26:35 - sqlalchemy.engine.Engine - INFO - [cached since 4260s ago] {'assistant_type_1': 'doubao', 'created_at_1': datetime.datetime(2025, 8, 15, 3, 21, 35, 726007)}
2025-08-15 11:26:35 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.assistant_type = %(assistant_type_1)s AND answers.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:26:35 - sqlalchemy.engine.Engine - INFO - [cached since 4260s ago] {'assistant_type_1': 'xiaotian', 'created_at_1': datetime.datetime(2025, 8, 15, 3, 21, 35, 726007)}
2025-08-15 11:26:35 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-15 11:27:06 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-15 11:27:06 - app.api.word_analysis_api - INFO - 获取词云数据请求: time_range=week, limit=40
2025-08-15 11:27:06 - app.api.word_analysis_api - INFO - 获取词云数据请求: time_range=week, limit=40
2025-08-15 11:27:06 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s) AS anon_1
2025-08-15 11:27:06 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-15 11:27:06 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-15 11:27:06 - app.services.word_analysis_service - INFO - 开始获取热词分析数据，时间范围: week, 限制: 40
2025-08-15 11:27:06 - sqlalchemy.engine.Engine - INFO - [cached since 4291s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 17, 23, 59, 59, 999999), 'processing_status_1': 'scored'}
2025-08-15 11:27:06 - sqlalchemy.engine.Engine - INFO - SELECT questions.classification AS questions_classification, count(questions.id) AS badcase_count 
FROM questions 
WHERE questions.is_badcase = true GROUP BY questions.classification ORDER BY count(questions.id) DESC 
 LIMIT %(param_1)s
2025-08-15 11:27:06 - app.services.word_analysis_service - INFO - 开始获取热词分析数据，时间范围: week, 限制: 40
2025-08-15 11:27:06 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions) AS anon_1
2025-08-15 11:27:06 - sqlalchemy.engine.Engine - INFO - [cached since 4291s ago] {'param_1': 3}
2025-08-15 11:27:06 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-15 11:27:06 - sqlalchemy.engine.Engine - INFO - [cached since 4294s ago] {}
2025-08-15 11:27:06 - sqlalchemy.engine.Engine - INFO - SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.query IS NOT NULL AND questions.query != %(query_1)s AND questions.is_deleted = false
2025-08-15 11:27:06 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s AND questions.is_badcase = true) AS anon_1
2025-08-15 11:27:06 - sqlalchemy.engine.Engine - INFO - 
                WITH dimension_scores AS (
                    -- 维度1的数据
                    SELECT
                        s.dimension_1_name as dimension_name,
                        s.score_1 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_1_name IS NOT NULL
                    AND s.score_1 IS NOT NULL

                    UNION ALL

                    -- 维度2的数据
                    SELECT
                        s.dimension_2_name as dimension_name,
                        s.score_2 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_2_name IS NOT NULL
                    AND s.score_2 IS NOT NULL

                    UNION ALL

                    -- 维度3的数据
                    SELECT
                        s.dimension_3_name as dimension_name,
                        s.score_3 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_3_name IS NOT NULL
                    AND s.score_3 IS NOT NULL

                    UNION ALL

                    -- 维度4的数据
                    SELECT
                        s.dimension_4_name as dimension_name,
                        s.score_4 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_4_name IS NOT NULL
                    AND s.score_4 IS NOT NULL

                    UNION ALL

                    -- 维度5的数据
                    SELECT
                        s.dimension_5_name as dimension_name,
                        s.score_5 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_5_name IS NOT NULL
                    AND s.score_5 IS NOT NULL
                )
                SELECT
                    dimension_name,
                    AVG(score) as avg_score,
                    COUNT(*) as sample_count
                FROM dimension_scores
                GROUP BY dimension_name
                ORDER BY avg_score ASC
            
2025-08-15 11:27:06 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:27:06 - sqlalchemy.engine.Engine - INFO - [cached since 4291s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 17, 23, 59, 59, 999999), 'query_1': ''}
2025-08-15 11:27:06 - sqlalchemy.engine.Engine - INFO - [cached since 4291s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 17, 23, 59, 59, 999999), 'processing_status_1': 'scored'}
2025-08-15 11:27:06 - sqlalchemy.engine.Engine - INFO - [cached since 4291s ago] {'classification': '其他'}
2025-08-15 11:27:06 - sqlalchemy.engine.Engine - INFO - [cached since 4291s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0)}
2025-08-15 11:27:06 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s AND questions.is_badcase = true AND questions.badcase_review_status = %(badcase_review_status_1)s) AS anon_1
2025-08-15 11:27:06 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s) AS anon_1
2025-08-15 11:27:06 - app.services.word_analysis_service - INFO - 查询到 260 个问题，时间范围: 2025-08-11 00:00:00 至 2025-08-17 23:59:59.999999
2025-08-15 11:27:06 - app.services.word_analysis_service - INFO - 查询到 260 个问题，时间范围: 2025-08-11 00:00:00 至 2025-08-17 23:59:59.999999
2025-08-15 11:27:06 - sqlalchemy.engine.Engine - INFO - [cached since 4291s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'classification_1': ''}
2025-08-15 11:27:06 - sqlalchemy.engine.Engine - INFO - [cached since 4291s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 17, 23, 59, 59, 999999), 'processing_status_1': 'scored', 'badcase_review_status_1': 'pending'}
2025-08-15 11:27:06 - app.services.word_analysis_service - INFO - 问题样本 1: 为什么支付失败了？...
2025-08-15 11:27:06 - app.services.word_analysis_service - INFO - 问题样本 1: 为什么支付失败了？...
2025-08-15 11:27:06 - app.services.word_analysis_service - INFO - 问题样本 2: 数据统计在哪里可以找到？...
2025-08-15 11:27:06 - app.services.word_analysis_service - INFO - 问题样本 2: 数据统计在哪里可以找到？...
2025-08-15 11:27:06 - app.services.word_analysis_service - INFO - 问题样本 3: 如何更新个人信息？...
2025-08-15 11:27:06 - app.services.word_analysis_service - INFO - 问题样本 3: 如何更新个人信息？...
2025-08-15 11:27:06 - app.services.word_analysis_service - INFO - 有效问题文本数: 260, 总文本长度: 2914
2025-08-15 11:27:06 - app.services.word_analysis_service - INFO - 有效问题文本数: 260, 总文本长度: 2914
2025-08-15 11:27:06 - sqlalchemy.engine.Engine - INFO - 
                WITH dimension_scores AS (
                    -- 维度1的数据
                    SELECT
                        s.dimension_1_name as dimension_name,
                        s.score_1 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_1_name IS NOT NULL
                    AND s.score_1 IS NOT NULL

                    UNION ALL

                    -- 维度2的数据
                    SELECT
                        s.dimension_2_name as dimension_name,
                        s.score_2 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_2_name IS NOT NULL
                    AND s.score_2 IS NOT NULL

                    UNION ALL

                    -- 维度3的数据
                    SELECT
                        s.dimension_3_name as dimension_name,
                        s.score_3 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_3_name IS NOT NULL
                    AND s.score_3 IS NOT NULL

                    UNION ALL

                    -- 维度4的数据
                    SELECT
                        s.dimension_4_name as dimension_name,
                        s.score_4 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_4_name IS NOT NULL
                    AND s.score_4 IS NOT NULL

                    UNION ALL

                    -- 维度5的数据
                    SELECT
                        s.dimension_5_name as dimension_name,
                        s.score_5 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_5_name IS NOT NULL
                    AND s.score_5 IS NOT NULL
                )
                SELECT
                    dimension_name,
                    AVG(score) as avg_score,
                    COUNT(*) as sample_count
                FROM dimension_scores
                GROUP BY dimension_name
                ORDER BY avg_score ASC
            
2025-08-15 11:27:06 - app.services.word_analysis_service - INFO - 文本分析完成，原始词汇: 1755, 过滤后: 653, 唯一词汇: 58
2025-08-15 11:27:06 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.classification IS NOT NULL AND questions.classification != %(classification_1)s) AS anon_1
2025-08-15 11:27:06 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s AND questions.badcase_review_status = %(badcase_review_status_1)s) AS anon_1
2025-08-15 11:27:06 - sqlalchemy.engine.Engine - INFO - [cached since 4291s ago] {'classification': '产品使用'}
2025-08-15 11:27:06 - app.services.word_analysis_service - INFO - 文本分析完成，原始词汇: 1755, 过滤后: 653, 唯一词汇: 58
2025-08-15 11:27:06 - sqlalchemy.engine.Engine - INFO - [cached since 4291s ago] {'classification_1': ''}
2025-08-15 11:27:06 - sqlalchemy.engine.Engine - INFO - [cached since 4291s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 17, 23, 59, 59, 999999), 'processing_status_1': 'scored', 'badcase_review_status_1': 'reviewed'}
2025-08-15 11:27:06 - app.services.word_analysis_service - INFO - 热词分析完成，共分析 260 个问题，生成 40 个热词
2025-08-15 11:27:06 - app.services.word_analysis_service - INFO - 热词分析完成，共分析 260 个问题，生成 40 个热词
2025-08-15 11:27:06 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-15 11:27:06 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s AND questions.badcase_review_status = %(badcase_review_status_1)s AND questions.is_badcase = false) AS anon_1
2025-08-15 11:27:06 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT access_logs.id AS access_logs_id, access_logs.user_id AS access_logs_user_id, access_logs.username AS access_logs_username, access_logs.action AS access_logs_action, access_logs.ip_address AS access_logs_ip_address, access_logs.created_at AS access_logs_created_at 
FROM access_logs 
WHERE access_logs.action = %(action_1)s) AS anon_1
2025-08-15 11:27:06 - sqlalchemy.engine.Engine - INFO - [cached since 4291s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 17, 23, 59, 59, 999999), 'processing_status_1': 'scored', 'badcase_review_status_1': 'reviewed'}
2025-08-15 11:27:06 - sqlalchemy.engine.Engine - INFO - [cached since 4291s ago] {'action_1': 'login'}
2025-08-15 11:27:06 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-15 11:27:06 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT access_logs.id AS access_logs_id, access_logs.user_id AS access_logs_user_id, access_logs.username AS access_logs_username, access_logs.action AS access_logs_action, access_logs.ip_address AS access_logs_ip_address, access_logs.created_at AS access_logs_created_at 
FROM access_logs 
WHERE access_logs.action = %(action_1)s AND access_logs.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:27:06 - sqlalchemy.engine.Engine - INFO - [cached since 4291s ago] {'action_1': 'login', 'created_at_1': datetime.datetime(2025, 8, 11, 0, 0)}
2025-08-15 11:27:06 - sqlalchemy.engine.Engine - INFO - 
                WITH dimension_scores AS (
                    -- 维度1的数据
                    SELECT
                        s.dimension_1_name as dimension_name,
                        s.score_1 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_1_name IS NOT NULL
                    AND s.score_1 IS NOT NULL

                    UNION ALL

                    -- 维度2的数据
                    SELECT
                        s.dimension_2_name as dimension_name,
                        s.score_2 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_2_name IS NOT NULL
                    AND s.score_2 IS NOT NULL

                    UNION ALL

                    -- 维度3的数据
                    SELECT
                        s.dimension_3_name as dimension_name,
                        s.score_3 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_3_name IS NOT NULL
                    AND s.score_3 IS NOT NULL

                    UNION ALL

                    -- 维度4的数据
                    SELECT
                        s.dimension_4_name as dimension_name,
                        s.score_4 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_4_name IS NOT NULL
                    AND s.score_4 IS NOT NULL

                    UNION ALL

                    -- 维度5的数据
                    SELECT
                        s.dimension_5_name as dimension_name,
                        s.score_5 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_5_name IS NOT NULL
                    AND s.score_5 IS NOT NULL
                )
                SELECT
                    dimension_name,
                    AVG(score) as avg_score,
                    COUNT(*) as sample_count
                FROM dimension_scores
                GROUP BY dimension_name
                ORDER BY avg_score ASC
            
2025-08-15 11:27:06 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:27:06 - sqlalchemy.engine.Engine - INFO - [cached since 4291s ago] {'classification': '功能建议'}
2025-08-15 11:27:06 - sqlalchemy.engine.Engine - INFO - [cached since 4291s ago] {'created_at_1': datetime.datetime(2025, 8, 15, 0, 0)}
2025-08-15 11:27:06 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:27:06 - sqlalchemy.engine.Engine - INFO - [cached since 4291s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0)}
2025-08-15 11:27:06 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s) AS anon_1
2025-08-15 11:27:06 - sqlalchemy.engine.Engine - INFO - [cached since 4291s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'classification_1': ''}
2025-08-15 11:27:06 - sqlalchemy.engine.Engine - INFO - SELECT coalesce(sum(least(anon_1.cnt, %(least_1)s)), %(coalesce_2)s) AS coalesce_1 
FROM (SELECT answers.question_business_id AS qbid, count(answers.id) AS cnt 
FROM answers JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.created_at >= %(created_at_1)s AND answers.created_at >= %(created_at_2)s AND answers.assistant_type IN (%(assistant_type_1_1)s, %(assistant_type_1_2)s) AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s GROUP BY answers.question_business_id) AS anon_1
2025-08-15 11:27:06 - sqlalchemy.engine.Engine - INFO - [cached since 4291s ago] {'least_1': 2, 'coalesce_2': 0, 'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 11, 0, 0), 'classification_1': '', 'assistant_type_1_1': 'doubao', 'assistant_type_1_2': 'xiaotian'}
2025-08-15 11:27:06 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-15 11:27:06 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT count(distinct(answers.question_business_id)) AS count_2 
FROM answers JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.created_at >= %(created_at_1)s AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s AND answers.is_scored = true AND answers.assistant_type IN (%(assistant_type_1_1)s, %(assistant_type_1_2)s, %(assistant_type_1_3)s) GROUP BY answers.question_business_id 
HAVING count(distinct(answers.assistant_type)) = %(count_3)s) AS anon_1
2025-08-15 11:27:06 - sqlalchemy.engine.Engine - INFO - [cached since 4291s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'classification_1': '', 'count_3': 3, 'assistant_type_1_1': 'yoyo', 'assistant_type_1_2': 'doubao', 'assistant_type_1_3': 'xiaotian'}
2025-08-15 11:27:06 - sqlalchemy.engine.Engine - INFO - SELECT count(distinct(questions.business_id)) AS count_1 
FROM questions JOIN answers ON questions.business_id = answers.question_business_id 
WHERE questions.created_at >= %(created_at_1)s AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s AND answers.assistant_type IN (%(assistant_type_1_1)s, %(assistant_type_1_2)s) AND answers.created_at >= %(created_at_2)s
2025-08-15 11:27:06 - sqlalchemy.engine.Engine - INFO - [cached since 4291s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'classification_1': '', 'created_at_2': datetime.datetime(2025, 8, 11, 0, 0), 'assistant_type_1_1': 'doubao', 'assistant_type_1_2': 'xiaotian'}
2025-08-15 11:27:06 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.processing_status = %(processing_status_1)s AND questions.is_badcase = true) AS anon_1
2025-08-15 11:27:06 - sqlalchemy.engine.Engine - INFO - [cached since 4291s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'processing_status_1': 'scored'}
2025-08-15 11:27:06 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.processing_status = %(processing_status_1)s AND questions.badcase_review_status = %(badcase_review_status_1)s) AS anon_1
2025-08-15 11:27:06 - sqlalchemy.engine.Engine - INFO - [cached since 4291s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'processing_status_1': 'scored', 'badcase_review_status_1': 'reviewed'}
2025-08-15 11:27:06 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:27:06 - sqlalchemy.engine.Engine - INFO - [cached since 4291s ago] {'created_at_1': datetime.datetime(2025, 8, 15, 2, 27, 6, 627397)}
2025-08-15 11:27:06 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:27:06 - sqlalchemy.engine.Engine - INFO - [cached since 4291s ago] {'created_at_1': datetime.datetime(2025, 8, 14, 21, 27, 6, 627397)}
2025-08-15 11:27:06 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.updated_at >= %(updated_at_1)s AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s) AS anon_1
2025-08-15 11:27:06 - sqlalchemy.engine.Engine - INFO - [cached since 4291s ago] {'updated_at_1': datetime.datetime(2025, 8, 15, 2, 57, 6, 627397), 'classification_1': ''}
2025-08-15 11:27:06 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers JOIN questions ON answers.question_business_id = questions.business_id 
WHERE answers.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:27:06 - sqlalchemy.engine.Engine - INFO - [cached since 4291s ago] {'created_at_1': datetime.datetime(2025, 8, 15, 2, 57, 6, 627397)}
2025-08-15 11:27:06 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.updated_at >= %(updated_at_1)s AND answers.is_scored = true) AS anon_1
2025-08-15 11:27:06 - sqlalchemy.engine.Engine - INFO - [cached since 4291s ago] {'updated_at_1': datetime.datetime(2025, 8, 15, 2, 57, 6, 627397)}
2025-08-15 11:27:06 - sqlalchemy.engine.Engine - INFO - SELECT date_trunc(%(date_trunc_1)s, questions.created_at) AS day, count(questions.id) AS count 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s GROUP BY date_trunc(%(date_trunc_2)s, questions.created_at) ORDER BY day
2025-08-15 11:27:06 - sqlalchemy.engine.Engine - INFO - [cached since 4291s ago] {'date_trunc_1': 'day', 'created_at_1': datetime.datetime(2025, 8, 8, 3, 27, 6, 646976), 'date_trunc_2': 'day'}
2025-08-15 11:27:06 - sqlalchemy.engine.Engine - INFO - SELECT date_trunc(%(date_trunc_1)s, questions.updated_at) AS day, count(questions.id) AS count 
FROM questions 
WHERE questions.updated_at >= %(updated_at_1)s AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s AND questions.processing_status IN (%(processing_status_1_1)s, %(processing_status_1_2)s, %(processing_status_1_3)s) GROUP BY date_trunc(%(date_trunc_2)s, questions.updated_at) ORDER BY day
2025-08-15 11:27:06 - sqlalchemy.engine.Engine - INFO - [cached since 4291s ago] {'date_trunc_1': 'day', 'updated_at_1': datetime.datetime(2025, 8, 8, 3, 27, 6, 646976), 'classification_1': '', 'date_trunc_2': 'day', 'processing_status_1_1': 'classified', 'processing_status_1_2': 'answers_generated', 'processing_status_1_3': 'scored'}
2025-08-15 11:27:06 - sqlalchemy.engine.Engine - INFO - SELECT date_trunc(%(date_trunc_1)s, answers.created_at) AS day, count(answers.id) AS count 
FROM answers JOIN questions ON answers.question_business_id = questions.business_id 
WHERE answers.created_at >= %(created_at_1)s AND questions.created_at >= %(created_at_2)s AND answers.assistant_type IN (%(assistant_type_1_1)s, %(assistant_type_1_2)s) AND answers.is_scored = true AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s GROUP BY date_trunc(%(date_trunc_2)s, answers.created_at) ORDER BY day
2025-08-15 11:27:06 - sqlalchemy.engine.Engine - INFO - [cached since 4291s ago] {'date_trunc_1': 'day', 'created_at_1': datetime.datetime(2025, 8, 8, 3, 27, 6, 646976), 'created_at_2': datetime.datetime(2025, 8, 8, 3, 27, 6, 646976), 'classification_1': '', 'date_trunc_2': 'day', 'assistant_type_1_1': 'doubao', 'assistant_type_1_2': 'xiaotian'}
2025-08-15 11:27:06 - sqlalchemy.engine.Engine - INFO - SELECT answers.assistant_type AS answers_assistant_type, avg(scores.score_1) AS avg_score_1, avg(scores.score_2) AS avg_score_2, avg(scores.score_3) AS avg_score_3, avg(scores.score_4) AS avg_score_4, avg(scores.score_5) AS avg_score_5, avg(scores.average_score) AS avg_total, count(scores.id) AS score_count 
FROM answers JOIN scores ON answers.id = scores.answer_id GROUP BY answers.assistant_type
2025-08-15 11:27:06 - sqlalchemy.engine.Engine - INFO - [cached since 4291s ago] {}
2025-08-15 11:27:06 - sqlalchemy.engine.Engine - INFO - SELECT system_config.id AS system_config_id, system_config.config_key AS system_config_config_key, system_config.config_value AS system_config_config_value, system_config.config_type AS system_config_config_type, system_config.description AS system_config_description, system_config.effective_time AS system_config_effective_time, system_config.previous_value AS system_config_previous_value, system_config.status AS system_config_status, system_config.created_at AS system_config_created_at, system_config.updated_at AS system_config_updated_at 
FROM system_config 
WHERE system_config.config_key = %(config_key_1)s 
 LIMIT %(param_1)s
2025-08-15 11:27:06 - sqlalchemy.engine.Engine - INFO - [cached since 4291s ago] {'config_key_1': 'display.hot_categories_time_range', 'param_1': 1}
2025-08-15 11:27:06 - sqlalchemy.engine.Engine - INFO - SELECT questions.classification AS name, count(questions.id) AS count 
FROM questions 
WHERE questions.classification IS NOT NULL AND questions.classification != %(classification_1)s GROUP BY questions.classification
2025-08-15 11:27:06 - sqlalchemy.engine.Engine - INFO - [cached since 4291s ago] {'classification_1': ''}
2025-08-15 11:27:06 - sqlalchemy.engine.Engine - INFO - SELECT questions.classification AS name, count(questions.id) AS count 
FROM questions 
WHERE questions.classification IS NOT NULL AND questions.classification != %(classification_1)s AND questions.created_at >= %(created_at_1)s GROUP BY questions.classification ORDER BY count(questions.id) DESC
2025-08-15 11:27:06 - sqlalchemy.engine.Engine - INFO - [cached since 4291s ago] {'classification_1': '', 'created_at_1': datetime.datetime(2025, 8, 8, 3, 27, 6, 657750)}
2025-08-15 11:27:06 - sqlalchemy.engine.Engine - INFO - SELECT questions.classification AS name, count(questions.id) AS count 
FROM questions 
WHERE questions.classification IS NOT NULL AND questions.classification != %(classification_1)s GROUP BY questions.classification ORDER BY count(questions.id) DESC
2025-08-15 11:27:06 - sqlalchemy.engine.Engine - INFO - [cached since 4294s ago] {'classification_1': ''}
2025-08-15 11:27:06 - sqlalchemy.engine.Engine - INFO - SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions ORDER BY questions.created_at DESC 
 LIMIT %(param_1)s
2025-08-15 11:27:06 - sqlalchemy.engine.Engine - INFO - [cached since 4291s ago] {'param_1': 5}
2025-08-15 11:27:06 - sqlalchemy.engine.Engine - INFO - SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers ORDER BY answers.created_at DESC 
 LIMIT %(param_1)s
2025-08-15 11:27:06 - sqlalchemy.engine.Engine - INFO - [cached since 4291s ago] {'param_1': 5}
2025-08-15 11:27:06 - sqlalchemy.engine.Engine - INFO - SELECT scores.id AS scores_id, scores.answer_id AS scores_answer_id, scores.score_1 AS scores_score_1, scores.score_2 AS scores_score_2, scores.score_3 AS scores_score_3, scores.score_4 AS scores_score_4, scores.score_5 AS scores_score_5, scores.dimension_1_name AS scores_dimension_1_name, scores.dimension_2_name AS scores_dimension_2_name, scores.dimension_3_name AS scores_dimension_3_name, scores.dimension_4_name AS scores_dimension_4_name, scores.dimension_5_name AS scores_dimension_5_name, scores.average_score AS scores_average_score, scores.comment AS scores_comment, scores.rated_at AS scores_rated_at 
FROM scores ORDER BY scores.rated_at DESC 
 LIMIT %(param_1)s
2025-08-15 11:27:06 - sqlalchemy.engine.Engine - INFO - [cached since 4291s ago] {'param_1': 5}
2025-08-15 11:27:06 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:27:06 - sqlalchemy.engine.Engine - INFO - [cached since 4291s ago] {'created_at_1': datetime.datetime(2025, 8, 15, 3, 22, 6, 663000)}
2025-08-15 11:27:06 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:27:06 - sqlalchemy.engine.Engine - INFO - [cached since 4291s ago] {'created_at_1': datetime.datetime(2025, 8, 15, 3, 22, 6, 663000)}
2025-08-15 11:27:06 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT scores.id AS scores_id, scores.answer_id AS scores_answer_id, scores.score_1 AS scores_score_1, scores.score_2 AS scores_score_2, scores.score_3 AS scores_score_3, scores.score_4 AS scores_score_4, scores.score_5 AS scores_score_5, scores.dimension_1_name AS scores_dimension_1_name, scores.dimension_2_name AS scores_dimension_2_name, scores.dimension_3_name AS scores_dimension_3_name, scores.dimension_4_name AS scores_dimension_4_name, scores.dimension_5_name AS scores_dimension_5_name, scores.average_score AS scores_average_score, scores.comment AS scores_comment, scores.rated_at AS scores_rated_at 
FROM scores 
WHERE scores.rated_at >= %(rated_at_1)s) AS anon_1
2025-08-15 11:27:06 - sqlalchemy.engine.Engine - INFO - [cached since 4291s ago] {'rated_at_1': datetime.datetime(2025, 8, 15, 3, 22, 6, 663000)}
2025-08-15 11:27:06 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.assistant_type = %(assistant_type_1)s AND answers.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:27:06 - sqlalchemy.engine.Engine - INFO - [cached since 4291s ago] {'assistant_type_1': 'yoyo', 'created_at_1': datetime.datetime(2025, 8, 15, 3, 22, 6, 663000)}
2025-08-15 11:27:06 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.assistant_type = %(assistant_type_1)s AND answers.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:27:06 - sqlalchemy.engine.Engine - INFO - [cached since 4291s ago] {'assistant_type_1': 'doubao', 'created_at_1': datetime.datetime(2025, 8, 15, 3, 22, 6, 663000)}
2025-08-15 11:27:06 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.assistant_type = %(assistant_type_1)s AND answers.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:27:06 - sqlalchemy.engine.Engine - INFO - [cached since 4291s ago] {'assistant_type_1': 'xiaotian', 'created_at_1': datetime.datetime(2025, 8, 15, 3, 22, 6, 663000)}
2025-08-15 11:27:06 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-15 11:27:36 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-15 11:27:36 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-15 11:27:36 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-15 11:27:36 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s) AS anon_1
2025-08-15 11:27:36 - sqlalchemy.engine.Engine - INFO - SELECT questions.classification AS questions_classification, count(questions.id) AS badcase_count 
FROM questions 
WHERE questions.is_badcase = true GROUP BY questions.classification ORDER BY count(questions.id) DESC 
 LIMIT %(param_1)s
2025-08-15 11:27:36 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions) AS anon_1
2025-08-15 11:27:36 - sqlalchemy.engine.Engine - INFO - [cached since 4321s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 17, 23, 59, 59, 999999), 'processing_status_1': 'scored'}
2025-08-15 11:27:36 - sqlalchemy.engine.Engine - INFO - [cached since 4321s ago] {'param_1': 3}
2025-08-15 11:27:36 - sqlalchemy.engine.Engine - INFO - [cached since 4324s ago] {}
2025-08-15 11:27:36 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:27:36 - sqlalchemy.engine.Engine - INFO - 
                WITH dimension_scores AS (
                    -- 维度1的数据
                    SELECT
                        s.dimension_1_name as dimension_name,
                        s.score_1 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_1_name IS NOT NULL
                    AND s.score_1 IS NOT NULL

                    UNION ALL

                    -- 维度2的数据
                    SELECT
                        s.dimension_2_name as dimension_name,
                        s.score_2 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_2_name IS NOT NULL
                    AND s.score_2 IS NOT NULL

                    UNION ALL

                    -- 维度3的数据
                    SELECT
                        s.dimension_3_name as dimension_name,
                        s.score_3 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_3_name IS NOT NULL
                    AND s.score_3 IS NOT NULL

                    UNION ALL

                    -- 维度4的数据
                    SELECT
                        s.dimension_4_name as dimension_name,
                        s.score_4 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_4_name IS NOT NULL
                    AND s.score_4 IS NOT NULL

                    UNION ALL

                    -- 维度5的数据
                    SELECT
                        s.dimension_5_name as dimension_name,
                        s.score_5 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_5_name IS NOT NULL
                    AND s.score_5 IS NOT NULL
                )
                SELECT
                    dimension_name,
                    AVG(score) as avg_score,
                    COUNT(*) as sample_count
                FROM dimension_scores
                GROUP BY dimension_name
                ORDER BY avg_score ASC
            
2025-08-15 11:27:36 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s AND questions.is_badcase = true) AS anon_1
2025-08-15 11:27:36 - sqlalchemy.engine.Engine - INFO - [cached since 4321s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0)}
2025-08-15 11:27:36 - sqlalchemy.engine.Engine - INFO - [cached since 4321s ago] {'classification': '其他'}
2025-08-15 11:27:36 - sqlalchemy.engine.Engine - INFO - [cached since 4321s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 17, 23, 59, 59, 999999), 'processing_status_1': 'scored'}
2025-08-15 11:27:36 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s) AS anon_1
2025-08-15 11:27:36 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s AND questions.is_badcase = true AND questions.badcase_review_status = %(badcase_review_status_1)s) AS anon_1
2025-08-15 11:27:36 - sqlalchemy.engine.Engine - INFO - [cached since 4321s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'classification_1': ''}
2025-08-15 11:27:36 - sqlalchemy.engine.Engine - INFO - [cached since 4321s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 17, 23, 59, 59, 999999), 'processing_status_1': 'scored', 'badcase_review_status_1': 'pending'}
2025-08-15 11:27:36 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.classification IS NOT NULL AND questions.classification != %(classification_1)s) AS anon_1
2025-08-15 11:27:36 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s AND questions.badcase_review_status = %(badcase_review_status_1)s) AS anon_1
2025-08-15 11:27:36 - sqlalchemy.engine.Engine - INFO - [cached since 4321s ago] {'classification_1': ''}
2025-08-15 11:27:36 - sqlalchemy.engine.Engine - INFO - [cached since 4321s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 17, 23, 59, 59, 999999), 'processing_status_1': 'scored', 'badcase_review_status_1': 'reviewed'}
2025-08-15 11:27:36 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT access_logs.id AS access_logs_id, access_logs.user_id AS access_logs_user_id, access_logs.username AS access_logs_username, access_logs.action AS access_logs_action, access_logs.ip_address AS access_logs_ip_address, access_logs.created_at AS access_logs_created_at 
FROM access_logs 
WHERE access_logs.action = %(action_1)s) AS anon_1
2025-08-15 11:27:36 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s AND questions.badcase_review_status = %(badcase_review_status_1)s AND questions.is_badcase = false) AS anon_1
2025-08-15 11:27:36 - sqlalchemy.engine.Engine - INFO - 
                WITH dimension_scores AS (
                    -- 维度1的数据
                    SELECT
                        s.dimension_1_name as dimension_name,
                        s.score_1 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_1_name IS NOT NULL
                    AND s.score_1 IS NOT NULL

                    UNION ALL

                    -- 维度2的数据
                    SELECT
                        s.dimension_2_name as dimension_name,
                        s.score_2 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_2_name IS NOT NULL
                    AND s.score_2 IS NOT NULL

                    UNION ALL

                    -- 维度3的数据
                    SELECT
                        s.dimension_3_name as dimension_name,
                        s.score_3 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_3_name IS NOT NULL
                    AND s.score_3 IS NOT NULL

                    UNION ALL

                    -- 维度4的数据
                    SELECT
                        s.dimension_4_name as dimension_name,
                        s.score_4 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_4_name IS NOT NULL
                    AND s.score_4 IS NOT NULL

                    UNION ALL

                    -- 维度5的数据
                    SELECT
                        s.dimension_5_name as dimension_name,
                        s.score_5 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_5_name IS NOT NULL
                    AND s.score_5 IS NOT NULL
                )
                SELECT
                    dimension_name,
                    AVG(score) as avg_score,
                    COUNT(*) as sample_count
                FROM dimension_scores
                GROUP BY dimension_name
                ORDER BY avg_score ASC
            
2025-08-15 11:27:36 - sqlalchemy.engine.Engine - INFO - [cached since 4321s ago] {'action_1': 'login'}
2025-08-15 11:27:36 - sqlalchemy.engine.Engine - INFO - [cached since 4321s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 17, 23, 59, 59, 999999), 'processing_status_1': 'scored', 'badcase_review_status_1': 'reviewed'}
2025-08-15 11:27:36 - sqlalchemy.engine.Engine - INFO - [cached since 4321s ago] {'classification': '产品使用'}
2025-08-15 11:27:36 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT access_logs.id AS access_logs_id, access_logs.user_id AS access_logs_user_id, access_logs.username AS access_logs_username, access_logs.action AS access_logs_action, access_logs.ip_address AS access_logs_ip_address, access_logs.created_at AS access_logs_created_at 
FROM access_logs 
WHERE access_logs.action = %(action_1)s AND access_logs.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:27:36 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-15 11:27:36 - sqlalchemy.engine.Engine - INFO - [cached since 4321s ago] {'action_1': 'login', 'created_at_1': datetime.datetime(2025, 8, 11, 0, 0)}
2025-08-15 11:27:36 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:27:36 - sqlalchemy.engine.Engine - INFO - [cached since 4321s ago] {'created_at_1': datetime.datetime(2025, 8, 15, 0, 0)}
2025-08-15 11:27:36 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:27:36 - sqlalchemy.engine.Engine - INFO - [cached since 4321s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0)}
2025-08-15 11:27:36 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s) AS anon_1
2025-08-15 11:27:36 - sqlalchemy.engine.Engine - INFO - [cached since 4321s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'classification_1': ''}
2025-08-15 11:27:36 - sqlalchemy.engine.Engine - INFO - 
                WITH dimension_scores AS (
                    -- 维度1的数据
                    SELECT
                        s.dimension_1_name as dimension_name,
                        s.score_1 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_1_name IS NOT NULL
                    AND s.score_1 IS NOT NULL

                    UNION ALL

                    -- 维度2的数据
                    SELECT
                        s.dimension_2_name as dimension_name,
                        s.score_2 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_2_name IS NOT NULL
                    AND s.score_2 IS NOT NULL

                    UNION ALL

                    -- 维度3的数据
                    SELECT
                        s.dimension_3_name as dimension_name,
                        s.score_3 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_3_name IS NOT NULL
                    AND s.score_3 IS NOT NULL

                    UNION ALL

                    -- 维度4的数据
                    SELECT
                        s.dimension_4_name as dimension_name,
                        s.score_4 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_4_name IS NOT NULL
                    AND s.score_4 IS NOT NULL

                    UNION ALL

                    -- 维度5的数据
                    SELECT
                        s.dimension_5_name as dimension_name,
                        s.score_5 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_5_name IS NOT NULL
                    AND s.score_5 IS NOT NULL
                )
                SELECT
                    dimension_name,
                    AVG(score) as avg_score,
                    COUNT(*) as sample_count
                FROM dimension_scores
                GROUP BY dimension_name
                ORDER BY avg_score ASC
            
2025-08-15 11:27:36 - sqlalchemy.engine.Engine - INFO - SELECT coalesce(sum(least(anon_1.cnt, %(least_1)s)), %(coalesce_2)s) AS coalesce_1 
FROM (SELECT answers.question_business_id AS qbid, count(answers.id) AS cnt 
FROM answers JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.created_at >= %(created_at_1)s AND answers.created_at >= %(created_at_2)s AND answers.assistant_type IN (%(assistant_type_1_1)s, %(assistant_type_1_2)s) AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s GROUP BY answers.question_business_id) AS anon_1
2025-08-15 11:27:36 - sqlalchemy.engine.Engine - INFO - [cached since 4321s ago] {'classification': '功能建议'}
2025-08-15 11:27:36 - sqlalchemy.engine.Engine - INFO - [cached since 4321s ago] {'least_1': 2, 'coalesce_2': 0, 'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 11, 0, 0), 'classification_1': '', 'assistant_type_1_1': 'doubao', 'assistant_type_1_2': 'xiaotian'}
2025-08-15 11:27:36 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT count(distinct(answers.question_business_id)) AS count_2 
FROM answers JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.created_at >= %(created_at_1)s AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s AND answers.is_scored = true AND answers.assistant_type IN (%(assistant_type_1_1)s, %(assistant_type_1_2)s, %(assistant_type_1_3)s) GROUP BY answers.question_business_id 
HAVING count(distinct(answers.assistant_type)) = %(count_3)s) AS anon_1
2025-08-15 11:27:36 - sqlalchemy.engine.Engine - INFO - [cached since 4321s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'classification_1': '', 'count_3': 3, 'assistant_type_1_1': 'yoyo', 'assistant_type_1_2': 'doubao', 'assistant_type_1_3': 'xiaotian'}
2025-08-15 11:27:36 - sqlalchemy.engine.Engine - INFO - SELECT count(distinct(questions.business_id)) AS count_1 
FROM questions JOIN answers ON questions.business_id = answers.question_business_id 
WHERE questions.created_at >= %(created_at_1)s AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s AND answers.assistant_type IN (%(assistant_type_1_1)s, %(assistant_type_1_2)s) AND answers.created_at >= %(created_at_2)s
2025-08-15 11:27:36 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-15 11:27:36 - sqlalchemy.engine.Engine - INFO - [cached since 4321s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'classification_1': '', 'created_at_2': datetime.datetime(2025, 8, 11, 0, 0), 'assistant_type_1_1': 'doubao', 'assistant_type_1_2': 'xiaotian'}
2025-08-15 11:27:36 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.processing_status = %(processing_status_1)s AND questions.is_badcase = true) AS anon_1
2025-08-15 11:27:36 - sqlalchemy.engine.Engine - INFO - [cached since 4321s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'processing_status_1': 'scored'}
2025-08-15 11:27:36 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.processing_status = %(processing_status_1)s AND questions.badcase_review_status = %(badcase_review_status_1)s) AS anon_1
2025-08-15 11:27:36 - sqlalchemy.engine.Engine - INFO - [cached since 4321s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'processing_status_1': 'scored', 'badcase_review_status_1': 'reviewed'}
2025-08-15 11:27:36 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:27:36 - sqlalchemy.engine.Engine - INFO - [cached since 4321s ago] {'created_at_1': datetime.datetime(2025, 8, 15, 2, 27, 36, 610979)}
2025-08-15 11:27:36 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:27:36 - sqlalchemy.engine.Engine - INFO - [cached since 4321s ago] {'created_at_1': datetime.datetime(2025, 8, 14, 21, 27, 36, 610979)}
2025-08-15 11:27:36 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.updated_at >= %(updated_at_1)s AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s) AS anon_1
2025-08-15 11:27:36 - sqlalchemy.engine.Engine - INFO - [cached since 4321s ago] {'updated_at_1': datetime.datetime(2025, 8, 15, 2, 57, 36, 610979), 'classification_1': ''}
2025-08-15 11:27:36 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers JOIN questions ON answers.question_business_id = questions.business_id 
WHERE answers.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:27:36 - sqlalchemy.engine.Engine - INFO - [cached since 4321s ago] {'created_at_1': datetime.datetime(2025, 8, 15, 2, 57, 36, 610979)}
2025-08-15 11:27:36 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.updated_at >= %(updated_at_1)s AND answers.is_scored = true) AS anon_1
2025-08-15 11:27:36 - sqlalchemy.engine.Engine - INFO - [cached since 4321s ago] {'updated_at_1': datetime.datetime(2025, 8, 15, 2, 57, 36, 610979)}
2025-08-15 11:27:36 - sqlalchemy.engine.Engine - INFO - SELECT date_trunc(%(date_trunc_1)s, questions.created_at) AS day, count(questions.id) AS count 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s GROUP BY date_trunc(%(date_trunc_2)s, questions.created_at) ORDER BY day
2025-08-15 11:27:36 - sqlalchemy.engine.Engine - INFO - [cached since 4321s ago] {'date_trunc_1': 'day', 'created_at_1': datetime.datetime(2025, 8, 8, 3, 27, 36, 631005), 'date_trunc_2': 'day'}
2025-08-15 11:27:36 - sqlalchemy.engine.Engine - INFO - SELECT date_trunc(%(date_trunc_1)s, questions.updated_at) AS day, count(questions.id) AS count 
FROM questions 
WHERE questions.updated_at >= %(updated_at_1)s AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s AND questions.processing_status IN (%(processing_status_1_1)s, %(processing_status_1_2)s, %(processing_status_1_3)s) GROUP BY date_trunc(%(date_trunc_2)s, questions.updated_at) ORDER BY day
2025-08-15 11:27:36 - sqlalchemy.engine.Engine - INFO - [cached since 4321s ago] {'date_trunc_1': 'day', 'updated_at_1': datetime.datetime(2025, 8, 8, 3, 27, 36, 631005), 'classification_1': '', 'date_trunc_2': 'day', 'processing_status_1_1': 'classified', 'processing_status_1_2': 'answers_generated', 'processing_status_1_3': 'scored'}
2025-08-15 11:27:36 - sqlalchemy.engine.Engine - INFO - SELECT date_trunc(%(date_trunc_1)s, answers.created_at) AS day, count(answers.id) AS count 
FROM answers JOIN questions ON answers.question_business_id = questions.business_id 
WHERE answers.created_at >= %(created_at_1)s AND questions.created_at >= %(created_at_2)s AND answers.assistant_type IN (%(assistant_type_1_1)s, %(assistant_type_1_2)s) AND answers.is_scored = true AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s GROUP BY date_trunc(%(date_trunc_2)s, answers.created_at) ORDER BY day
2025-08-15 11:27:36 - sqlalchemy.engine.Engine - INFO - [cached since 4321s ago] {'date_trunc_1': 'day', 'created_at_1': datetime.datetime(2025, 8, 8, 3, 27, 36, 631005), 'created_at_2': datetime.datetime(2025, 8, 8, 3, 27, 36, 631005), 'classification_1': '', 'date_trunc_2': 'day', 'assistant_type_1_1': 'doubao', 'assistant_type_1_2': 'xiaotian'}
2025-08-15 11:27:36 - sqlalchemy.engine.Engine - INFO - SELECT answers.assistant_type AS answers_assistant_type, avg(scores.score_1) AS avg_score_1, avg(scores.score_2) AS avg_score_2, avg(scores.score_3) AS avg_score_3, avg(scores.score_4) AS avg_score_4, avg(scores.score_5) AS avg_score_5, avg(scores.average_score) AS avg_total, count(scores.id) AS score_count 
FROM answers JOIN scores ON answers.id = scores.answer_id GROUP BY answers.assistant_type
2025-08-15 11:27:36 - sqlalchemy.engine.Engine - INFO - [cached since 4321s ago] {}
2025-08-15 11:27:36 - sqlalchemy.engine.Engine - INFO - SELECT system_config.id AS system_config_id, system_config.config_key AS system_config_config_key, system_config.config_value AS system_config_config_value, system_config.config_type AS system_config_config_type, system_config.description AS system_config_description, system_config.effective_time AS system_config_effective_time, system_config.previous_value AS system_config_previous_value, system_config.status AS system_config_status, system_config.created_at AS system_config_created_at, system_config.updated_at AS system_config_updated_at 
FROM system_config 
WHERE system_config.config_key = %(config_key_1)s 
 LIMIT %(param_1)s
2025-08-15 11:27:36 - sqlalchemy.engine.Engine - INFO - [cached since 4321s ago] {'config_key_1': 'display.hot_categories_time_range', 'param_1': 1}
2025-08-15 11:27:36 - sqlalchemy.engine.Engine - INFO - SELECT questions.classification AS name, count(questions.id) AS count 
FROM questions 
WHERE questions.classification IS NOT NULL AND questions.classification != %(classification_1)s GROUP BY questions.classification
2025-08-15 11:27:36 - sqlalchemy.engine.Engine - INFO - [cached since 4321s ago] {'classification_1': ''}
2025-08-15 11:27:36 - sqlalchemy.engine.Engine - INFO - SELECT questions.classification AS name, count(questions.id) AS count 
FROM questions 
WHERE questions.classification IS NOT NULL AND questions.classification != %(classification_1)s AND questions.created_at >= %(created_at_1)s GROUP BY questions.classification ORDER BY count(questions.id) DESC
2025-08-15 11:27:36 - sqlalchemy.engine.Engine - INFO - [cached since 4321s ago] {'classification_1': '', 'created_at_1': datetime.datetime(2025, 8, 8, 3, 27, 36, 641505)}
2025-08-15 11:27:36 - sqlalchemy.engine.Engine - INFO - SELECT questions.classification AS name, count(questions.id) AS count 
FROM questions 
WHERE questions.classification IS NOT NULL AND questions.classification != %(classification_1)s GROUP BY questions.classification ORDER BY count(questions.id) DESC
2025-08-15 11:27:36 - sqlalchemy.engine.Engine - INFO - [cached since 4324s ago] {'classification_1': ''}
2025-08-15 11:27:36 - sqlalchemy.engine.Engine - INFO - SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions ORDER BY questions.created_at DESC 
 LIMIT %(param_1)s
2025-08-15 11:27:36 - sqlalchemy.engine.Engine - INFO - [cached since 4321s ago] {'param_1': 5}
2025-08-15 11:27:36 - sqlalchemy.engine.Engine - INFO - SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers ORDER BY answers.created_at DESC 
 LIMIT %(param_1)s
2025-08-15 11:27:36 - sqlalchemy.engine.Engine - INFO - [cached since 4321s ago] {'param_1': 5}
2025-08-15 11:27:36 - sqlalchemy.engine.Engine - INFO - SELECT scores.id AS scores_id, scores.answer_id AS scores_answer_id, scores.score_1 AS scores_score_1, scores.score_2 AS scores_score_2, scores.score_3 AS scores_score_3, scores.score_4 AS scores_score_4, scores.score_5 AS scores_score_5, scores.dimension_1_name AS scores_dimension_1_name, scores.dimension_2_name AS scores_dimension_2_name, scores.dimension_3_name AS scores_dimension_3_name, scores.dimension_4_name AS scores_dimension_4_name, scores.dimension_5_name AS scores_dimension_5_name, scores.average_score AS scores_average_score, scores.comment AS scores_comment, scores.rated_at AS scores_rated_at 
FROM scores ORDER BY scores.rated_at DESC 
 LIMIT %(param_1)s
2025-08-15 11:27:36 - sqlalchemy.engine.Engine - INFO - [cached since 4321s ago] {'param_1': 5}
2025-08-15 11:27:36 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:27:36 - sqlalchemy.engine.Engine - INFO - [cached since 4321s ago] {'created_at_1': datetime.datetime(2025, 8, 15, 3, 22, 36, 647064)}
2025-08-15 11:27:36 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:27:36 - sqlalchemy.engine.Engine - INFO - [cached since 4321s ago] {'created_at_1': datetime.datetime(2025, 8, 15, 3, 22, 36, 647064)}
2025-08-15 11:27:36 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT scores.id AS scores_id, scores.answer_id AS scores_answer_id, scores.score_1 AS scores_score_1, scores.score_2 AS scores_score_2, scores.score_3 AS scores_score_3, scores.score_4 AS scores_score_4, scores.score_5 AS scores_score_5, scores.dimension_1_name AS scores_dimension_1_name, scores.dimension_2_name AS scores_dimension_2_name, scores.dimension_3_name AS scores_dimension_3_name, scores.dimension_4_name AS scores_dimension_4_name, scores.dimension_5_name AS scores_dimension_5_name, scores.average_score AS scores_average_score, scores.comment AS scores_comment, scores.rated_at AS scores_rated_at 
FROM scores 
WHERE scores.rated_at >= %(rated_at_1)s) AS anon_1
2025-08-15 11:27:36 - sqlalchemy.engine.Engine - INFO - [cached since 4321s ago] {'rated_at_1': datetime.datetime(2025, 8, 15, 3, 22, 36, 647064)}
2025-08-15 11:27:36 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.assistant_type = %(assistant_type_1)s AND answers.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:27:36 - sqlalchemy.engine.Engine - INFO - [cached since 4321s ago] {'assistant_type_1': 'yoyo', 'created_at_1': datetime.datetime(2025, 8, 15, 3, 22, 36, 647064)}
2025-08-15 11:27:36 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.assistant_type = %(assistant_type_1)s AND answers.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:27:36 - sqlalchemy.engine.Engine - INFO - [cached since 4321s ago] {'assistant_type_1': 'doubao', 'created_at_1': datetime.datetime(2025, 8, 15, 3, 22, 36, 647064)}
2025-08-15 11:27:36 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.assistant_type = %(assistant_type_1)s AND answers.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 11:27:36 - sqlalchemy.engine.Engine - INFO - [cached since 4321s ago] {'assistant_type_1': 'xiaotian', 'created_at_1': datetime.datetime(2025, 8, 15, 3, 22, 36, 647064)}
2025-08-15 11:27:36 - sqlalchemy.engine.Engine - INFO - ROLLBACK
