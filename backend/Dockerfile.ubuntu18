# Ubuntu 18.04优化的后端Dockerfile
# 使用Python 3.9官方镜像 (基于Debian，与Ubuntu 18.04兼容性好)
FROM python:3.9-slim-bullseye

# 设置标签
LABEL maintainer="AI QA Platform Team"
LABEL version="1.0"
LABEL description="Backend service optimized for Ubuntu 18.04"

# 代理参数
ARG HTTP_PROXY
ARG HTTPS_PROXY
ARG NO_PROXY

# 设置代理环境变量（构建时使用）
ENV http_proxy=$HTTP_PROXY
ENV https_proxy=$HTTPS_PROXY
ENV HTTP_PROXY=$HTTP_PROXY
ENV HTTPS_PROXY=$HTTPS_PROXY
ENV NO_PROXY=$NO_PROXY

# 设置工作目录
WORKDIR /app

# 设置环境变量
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1
ENV FLASK_ENV=production
ENV DEBIAN_FRONTEND=noninteractive

# 设置时区 (与Ubuntu 18.04保持一致)
ENV TZ=Asia/Shanghai
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

# 备份原始sources.list并替换为国内镜像源
RUN cp /etc/apt/sources.list /etc/apt/sources.list.backup && \
    echo "# 阿里云Debian镜像源" > /etc/apt/sources.list && \
    echo "deb https://mirrors.aliyun.com/debian/ bullseye main non-free contrib" >> /etc/apt/sources.list && \
    echo "deb-src https://mirrors.aliyun.com/debian/ bullseye main non-free contrib" >> /etc/apt/sources.list && \
    echo "deb https://mirrors.aliyun.com/debian-security/ bullseye-security main" >> /etc/apt/sources.list && \
    echo "deb-src https://mirrors.aliyun.com/debian-security/ bullseye-security main" >> /etc/apt/sources.list && \
    echo "deb https://mirrors.aliyun.com/debian/ bullseye-updates main non-free contrib" >> /etc/apt/sources.list && \
    echo "deb-src https://mirrors.aliyun.com/debian/ bullseye-updates main non-free contrib" >> /etc/apt/sources.list

# 配置apt代理和超时设置
RUN echo 'Acquire::http::Timeout "120";' > /etc/apt/apt.conf.d/99timeout && \
    echo 'Acquire::https::Timeout "120";' >> /etc/apt/apt.conf.d/99timeout && \
    echo 'Acquire::Retries "3";' >> /etc/apt/apt.conf.d/99timeout && \
    if [ -n "$HTTP_PROXY" ]; then \
        echo "Acquire::http::Proxy \"$HTTP_PROXY\";" >> /etc/apt/apt.conf.d/99proxy; \
        echo "Acquire::https::Proxy \"$HTTPS_PROXY\";" >> /etc/apt/apt.conf.d/99proxy; \
    fi

# 更新包列表并安装系统依赖（使用国内镜像源）
RUN echo "更新软件包列表..." && \
    apt-get update && \
    echo "安装系统依赖..." && \
    apt-get install -y \
    # 编译工具
    gcc \
    g++ \
    make \
    # PostgreSQL客户端库
    libpq-dev \
    # 网络工具
    curl \
    wget \
    # 其他必要工具
    git \
    vim \
    # 清理缓存
    && echo "清理apt缓存..." && \
    rm -rf /var/lib/apt/lists/* && \
    apt-get clean && \
    echo "✅ 系统依赖安装完成"

# 配置pip镜像源和环境变量
RUN mkdir -p /root/.pip && \
    echo "[global]" > /root/.pip/pip.conf && \
    echo "index-url = https://pypi.tuna.tsinghua.edu.cn/simple" >> /root/.pip/pip.conf && \
    echo "extra-index-url = https://mirrors.aliyun.com/pypi/simple/" >> /root/.pip/pip.conf && \
    echo "                  https://pypi.mirrors.ustc.edu.cn/simple/" >> /root/.pip/pip.conf && \
    echo "                  https://pypi.douban.com/simple/" >> /root/.pip/pip.conf && \
    echo "trusted-host = pypi.tuna.tsinghua.edu.cn" >> /root/.pip/pip.conf && \
    echo "               mirrors.aliyun.com" >> /root/.pip/pip.conf && \
    echo "               pypi.mirrors.ustc.edu.cn" >> /root/.pip/pip.conf && \
    echo "               pypi.douban.com" >> /root/.pip/pip.conf && \
    echo "timeout = 120" >> /root/.pip/pip.conf && \
    echo "retries = 5" >> /root/.pip/pip.conf

# 设置pip环境变量
ENV PIP_INDEX_URL=https://pypi.tuna.tsinghua.edu.cn/simple \
    PIP_TRUSTED_HOST="pypi.tuna.tsinghua.edu.cn mirrors.aliyun.com pypi.mirrors.ustc.edu.cn pypi.douban.com" \
    PIP_TIMEOUT=120 \
    PIP_RETRIES=5

# 升级pip和基础工具
RUN echo "升级pip和基础工具..." && \
    pip install --no-cache-dir --timeout=120 --retries=5 \
    -i https://pypi.tuna.tsinghua.edu.cn/simple \
    --upgrade pip setuptools wheel && \
    echo "✅ pip升级完成"

# 复制requirements文件
COPY requirements.txt ./

# 分阶段安装Python依赖
RUN echo "安装核心依赖..." && \
    pip install --no-cache-dir --timeout=120 --retries=5 \
    -i https://pypi.tuna.tsinghua.edu.cn/simple \
    Flask==2.3.2 werkzeug==2.3.7 SQLAlchemy==2.0.19 && \
    echo "安装数据库依赖..." && \
    pip install --no-cache-dir --timeout=120 --retries=5 \
    -i https://pypi.tuna.tsinghua.edu.cn/simple \
    psycopg2-binary==2.9.7 Flask-SQLAlchemy==3.0.5 && \
    echo "安装其余依赖..." && \
    pip install --no-cache-dir --timeout=120 --retries=5 \
    -i https://pypi.tuna.tsinghua.edu.cn/simple \
    -r requirements.txt && \
    echo "安装生产环境依赖..." && \
    pip install --no-cache-dir --timeout=120 --retries=5 \
    -i https://pypi.tuna.tsinghua.edu.cn/simple \
    gunicorn==21.2.0 && \
    echo "✅ 所有Python依赖安装完成"

# 验证关键依赖
RUN echo "验证依赖安装..." && \
    python -c "import flask; print(f'✅ Flask: {flask.__version__}')" && \
    python -c "import psycopg2; print('✅ psycopg2: OK')" && \
    python -c "import gunicorn; print('✅ gunicorn: OK')" && \
    echo "✅ 依赖验证完成"

# 复制应用代码
COPY . .

# 创建必要的目录
RUN mkdir -p logs uploads temp

# 创建非root用户 (安全最佳实践)
RUN groupadd -r appgroup && useradd -r -g appgroup -d /app -s /bin/bash appuser

# 设置文件权限
RUN chown -R appuser:appgroup /app \
    && chmod +x run.py

# 切换到非root用户
USER appuser

# 创建启动脚本
RUN echo '#!/bin/bash\n\
set -e\n\
echo "Starting QA Platform Backend..."\n\
echo "Python version: $(python --version)"\n\
echo "Working directory: $(pwd)"\n\
echo "Environment: $FLASK_ENV"\n\
\n\
# 等待数据库连接\n\
echo "Waiting for database connection..."\n\
python -c "\n\
import time\n\
import sys\n\
from sqlalchemy import create_engine\n\
import os\n\
\n\
db_url = os.getenv(\"DATABASE_URL\")\n\
if db_url:\n\
    for i in range(30):\n\
        try:\n\
            engine = create_engine(db_url)\n\
            engine.execute(\"SELECT 1\")\n\
            print(\"Database connection successful\")\n\
            break\n\
        except Exception as e:\n\
            print(f\"Database connection attempt {i+1}/30 failed: {e}\")\n\
            time.sleep(2)\n\
    else:\n\
        print(\"Database connection failed after 30 attempts\")\n\
        sys.exit(1)\n\
else:\n\
    print(\"DATABASE_URL not set, skipping database check\")\n\
"\n\
\n\
# 启动应用\n\
if [ "$FLASK_ENV" = "production" ]; then\n\
    echo "Starting with Gunicorn..."\n\
    exec gunicorn --bind 0.0.0.0:8088 \\\n\
                  --workers 4 \\\n\
                  --worker-class gevent \\\n\
                  --worker-connections 1000 \\\n\
                  --timeout 30 \\\n\
                  --keepalive 2 \\\n\
                  --max-requests 1000 \\\n\
                  --max-requests-jitter 50 \\\n\
                  --preload \\\n\
                  --access-logfile - \\\n\
                  --error-logfile - \\\n\
                  --log-level info \\\n\
                  "run:app"\n\
else\n\
    echo "Starting with Flask development server..."\n\
    exec python run.py\n\
fi' > /app/start.sh \
    && chmod +x /app/start.sh

# 健康检查脚本
RUN echo '#!/bin/bash\n\
curl -f http://localhost:8088/api/health || exit 1' > /app/health-check.sh \
    && chmod +x /app/health-check.sh

# 健康检查
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD /app/health-check.sh

# 暴露端口
EXPOSE 8088

# 启动命令
CMD ["/app/start.sh"]
