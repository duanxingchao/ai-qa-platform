2025-08-15 13:32:07 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 13:32:07 - sqlalchemy.engine.Engine - INFO - [cached since 4857s ago] {'created_at_1': datetime.datetime(2025, 8, 15, 5, 27, 7, 665081)}
2025-08-15 13:32:07 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 13:32:07 - sqlalchemy.engine.Engine - INFO - [cached since 4857s ago] {'created_at_1': datetime.datetime(2025, 8, 15, 5, 27, 7, 665081)}
2025-08-15 13:32:07 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT scores.id AS scores_id, scores.answer_id AS scores_answer_id, scores.score_1 AS scores_score_1, scores.score_2 AS scores_score_2, scores.score_3 AS scores_score_3, scores.score_4 AS scores_score_4, scores.score_5 AS scores_score_5, scores.dimension_1_name AS scores_dimension_1_name, scores.dimension_2_name AS scores_dimension_2_name, scores.dimension_3_name AS scores_dimension_3_name, scores.dimension_4_name AS scores_dimension_4_name, scores.dimension_5_name AS scores_dimension_5_name, scores.average_score AS scores_average_score, scores.comment AS scores_comment, scores.rated_at AS scores_rated_at 
FROM scores 
WHERE scores.rated_at >= %(rated_at_1)s) AS anon_1
2025-08-15 13:32:07 - sqlalchemy.engine.Engine - INFO - [cached since 4857s ago] {'rated_at_1': datetime.datetime(2025, 8, 15, 5, 27, 7, 665081)}
2025-08-15 13:32:07 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.assistant_type = %(assistant_type_1)s AND answers.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 13:32:07 - sqlalchemy.engine.Engine - INFO - [cached since 4857s ago] {'assistant_type_1': 'yoyo', 'created_at_1': datetime.datetime(2025, 8, 15, 5, 27, 7, 665081)}
2025-08-15 13:32:07 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.assistant_type = %(assistant_type_1)s AND answers.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 13:32:07 - sqlalchemy.engine.Engine - INFO - [cached since 4857s ago] {'assistant_type_1': 'doubao', 'created_at_1': datetime.datetime(2025, 8, 15, 5, 27, 7, 665081)}
2025-08-15 13:32:07 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.assistant_type = %(assistant_type_1)s AND answers.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 13:32:07 - sqlalchemy.engine.Engine - INFO - [cached since 4857s ago] {'assistant_type_1': 'xiaotian', 'created_at_1': datetime.datetime(2025, 8, 15, 5, 27, 7, 665081)}
2025-08-15 13:32:07 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-15 13:32:35 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-15 13:32:35 - sqlalchemy.engine.Engine - INFO - SELECT users.id AS users_id, users.username AS users_username, users.display_name AS users_display_name, users.password_hash AS users_password_hash, users.role AS users_role, users.status AS users_status, users.created_at AS users_created_at, users.last_login_at AS users_last_login_at, users.login_count AS users_login_count 
FROM users 
WHERE users.id = %(pk_1)s
2025-08-15 13:32:35 - sqlalchemy.engine.Engine - INFO - [cached since 5004s ago] {'pk_1': '1'}
2025-08-15 13:32:35 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-15 13:32:35 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-15 13:32:35 - app.api.word_analysis_api - INFO - 获取词云数据请求: time_range=week, limit=40
2025-08-15 13:32:35 - app.api.word_analysis_api - INFO - 获取词云数据请求: time_range=week, limit=40
2025-08-15 13:32:35 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s) AS anon_1
2025-08-15 13:32:35 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-15 13:32:35 - app.services.word_analysis_service - INFO - 开始获取热词分析数据，时间范围: week, 限制: 40
2025-08-15 13:32:35 - app.services.word_analysis_service - INFO - 开始获取热词分析数据，时间范围: week, 限制: 40
2025-08-15 13:32:35 - sqlalchemy.engine.Engine - INFO - SELECT questions.classification AS questions_classification, count(questions.id) AS badcase_count 
FROM questions 
WHERE questions.is_badcase = true GROUP BY questions.classification ORDER BY count(questions.id) DESC 
 LIMIT %(param_1)s
2025-08-15 13:32:35 - sqlalchemy.engine.Engine - INFO - [cached since 4969s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 17, 23, 59, 59, 999999), 'processing_status_1': 'scored'}
2025-08-15 13:32:35 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-15 13:32:35 - sqlalchemy.engine.Engine - INFO - [cached since 4886s ago] {'param_1': 3}
2025-08-15 13:32:35 - sqlalchemy.engine.Engine - INFO - SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.query IS NOT NULL AND questions.query != %(query_1)s AND questions.is_deleted = false
2025-08-15 13:32:35 - sqlalchemy.engine.Engine - INFO - [cached since 4886s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 17, 23, 59, 59, 999999), 'query_1': ''}
2025-08-15 13:32:35 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s AND questions.is_badcase = true) AS anon_1
2025-08-15 13:32:35 - app.services.word_analysis_service - INFO - 查询到 260 个问题，时间范围: 2025-08-11 00:00:00 至 2025-08-17 23:59:59.999999
2025-08-15 13:32:35 - sqlalchemy.engine.Engine - INFO - 
                WITH dimension_scores AS (
                    -- 维度1的数据
                    SELECT
                        s.dimension_1_name as dimension_name,
                        s.score_1 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_1_name IS NOT NULL
                    AND s.score_1 IS NOT NULL

                    UNION ALL

                    -- 维度2的数据
                    SELECT
                        s.dimension_2_name as dimension_name,
                        s.score_2 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_2_name IS NOT NULL
                    AND s.score_2 IS NOT NULL

                    UNION ALL

                    -- 维度3的数据
                    SELECT
                        s.dimension_3_name as dimension_name,
                        s.score_3 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_3_name IS NOT NULL
                    AND s.score_3 IS NOT NULL

                    UNION ALL

                    -- 维度4的数据
                    SELECT
                        s.dimension_4_name as dimension_name,
                        s.score_4 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_4_name IS NOT NULL
                    AND s.score_4 IS NOT NULL

                    UNION ALL

                    -- 维度5的数据
                    SELECT
                        s.dimension_5_name as dimension_name,
                        s.score_5 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_5_name IS NOT NULL
                    AND s.score_5 IS NOT NULL
                )
                SELECT
                    dimension_name,
                    AVG(score) as avg_score,
                    COUNT(*) as sample_count
                FROM dimension_scores
                GROUP BY dimension_name
                ORDER BY avg_score ASC
            
2025-08-15 13:32:35 - sqlalchemy.engine.Engine - INFO - [cached since 4969s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 17, 23, 59, 59, 999999), 'processing_status_1': 'scored'}
2025-08-15 13:32:35 - app.services.word_analysis_service - INFO - 查询到 260 个问题，时间范围: 2025-08-11 00:00:00 至 2025-08-17 23:59:59.999999
2025-08-15 13:32:35 - sqlalchemy.engine.Engine - INFO - [cached since 4886s ago] {'classification': '其他'}
2025-08-15 13:32:35 - app.services.word_analysis_service - INFO - 问题样本 1: 为什么支付失败了？...
2025-08-15 13:32:35 - app.services.word_analysis_service - INFO - 问题样本 1: 为什么支付失败了？...
2025-08-15 13:32:35 - app.services.word_analysis_service - INFO - 问题样本 2: 数据统计在哪里可以找到？...
2025-08-15 13:32:35 - app.services.word_analysis_service - INFO - 问题样本 2: 数据统计在哪里可以找到？...
2025-08-15 13:32:35 - app.services.word_analysis_service - INFO - 问题样本 3: 如何更新个人信息？...
2025-08-15 13:32:35 - app.services.word_analysis_service - INFO - 问题样本 3: 如何更新个人信息？...
2025-08-15 13:32:35 - app.services.word_analysis_service - INFO - 有效问题文本数: 260, 总文本长度: 2914
2025-08-15 13:32:35 - app.services.word_analysis_service - INFO - 有效问题文本数: 260, 总文本长度: 2914
2025-08-15 13:32:35 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s AND questions.is_badcase = true AND questions.badcase_review_status = %(badcase_review_status_1)s) AS anon_1
2025-08-15 13:32:35 - sqlalchemy.engine.Engine - INFO - 
                WITH dimension_scores AS (
                    -- 维度1的数据
                    SELECT
                        s.dimension_1_name as dimension_name,
                        s.score_1 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_1_name IS NOT NULL
                    AND s.score_1 IS NOT NULL

                    UNION ALL

                    -- 维度2的数据
                    SELECT
                        s.dimension_2_name as dimension_name,
                        s.score_2 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_2_name IS NOT NULL
                    AND s.score_2 IS NOT NULL

                    UNION ALL

                    -- 维度3的数据
                    SELECT
                        s.dimension_3_name as dimension_name,
                        s.score_3 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_3_name IS NOT NULL
                    AND s.score_3 IS NOT NULL

                    UNION ALL

                    -- 维度4的数据
                    SELECT
                        s.dimension_4_name as dimension_name,
                        s.score_4 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_4_name IS NOT NULL
                    AND s.score_4 IS NOT NULL

                    UNION ALL

                    -- 维度5的数据
                    SELECT
                        s.dimension_5_name as dimension_name,
                        s.score_5 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_5_name IS NOT NULL
                    AND s.score_5 IS NOT NULL
                )
                SELECT
                    dimension_name,
                    AVG(score) as avg_score,
                    COUNT(*) as sample_count
                FROM dimension_scores
                GROUP BY dimension_name
                ORDER BY avg_score ASC
            
2025-08-15 13:32:35 - sqlalchemy.engine.Engine - INFO - [cached since 4969s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 17, 23, 59, 59, 999999), 'processing_status_1': 'scored', 'badcase_review_status_1': 'pending'}
2025-08-15 13:32:35 - app.services.word_analysis_service - INFO - 文本分析完成，原始词汇: 1755, 过滤后: 653, 唯一词汇: 58
2025-08-15 13:32:35 - app.services.word_analysis_service - INFO - 文本分析完成，原始词汇: 1755, 过滤后: 653, 唯一词汇: 58
2025-08-15 13:32:35 - sqlalchemy.engine.Engine - INFO - [cached since 4886s ago] {'classification': '产品使用'}
2025-08-15 13:32:35 - app.services.word_analysis_service - INFO - 热词分析完成，共分析 260 个问题，生成 40 个热词
2025-08-15 13:32:35 - app.services.word_analysis_service - INFO - 热词分析完成，共分析 260 个问题，生成 40 个热词
2025-08-15 13:32:35 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-15 13:32:35 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s AND questions.badcase_review_status = %(badcase_review_status_1)s) AS anon_1
2025-08-15 13:32:35 - sqlalchemy.engine.Engine - INFO - [cached since 4969s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 17, 23, 59, 59, 999999), 'processing_status_1': 'scored', 'badcase_review_status_1': 'reviewed'}
2025-08-15 13:32:35 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s AND questions.badcase_review_status = %(badcase_review_status_1)s AND questions.is_badcase = false) AS anon_1
2025-08-15 13:32:35 - sqlalchemy.engine.Engine - INFO - [cached since 4969s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 17, 23, 59, 59, 999999), 'processing_status_1': 'scored', 'badcase_review_status_1': 'reviewed'}
2025-08-15 13:32:35 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-15 13:32:35 - sqlalchemy.engine.Engine - INFO - 
                WITH dimension_scores AS (
                    -- 维度1的数据
                    SELECT
                        s.dimension_1_name as dimension_name,
                        s.score_1 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_1_name IS NOT NULL
                    AND s.score_1 IS NOT NULL

                    UNION ALL

                    -- 维度2的数据
                    SELECT
                        s.dimension_2_name as dimension_name,
                        s.score_2 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_2_name IS NOT NULL
                    AND s.score_2 IS NOT NULL

                    UNION ALL

                    -- 维度3的数据
                    SELECT
                        s.dimension_3_name as dimension_name,
                        s.score_3 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_3_name IS NOT NULL
                    AND s.score_3 IS NOT NULL

                    UNION ALL

                    -- 维度4的数据
                    SELECT
                        s.dimension_4_name as dimension_name,
                        s.score_4 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_4_name IS NOT NULL
                    AND s.score_4 IS NOT NULL

                    UNION ALL

                    -- 维度5的数据
                    SELECT
                        s.dimension_5_name as dimension_name,
                        s.score_5 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_5_name IS NOT NULL
                    AND s.score_5 IS NOT NULL
                )
                SELECT
                    dimension_name,
                    AVG(score) as avg_score,
                    COUNT(*) as sample_count
                FROM dimension_scores
                GROUP BY dimension_name
                ORDER BY avg_score ASC
            
2025-08-15 13:32:35 - sqlalchemy.engine.Engine - INFO - [cached since 4886s ago] {'classification': '功能建议'}
2025-08-15 13:32:35 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions) AS anon_1
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - [cached since 5039s ago] {}
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - [cached since 4886s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0)}
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s) AS anon_1
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - [cached since 4886s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'classification_1': ''}
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.classification IS NOT NULL AND questions.classification != %(classification_1)s) AS anon_1
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - [cached since 4886s ago] {'classification_1': ''}
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT access_logs.id AS access_logs_id, access_logs.user_id AS access_logs_user_id, access_logs.username AS access_logs_username, access_logs.action AS access_logs_action, access_logs.ip_address AS access_logs_ip_address, access_logs.created_at AS access_logs_created_at 
FROM access_logs 
WHERE access_logs.action = %(action_1)s) AS anon_1
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - [cached since 4888s ago] {'action_1': 'login'}
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT access_logs.id AS access_logs_id, access_logs.user_id AS access_logs_user_id, access_logs.username AS access_logs_username, access_logs.action AS access_logs_action, access_logs.ip_address AS access_logs_ip_address, access_logs.created_at AS access_logs_created_at 
FROM access_logs 
WHERE access_logs.action = %(action_1)s AND access_logs.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - [cached since 4886s ago] {'action_1': 'login', 'created_at_1': datetime.datetime(2025, 8, 11, 0, 0)}
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - [cached since 4886s ago] {'created_at_1': datetime.datetime(2025, 8, 15, 0, 0)}
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - [cached since 4886s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0)}
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s) AS anon_1
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - [cached since 4886s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'classification_1': ''}
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - SELECT coalesce(sum(least(anon_1.cnt, %(least_1)s)), %(coalesce_2)s) AS coalesce_1 
FROM (SELECT answers.question_business_id AS qbid, count(answers.id) AS cnt 
FROM answers JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.created_at >= %(created_at_1)s AND answers.created_at >= %(created_at_2)s AND answers.assistant_type IN (%(assistant_type_1_1)s, %(assistant_type_1_2)s) AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s GROUP BY answers.question_business_id) AS anon_1
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - [cached since 4886s ago] {'least_1': 2, 'coalesce_2': 0, 'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 11, 0, 0), 'classification_1': '', 'assistant_type_1_1': 'doubao', 'assistant_type_1_2': 'xiaotian'}
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT count(distinct(answers.question_business_id)) AS count_2 
FROM answers JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.created_at >= %(created_at_1)s AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s AND answers.is_scored = true AND answers.assistant_type IN (%(assistant_type_1_1)s, %(assistant_type_1_2)s, %(assistant_type_1_3)s) GROUP BY answers.question_business_id 
HAVING count(distinct(answers.assistant_type)) = %(count_3)s) AS anon_1
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - [cached since 4886s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'classification_1': '', 'count_3': 3, 'assistant_type_1_1': 'yoyo', 'assistant_type_1_2': 'doubao', 'assistant_type_1_3': 'xiaotian'}
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - SELECT count(distinct(questions.business_id)) AS count_1 
FROM questions JOIN answers ON questions.business_id = answers.question_business_id 
WHERE questions.created_at >= %(created_at_1)s AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s AND answers.assistant_type IN (%(assistant_type_1_1)s, %(assistant_type_1_2)s) AND answers.created_at >= %(created_at_2)s
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - [cached since 4886s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'classification_1': '', 'created_at_2': datetime.datetime(2025, 8, 11, 0, 0), 'assistant_type_1_1': 'doubao', 'assistant_type_1_2': 'xiaotian'}
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.processing_status = %(processing_status_1)s AND questions.is_badcase = true) AS anon_1
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - [cached since 4886s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'processing_status_1': 'scored'}
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.processing_status = %(processing_status_1)s AND questions.badcase_review_status = %(badcase_review_status_1)s) AS anon_1
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - [cached since 4886s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'processing_status_1': 'scored', 'badcase_review_status_1': 'reviewed'}
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - [cached since 4886s ago] {'created_at_1': datetime.datetime(2025, 8, 15, 4, 32, 36, 374657)}
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - [cached since 4886s ago] {'created_at_1': datetime.datetime(2025, 8, 14, 23, 32, 36, 374657)}
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.updated_at >= %(updated_at_1)s AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s) AS anon_1
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - [cached since 4886s ago] {'updated_at_1': datetime.datetime(2025, 8, 15, 5, 2, 36, 374657), 'classification_1': ''}
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers JOIN questions ON answers.question_business_id = questions.business_id 
WHERE answers.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - [cached since 4886s ago] {'created_at_1': datetime.datetime(2025, 8, 15, 5, 2, 36, 374657)}
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.updated_at >= %(updated_at_1)s AND answers.is_scored = true) AS anon_1
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - [cached since 4886s ago] {'updated_at_1': datetime.datetime(2025, 8, 15, 5, 2, 36, 374657)}
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - SELECT date_trunc(%(date_trunc_1)s, questions.created_at) AS day, count(questions.id) AS count 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s GROUP BY date_trunc(%(date_trunc_2)s, questions.created_at) ORDER BY day
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - [cached since 4886s ago] {'date_trunc_1': 'day', 'created_at_1': datetime.datetime(2025, 8, 8, 5, 32, 36, 395534), 'date_trunc_2': 'day'}
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - SELECT date_trunc(%(date_trunc_1)s, questions.updated_at) AS day, count(questions.id) AS count 
FROM questions 
WHERE questions.updated_at >= %(updated_at_1)s AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s AND questions.processing_status IN (%(processing_status_1_1)s, %(processing_status_1_2)s, %(processing_status_1_3)s) GROUP BY date_trunc(%(date_trunc_2)s, questions.updated_at) ORDER BY day
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - [cached since 4886s ago] {'date_trunc_1': 'day', 'updated_at_1': datetime.datetime(2025, 8, 8, 5, 32, 36, 395534), 'classification_1': '', 'date_trunc_2': 'day', 'processing_status_1_1': 'classified', 'processing_status_1_2': 'answers_generated', 'processing_status_1_3': 'scored'}
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - SELECT date_trunc(%(date_trunc_1)s, answers.created_at) AS day, count(answers.id) AS count 
FROM answers JOIN questions ON answers.question_business_id = questions.business_id 
WHERE answers.created_at >= %(created_at_1)s AND questions.created_at >= %(created_at_2)s AND answers.assistant_type IN (%(assistant_type_1_1)s, %(assistant_type_1_2)s) AND answers.is_scored = true AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s GROUP BY date_trunc(%(date_trunc_2)s, answers.created_at) ORDER BY day
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - [cached since 4886s ago] {'date_trunc_1': 'day', 'created_at_1': datetime.datetime(2025, 8, 8, 5, 32, 36, 395534), 'created_at_2': datetime.datetime(2025, 8, 8, 5, 32, 36, 395534), 'classification_1': '', 'date_trunc_2': 'day', 'assistant_type_1_1': 'doubao', 'assistant_type_1_2': 'xiaotian'}
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - SELECT answers.assistant_type AS answers_assistant_type, avg(scores.score_1) AS avg_score_1, avg(scores.score_2) AS avg_score_2, avg(scores.score_3) AS avg_score_3, avg(scores.score_4) AS avg_score_4, avg(scores.score_5) AS avg_score_5, avg(scores.average_score) AS avg_total, count(scores.id) AS score_count 
FROM answers JOIN scores ON answers.id = scores.answer_id GROUP BY answers.assistant_type
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - [cached since 4886s ago] {}
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - SELECT system_config.id AS system_config_id, system_config.config_key AS system_config_config_key, system_config.config_value AS system_config_config_value, system_config.config_type AS system_config_config_type, system_config.description AS system_config_description, system_config.effective_time AS system_config_effective_time, system_config.previous_value AS system_config_previous_value, system_config.status AS system_config_status, system_config.created_at AS system_config_created_at, system_config.updated_at AS system_config_updated_at 
FROM system_config 
WHERE system_config.config_key = %(config_key_1)s 
 LIMIT %(param_1)s
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - [cached since 4971s ago] {'config_key_1': 'display.hot_categories_time_range', 'param_1': 1}
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - SELECT questions.classification AS name, count(questions.id) AS count 
FROM questions 
WHERE questions.classification IS NOT NULL AND questions.classification != %(classification_1)s GROUP BY questions.classification
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - [cached since 4886s ago] {'classification_1': ''}
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - SELECT questions.classification AS name, count(questions.id) AS count 
FROM questions 
WHERE questions.classification IS NOT NULL AND questions.classification != %(classification_1)s AND questions.created_at >= %(created_at_1)s GROUP BY questions.classification ORDER BY count(questions.id) DESC
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - [cached since 4886s ago] {'classification_1': '', 'created_at_1': datetime.datetime(2025, 8, 8, 5, 32, 36, 409053)}
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - SELECT questions.classification AS name, count(questions.id) AS count 
FROM questions 
WHERE questions.classification IS NOT NULL AND questions.classification != %(classification_1)s GROUP BY questions.classification ORDER BY count(questions.id) DESC
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - [cached since 5039s ago] {'classification_1': ''}
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions ORDER BY questions.created_at DESC 
 LIMIT %(param_1)s
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - [cached since 4886s ago] {'param_1': 5}
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers ORDER BY answers.created_at DESC 
 LIMIT %(param_1)s
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - [cached since 4886s ago] {'param_1': 5}
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - SELECT scores.id AS scores_id, scores.answer_id AS scores_answer_id, scores.score_1 AS scores_score_1, scores.score_2 AS scores_score_2, scores.score_3 AS scores_score_3, scores.score_4 AS scores_score_4, scores.score_5 AS scores_score_5, scores.dimension_1_name AS scores_dimension_1_name, scores.dimension_2_name AS scores_dimension_2_name, scores.dimension_3_name AS scores_dimension_3_name, scores.dimension_4_name AS scores_dimension_4_name, scores.dimension_5_name AS scores_dimension_5_name, scores.average_score AS scores_average_score, scores.comment AS scores_comment, scores.rated_at AS scores_rated_at 
FROM scores ORDER BY scores.rated_at DESC 
 LIMIT %(param_1)s
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - [cached since 4886s ago] {'param_1': 5}
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - [cached since 4886s ago] {'created_at_1': datetime.datetime(2025, 8, 15, 5, 27, 36, 414651)}
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - [cached since 4886s ago] {'created_at_1': datetime.datetime(2025, 8, 15, 5, 27, 36, 414651)}
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT scores.id AS scores_id, scores.answer_id AS scores_answer_id, scores.score_1 AS scores_score_1, scores.score_2 AS scores_score_2, scores.score_3 AS scores_score_3, scores.score_4 AS scores_score_4, scores.score_5 AS scores_score_5, scores.dimension_1_name AS scores_dimension_1_name, scores.dimension_2_name AS scores_dimension_2_name, scores.dimension_3_name AS scores_dimension_3_name, scores.dimension_4_name AS scores_dimension_4_name, scores.dimension_5_name AS scores_dimension_5_name, scores.average_score AS scores_average_score, scores.comment AS scores_comment, scores.rated_at AS scores_rated_at 
FROM scores 
WHERE scores.rated_at >= %(rated_at_1)s) AS anon_1
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - [cached since 4886s ago] {'rated_at_1': datetime.datetime(2025, 8, 15, 5, 27, 36, 414651)}
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.assistant_type = %(assistant_type_1)s AND answers.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - [cached since 4886s ago] {'assistant_type_1': 'yoyo', 'created_at_1': datetime.datetime(2025, 8, 15, 5, 27, 36, 414651)}
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.assistant_type = %(assistant_type_1)s AND answers.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - [cached since 4886s ago] {'assistant_type_1': 'doubao', 'created_at_1': datetime.datetime(2025, 8, 15, 5, 27, 36, 414651)}
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.assistant_type = %(assistant_type_1)s AND answers.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - [cached since 4886s ago] {'assistant_type_1': 'xiaotian', 'created_at_1': datetime.datetime(2025, 8, 15, 5, 27, 36, 414651)}
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - SELECT questions.classification AS name, count(questions.id) AS count 
FROM questions 
WHERE questions.classification IS NOT NULL AND questions.classification != %(classification_1)s GROUP BY questions.classification
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - [cached since 4886s ago] {'classification_1': ''}
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - [cached since 4886s ago] {'classification_1': '科学问题', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - [cached since 4886s ago] {'classification_1': '科学问题', 'assistant_type_1': 'doubao', 'param_1': 1}
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - [cached since 4886s ago] {'classification_1': '科学问题', 'assistant_type_1': 'xiaotian', 'param_1': 1}
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - [cached since 4886s ago] {'classification_1': '数据分析', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - [cached since 4886s ago] {'classification_1': '数据分析', 'assistant_type_1': 'doubao', 'param_1': 1}
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - [cached since 4886s ago] {'classification_1': '数据分析', 'assistant_type_1': 'xiaotian', 'param_1': 1}
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - [cached since 4886s ago] {'classification_1': '用户体验', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - [cached since 4886s ago] {'classification_1': '用户体验', 'assistant_type_1': 'doubao', 'param_1': 1}
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - [cached since 4886s ago] {'classification_1': '用户体验', 'assistant_type_1': 'xiaotian', 'param_1': 1}
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - [cached since 4886s ago] {'classification_1': '性能优化', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - [cached since 4886s ago] {'classification_1': '性能优化', 'assistant_type_1': 'doubao', 'param_1': 1}
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - [cached since 4886s ago] {'classification_1': '性能优化', 'assistant_type_1': 'xiaotian', 'param_1': 1}
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - [cached since 4886s ago] {'classification_1': '业务咨询', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - [cached since 4886s ago] {'classification_1': '业务咨询', 'assistant_type_1': 'doubao', 'param_1': 1}
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - [cached since 4886s ago] {'classification_1': '业务咨询', 'assistant_type_1': 'xiaotian', 'param_1': 1}
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - [cached since 4886s ago] {'classification_1': '经济问题', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - [cached since 4886s ago] {'classification_1': '经济问题', 'assistant_type_1': 'doubao', 'param_1': 1}
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - [cached since 4886s ago] {'classification_1': '经济问题', 'assistant_type_1': 'xiaotian', 'param_1': 1}
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - [cached since 4886s ago] {'classification_1': '功能建议', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - [cached since 4886s ago] {'classification_1': '功能建议', 'assistant_type_1': 'doubao', 'param_1': 1}
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - [cached since 4886s ago] {'classification_1': '功能建议', 'assistant_type_1': 'xiaotian', 'param_1': 1}
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - [cached since 4886s ago] {'classification_1': '账户管理', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - [cached since 4886s ago] {'classification_1': '账户管理', 'assistant_type_1': 'doubao', 'param_1': 1}
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - [cached since 4886s ago] {'classification_1': '账户管理', 'assistant_type_1': 'xiaotian', 'param_1': 1}
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - [cached since 4886s ago] {'classification_1': '教育问题', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - [cached since 4886s ago] {'classification_1': '教育问题', 'assistant_type_1': 'doubao', 'param_1': 1}
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - [cached since 4886s ago] {'classification_1': '教育问题', 'assistant_type_1': 'xiaotian', 'param_1': 1}
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - [cached since 4886s ago] {'classification_1': '技术问题', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - [cached since 4886s ago] {'classification_1': '技术问题', 'assistant_type_1': 'doubao', 'param_1': 1}
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - [cached since 4886s ago] {'classification_1': '技术问题', 'assistant_type_1': 'xiaotian', 'param_1': 1}
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - [cached since 4886s ago] {'classification_1': '其他', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - [cached since 4886s ago] {'classification_1': '其他', 'assistant_type_1': 'doubao', 'param_1': 1}
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - [cached since 4886s ago] {'classification_1': '其他', 'assistant_type_1': 'xiaotian', 'param_1': 1}
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - [cached since 4886s ago] {'classification_1': '安全设置', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - [cached since 4886s ago] {'classification_1': '安全设置', 'assistant_type_1': 'doubao', 'param_1': 1}
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - [cached since 4886s ago] {'classification_1': '安全设置', 'assistant_type_1': 'xiaotian', 'param_1': 1}
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - [cached since 4886s ago] {'classification_1': '系统优化', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - [cached since 4886s ago] {'classification_1': '系统优化', 'assistant_type_1': 'doubao', 'param_1': 1}
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - [cached since 4886s ago] {'classification_1': '系统优化', 'assistant_type_1': 'xiaotian', 'param_1': 1}
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - [cached since 4886s ago] {'classification_1': '工程问题', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - [cached since 4886s ago] {'classification_1': '工程问题', 'assistant_type_1': 'doubao', 'param_1': 1}
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - [cached since 4886s ago] {'classification_1': '工程问题', 'assistant_type_1': 'xiaotian', 'param_1': 1}
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - [cached since 4886s ago] {'classification_1': '故障排查', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - [cached since 4886s ago] {'classification_1': '故障排查', 'assistant_type_1': 'doubao', 'param_1': 1}
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - [cached since 4886s ago] {'classification_1': '故障排查', 'assistant_type_1': 'xiaotian', 'param_1': 1}
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - [cached since 4886s ago] {'classification_1': '产品使用', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - [cached since 4886s ago] {'classification_1': '产品使用', 'assistant_type_1': 'doubao', 'param_1': 1}
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - [cached since 4886s ago] {'classification_1': '产品使用', 'assistant_type_1': 'xiaotian', 'param_1': 1}
2025-08-15 13:32:36 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-15 13:32:39 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-15 13:32:39 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions) AS anon_1
2025-08-15 13:32:39 - sqlalchemy.engine.Engine - INFO - [cached since 5042s ago] {}
2025-08-15 13:32:39 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers) AS anon_1
2025-08-15 13:32:39 - sqlalchemy.engine.Engine - INFO - [cached since 5042s ago] {}
2025-08-15 13:32:39 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.is_scored = true) AS anon_1
2025-08-15 13:32:39 - sqlalchemy.engine.Engine - INFO - [cached since 5042s ago] {}
2025-08-15 13:32:39 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT scores.id AS scores_id, scores.answer_id AS scores_answer_id, scores.score_1 AS scores_score_1, scores.score_2 AS scores_score_2, scores.score_3 AS scores_score_3, scores.score_4 AS scores_score_4, scores.score_5 AS scores_score_5, scores.dimension_1_name AS scores_dimension_1_name, scores.dimension_2_name AS scores_dimension_2_name, scores.dimension_3_name AS scores_dimension_3_name, scores.dimension_4_name AS scores_dimension_4_name, scores.dimension_5_name AS scores_dimension_5_name, scores.average_score AS scores_average_score, scores.comment AS scores_comment, scores.rated_at AS scores_rated_at 
FROM scores) AS anon_1
2025-08-15 13:32:39 - sqlalchemy.engine.Engine - INFO - [cached since 5042s ago] {}
2025-08-15 13:32:39 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.assistant_type = %(assistant_type_1)s) AS anon_1
2025-08-15 13:32:39 - sqlalchemy.engine.Engine - INFO - [cached since 5042s ago] {'assistant_type_1': 'doubao'}
2025-08-15 13:32:39 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.assistant_type = %(assistant_type_1)s) AS anon_1
2025-08-15 13:32:39 - sqlalchemy.engine.Engine - INFO - [cached since 5042s ago] {'assistant_type_1': 'xiaotian'}
2025-08-15 13:32:39 - sqlalchemy.engine.Engine - INFO - SELECT count(questions.id) AS count_1 
FROM questions
2025-08-15 13:32:39 - sqlalchemy.engine.Engine - INFO - [cached since 5042s ago] {}
2025-08-15 13:32:39 - sqlalchemy.engine.Engine - INFO - SELECT count(answers.id) AS count_1 
FROM answers
2025-08-15 13:32:39 - sqlalchemy.engine.Engine - INFO - [cached since 5042s ago] {}
2025-08-15 13:32:39 - sqlalchemy.engine.Engine - INFO - SELECT count(answers.id) AS count_1 
FROM answers 
WHERE answers.assistant_type = %(assistant_type_1)s
2025-08-15 13:32:39 - sqlalchemy.engine.Engine - INFO - [cached since 5042s ago] {'assistant_type_1': 'yoyo'}
2025-08-15 13:32:39 - sqlalchemy.engine.Engine - INFO - SELECT COUNT(*) FROM table1
2025-08-15 13:32:39 - sqlalchemy.engine.Engine - INFO - [cached since 5042s ago] {}
2025-08-15 13:32:39 - sqlalchemy.engine.Engine - INFO - SELECT COUNT(*) FROM table1 WHERE answer IS NOT NULL AND answer != '' AND TRIM(answer) != ''
2025-08-15 13:32:39 - sqlalchemy.engine.Engine - INFO - [cached since 5042s ago] {}
2025-08-15 13:32:39 - sqlalchemy.engine.Engine - INFO - SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions ORDER BY questions.sendmessagetime DESC 
 LIMIT %(param_1)s
2025-08-15 13:32:39 - sqlalchemy.engine.Engine - INFO - [cached since 5042s ago] {'param_1': 1}
2025-08-15 13:32:39 - sqlalchemy.engine.Engine - INFO - SELECT MAX(sendmessagetime) FROM table1
2025-08-15 13:32:39 - sqlalchemy.engine.Engine - INFO - [cached since 5042s ago] {}
2025-08-15 13:32:39 - app.services.sync_service - ERROR - 获取同步统计失败: 'NoneType' object has no attribute 'isoformat'
2025-08-15 13:32:39 - app.services.sync_service - ERROR - 获取同步统计失败: 'NoneType' object has no attribute 'isoformat'
2025-08-15 13:32:39 - sqlalchemy.engine.Engine - INFO - SELECT date(questions.sendmessagetime) AS date, count(questions.id) AS questions 
FROM questions 
WHERE questions.sendmessagetime >= %(sendmessagetime_1)s GROUP BY date(questions.sendmessagetime)
2025-08-15 13:32:39 - sqlalchemy.engine.Engine - INFO - [cached since 5042s ago] {'sendmessagetime_1': datetime.datetime(2025, 8, 8, 5, 32, 39, 325514)}
2025-08-15 13:32:39 - sqlalchemy.engine.Engine - INFO - SELECT date(questions.sendmessagetime) AS date, count(questions.id) AS classifications 
FROM questions 
WHERE questions.sendmessagetime >= %(sendmessagetime_1)s AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s GROUP BY date(questions.sendmessagetime)
2025-08-15 13:32:39 - sqlalchemy.engine.Engine - INFO - [cached since 5042s ago] {'sendmessagetime_1': datetime.datetime(2025, 8, 8, 5, 32, 39, 325514), 'classification_1': ''}
2025-08-15 13:32:39 - sqlalchemy.engine.Engine - INFO - SELECT date(scores.rated_at) AS date, count(scores.id) AS scores 
FROM scores 
WHERE scores.rated_at >= %(rated_at_1)s GROUP BY date(scores.rated_at)
2025-08-15 13:32:39 - sqlalchemy.engine.Engine - INFO - [cached since 5042s ago] {'rated_at_1': datetime.datetime(2025, 8, 8, 5, 32, 39, 325514)}
2025-08-15 13:32:39 - sqlalchemy.engine.Engine - INFO - SELECT questions.classification AS questions_classification, count(questions.id) AS count_1 
FROM questions 
WHERE questions.classification IS NOT NULL GROUP BY questions.classification
2025-08-15 13:32:39 - sqlalchemy.engine.Engine - INFO - [cached since 5042s ago] {}
2025-08-15 13:32:39 - sqlalchemy.engine.Engine - INFO - SELECT answers.assistant_type AS answers_assistant_type, count(answers.id) AS total 
FROM answers GROUP BY answers.assistant_type
2025-08-15 13:32:39 - sqlalchemy.engine.Engine - INFO - [cached since 5042s ago] {}
2025-08-15 13:32:39 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-15 13:32:39 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-15 13:32:39 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions ORDER BY questions.created_at DESC) AS anon_1
2025-08-15 13:32:39 - sqlalchemy.engine.Engine - INFO - [cached since 5042s ago] {}
2025-08-15 13:32:39 - sqlalchemy.engine.Engine - INFO - SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions ORDER BY questions.created_at DESC 
 LIMIT %(param_1)s OFFSET %(param_2)s
2025-08-15 13:32:39 - sqlalchemy.engine.Engine - INFO - [cached since 5042s ago] {'param_1': 20, 'param_2': 0}
2025-08-15 13:32:39 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-15 13:32:39 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-15 13:32:39 - sqlalchemy.engine.Engine - INFO - SELECT questions.classification AS name, count(questions.id) AS count 
FROM questions 
WHERE questions.classification IS NOT NULL AND questions.classification != %(classification_1)s GROUP BY questions.classification ORDER BY count(questions.id) DESC
2025-08-15 13:32:39 - sqlalchemy.engine.Engine - INFO - [cached since 5042s ago] {'classification_1': ''}
2025-08-15 13:32:39 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-15 13:32:40 - apscheduler.scheduler - DEBUG - Looking for jobs to run
2025-08-15 13:32:40 - apscheduler.scheduler - DEBUG - Next wakeup is due at 2025-08-15 13:35:40.758640+08:00 (in 179.999268 seconds)
2025-08-15 13:32:40 - apscheduler.executors.default - INFO - Running job "可配置间隔AI处理工作流 (trigger: interval[0:03:00], next run at: 2025-08-15 13:35:40 CST)" (scheduled at 2025-08-15 13:32:40.758640+08:00)
2025-08-15 13:32:40 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-15 13:32:40 - sqlalchemy.engine.Engine - INFO - 
                    SELECT COUNT(*) FROM table1 t1
                    WHERE t1.query IS NOT NULL
                    AND t1.query != ''
                    AND TRIM(t1.query) != ''
                    AND t1.sendmessagetime >= %(week_start)s
                    AND NOT EXISTS (
                        SELECT 1 FROM questions q
                        WHERE q.business_id = MD5(CONCAT(
                            t1.pageid,
                            COALESCE(to_char(t1.sendmessagetime, 'YYYY-MM-DD"T"HH24:MI:SS.US'), ''),
                            t1.query
                        ))
                    )
                
2025-08-15 13:32:40 - sqlalchemy.engine.Engine - INFO - [cached since 5400s ago] {'week_start': datetime.datetime(2025, 8, 11, 0, 0)}
2025-08-15 13:32:40 - app.services.scheduler_service - INFO - 🔍 检测到 260 条新数据需要同步
2025-08-15 13:32:40 - app.services.scheduler_service - INFO - 🔍 检测到 260 条新数据需要同步
2025-08-15 13:32:40 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-15 13:32:40 - app.services.scheduler_service - INFO - 检测到可处理数据，开始执行完整工作流: workflow_20250815_053240
2025-08-15 13:32:40 - app.services.scheduler_service - INFO - 检测到可处理数据，开始执行完整工作流: workflow_20250815_053240
2025-08-15 13:32:40 - app.services.scheduler_service - INFO - 开始执行完整工作流: workflow_20250815_053240
2025-08-15 13:32:40 - app.services.scheduler_service - INFO - 开始执行完整工作流: workflow_20250815_053240
2025-08-15 13:32:40 - app.services.scheduler_service - INFO - 执行工作流阶段: data_sync
2025-08-15 13:32:40 - app.services.scheduler_service - INFO - 执行工作流阶段: data_sync
2025-08-15 13:32:40 - app.services.scheduler_service - INFO - 开始执行数据同步阶段 [workflow: workflow_20250815_053240]
2025-08-15 13:32:40 - app.services.scheduler_service - INFO - 开始执行数据同步阶段 [workflow: workflow_20250815_053240]
2025-08-15 13:32:40 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-15 13:32:40 - sqlalchemy.engine.Engine - INFO - SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.sendmessagetime <= %(sendmessagetime_1)s ORDER BY questions.sendmessagetime DESC 
 LIMIT %(param_1)s
2025-08-15 13:32:40 - sqlalchemy.engine.Engine - INFO - [cached since 5400s ago] {'sendmessagetime_1': datetime.datetime(2025, 8, 15, 5, 32, 40, 764888), 'param_1': 1}
2025-08-15 13:32:40 - app.services.sync_service - DEBUG - 获取最后同步时间: 2025-08-13 03:21:16
2025-08-15 13:32:40 - app.services.sync_service - DEBUG - 获取最后同步时间: 2025-08-13 03:21:16
2025-08-15 13:32:40 - app.services.sync_service - INFO - 开始数据同步，最后同步时间: 2025-08-13 03:21:16
2025-08-15 13:32:40 - app.services.sync_service - INFO - 开始数据同步，最后同步时间: 2025-08-13 03:21:16
2025-08-15 13:32:40 - sqlalchemy.engine.Engine - INFO - 
                    SELECT
                        t1.pageid,
                        t1.devicetypename,
                        t1.sendmessagetime,
                        t1.query,
                        t1.answer,
                        t1.serviceid,
                        t1.qatype,
                        t1.intent,
                        t1.iskeyboardinput,
                        t1.isstopanswer
                    FROM table1 t1
                    WHERE t1.query IS NOT NULL
                    AND t1.query != ''
                    AND TRIM(t1.query) != ''
                    AND t1.sendmessagetime >= %(week_start)s
                    AND NOT EXISTS (
                        SELECT 1 FROM questions q
                        WHERE q.business_id = MD5(CONCAT(
                            t1.pageid,
                            COALESCE(to_char(t1.sendmessagetime, 'YYYY-MM-DD"T"HH24:MI:SS.US'), ''),
                            t1.query
                        ))
                    )
                    ORDER BY t1.sendmessagetime ASC
                
2025-08-15 13:32:40 - sqlalchemy.engine.Engine - INFO - [cached since 5400s ago] {'week_start': datetime.datetime(2025, 8, 11, 0, 0)}
2025-08-15 13:32:40 - app.services.sync_service - ERROR - 从table1获取数据失败: not enough values to unpack (expected 11, got 10)
2025-08-15 13:32:40 - app.services.sync_service - ERROR - 从table1获取数据失败: not enough values to unpack (expected 11, got 10)
2025-08-15 13:32:40 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-15 13:32:40 - app.services.sync_service - ERROR - 数据同步失败: not enough values to unpack (expected 11, got 10)
2025-08-15 13:32:40 - app.services.sync_service - ERROR - 数据同步失败: not enough values to unpack (expected 11, got 10)
2025-08-15 13:32:40 - app.services.scheduler_service - ERROR - 数据同步阶段失败: 数据同步失败: not enough values to unpack (expected 11, got 10)
2025-08-15 13:32:40 - app.services.scheduler_service - ERROR - 数据同步阶段失败: 数据同步失败: not enough values to unpack (expected 11, got 10)
2025-08-15 13:32:40 - app.services.scheduler_service - ERROR - 工作流阶段失败: data_sync, 停止后续执行
2025-08-15 13:32:40 - app.services.scheduler_service - ERROR - 工作流阶段失败: data_sync, 停止后续执行
2025-08-15 13:32:40 - apscheduler.executors.default - INFO - Job "可配置间隔AI处理工作流 (trigger: interval[0:03:00], next run at: 2025-08-15 13:35:40 CST)" executed successfully
2025-08-15 13:32:41 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-15 13:32:41 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s) AS anon_1
2025-08-15 13:32:41 - sqlalchemy.engine.Engine - INFO - [cached since 4974s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 17, 23, 59, 59, 999999), 'processing_status_1': 'scored'}
2025-08-15 13:32:41 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s AND questions.is_badcase = true) AS anon_1
2025-08-15 13:32:41 - sqlalchemy.engine.Engine - INFO - [cached since 4974s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 17, 23, 59, 59, 999999), 'processing_status_1': 'scored'}
2025-08-15 13:32:41 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s AND questions.is_badcase = true AND questions.badcase_review_status = %(badcase_review_status_1)s) AS anon_1
2025-08-15 13:32:41 - sqlalchemy.engine.Engine - INFO - [cached since 4974s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 17, 23, 59, 59, 999999), 'processing_status_1': 'scored', 'badcase_review_status_1': 'pending'}
2025-08-15 13:32:41 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s AND questions.badcase_review_status = %(badcase_review_status_1)s) AS anon_1
2025-08-15 13:32:41 - sqlalchemy.engine.Engine - INFO - [cached since 4974s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 17, 23, 59, 59, 999999), 'processing_status_1': 'scored', 'badcase_review_status_1': 'reviewed'}
2025-08-15 13:32:41 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s AND questions.badcase_review_status = %(badcase_review_status_1)s AND questions.is_badcase = false) AS anon_1
2025-08-15 13:32:41 - sqlalchemy.engine.Engine - INFO - [cached since 4974s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 17, 23, 59, 59, 999999), 'processing_status_1': 'scored', 'badcase_review_status_1': 'reviewed'}
2025-08-15 13:32:41 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-15 13:32:41 - app.api.word_analysis_api - INFO - 获取词云数据请求: time_range=week, limit=40
2025-08-15 13:32:41 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-15 13:32:41 - app.api.word_analysis_api - INFO - 获取词云数据请求: time_range=week, limit=40
2025-08-15 13:32:41 - sqlalchemy.engine.Engine - INFO - SELECT questions.classification AS questions_classification, count(questions.id) AS badcase_count 
FROM questions 
WHERE questions.is_badcase = true GROUP BY questions.classification ORDER BY count(questions.id) DESC 
 LIMIT %(param_1)s
2025-08-15 13:32:41 - app.services.word_analysis_service - INFO - 开始获取热词分析数据，时间范围: week, 限制: 40
2025-08-15 13:32:41 - app.services.word_analysis_service - INFO - 开始获取热词分析数据，时间范围: week, 限制: 40
2025-08-15 13:32:41 - sqlalchemy.engine.Engine - INFO - [cached since 4891s ago] {'param_1': 3}
2025-08-15 13:32:41 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-15 13:32:41 - sqlalchemy.engine.Engine - INFO - SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.query IS NOT NULL AND questions.query != %(query_1)s AND questions.is_deleted = false
2025-08-15 13:32:41 - sqlalchemy.engine.Engine - INFO - [cached since 4891s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 17, 23, 59, 59, 999999), 'query_1': ''}
2025-08-15 13:32:41 - sqlalchemy.engine.Engine - INFO - 
                WITH dimension_scores AS (
                    -- 维度1的数据
                    SELECT
                        s.dimension_1_name as dimension_name,
                        s.score_1 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_1_name IS NOT NULL
                    AND s.score_1 IS NOT NULL

                    UNION ALL

                    -- 维度2的数据
                    SELECT
                        s.dimension_2_name as dimension_name,
                        s.score_2 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_2_name IS NOT NULL
                    AND s.score_2 IS NOT NULL

                    UNION ALL

                    -- 维度3的数据
                    SELECT
                        s.dimension_3_name as dimension_name,
                        s.score_3 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_3_name IS NOT NULL
                    AND s.score_3 IS NOT NULL

                    UNION ALL

                    -- 维度4的数据
                    SELECT
                        s.dimension_4_name as dimension_name,
                        s.score_4 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_4_name IS NOT NULL
                    AND s.score_4 IS NOT NULL

                    UNION ALL

                    -- 维度5的数据
                    SELECT
                        s.dimension_5_name as dimension_name,
                        s.score_5 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_5_name IS NOT NULL
                    AND s.score_5 IS NOT NULL
                )
                SELECT
                    dimension_name,
                    AVG(score) as avg_score,
                    COUNT(*) as sample_count
                FROM dimension_scores
                GROUP BY dimension_name
                ORDER BY avg_score ASC
            
2025-08-15 13:32:41 - sqlalchemy.engine.Engine - INFO - [cached since 4891s ago] {'classification': '其他'}
2025-08-15 13:32:41 - app.services.word_analysis_service - INFO - 查询到 260 个问题，时间范围: 2025-08-11 00:00:00 至 2025-08-17 23:59:59.999999
2025-08-15 13:32:41 - app.services.word_analysis_service - INFO - 查询到 260 个问题，时间范围: 2025-08-11 00:00:00 至 2025-08-17 23:59:59.999999
2025-08-15 13:32:41 - app.services.word_analysis_service - INFO - 问题样本 1: 为什么支付失败了？...
2025-08-15 13:32:41 - app.services.word_analysis_service - INFO - 问题样本 1: 为什么支付失败了？...
2025-08-15 13:32:41 - app.services.word_analysis_service - INFO - 问题样本 2: 数据统计在哪里可以找到？...
2025-08-15 13:32:41 - app.services.word_analysis_service - INFO - 问题样本 2: 数据统计在哪里可以找到？...
2025-08-15 13:32:41 - app.services.word_analysis_service - INFO - 问题样本 3: 如何更新个人信息？...
2025-08-15 13:32:41 - app.services.word_analysis_service - INFO - 问题样本 3: 如何更新个人信息？...
2025-08-15 13:32:41 - app.services.word_analysis_service - INFO - 有效问题文本数: 260, 总文本长度: 2914
2025-08-15 13:32:41 - app.services.word_analysis_service - INFO - 有效问题文本数: 260, 总文本长度: 2914
2025-08-15 13:32:41 - sqlalchemy.engine.Engine - INFO - 
                WITH dimension_scores AS (
                    -- 维度1的数据
                    SELECT
                        s.dimension_1_name as dimension_name,
                        s.score_1 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_1_name IS NOT NULL
                    AND s.score_1 IS NOT NULL

                    UNION ALL

                    -- 维度2的数据
                    SELECT
                        s.dimension_2_name as dimension_name,
                        s.score_2 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_2_name IS NOT NULL
                    AND s.score_2 IS NOT NULL

                    UNION ALL

                    -- 维度3的数据
                    SELECT
                        s.dimension_3_name as dimension_name,
                        s.score_3 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_3_name IS NOT NULL
                    AND s.score_3 IS NOT NULL

                    UNION ALL

                    -- 维度4的数据
                    SELECT
                        s.dimension_4_name as dimension_name,
                        s.score_4 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_4_name IS NOT NULL
                    AND s.score_4 IS NOT NULL

                    UNION ALL

                    -- 维度5的数据
                    SELECT
                        s.dimension_5_name as dimension_name,
                        s.score_5 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_5_name IS NOT NULL
                    AND s.score_5 IS NOT NULL
                )
                SELECT
                    dimension_name,
                    AVG(score) as avg_score,
                    COUNT(*) as sample_count
                FROM dimension_scores
                GROUP BY dimension_name
                ORDER BY avg_score ASC
            
2025-08-15 13:32:41 - app.services.word_analysis_service - INFO - 文本分析完成，原始词汇: 1755, 过滤后: 653, 唯一词汇: 58
2025-08-15 13:32:41 - app.services.word_analysis_service - INFO - 文本分析完成，原始词汇: 1755, 过滤后: 653, 唯一词汇: 58
2025-08-15 13:32:41 - sqlalchemy.engine.Engine - INFO - [cached since 4891s ago] {'classification': '产品使用'}
2025-08-15 13:32:41 - app.services.word_analysis_service - INFO - 热词分析完成，共分析 260 个问题，生成 40 个热词
2025-08-15 13:32:41 - app.services.word_analysis_service - INFO - 热词分析完成，共分析 260 个问题，生成 40 个热词
2025-08-15 13:32:41 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-15 13:32:41 - sqlalchemy.engine.Engine - INFO - 
                WITH dimension_scores AS (
                    -- 维度1的数据
                    SELECT
                        s.dimension_1_name as dimension_name,
                        s.score_1 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_1_name IS NOT NULL
                    AND s.score_1 IS NOT NULL

                    UNION ALL

                    -- 维度2的数据
                    SELECT
                        s.dimension_2_name as dimension_name,
                        s.score_2 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_2_name IS NOT NULL
                    AND s.score_2 IS NOT NULL

                    UNION ALL

                    -- 维度3的数据
                    SELECT
                        s.dimension_3_name as dimension_name,
                        s.score_3 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_3_name IS NOT NULL
                    AND s.score_3 IS NOT NULL

                    UNION ALL

                    -- 维度4的数据
                    SELECT
                        s.dimension_4_name as dimension_name,
                        s.score_4 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_4_name IS NOT NULL
                    AND s.score_4 IS NOT NULL

                    UNION ALL

                    -- 维度5的数据
                    SELECT
                        s.dimension_5_name as dimension_name,
                        s.score_5 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_5_name IS NOT NULL
                    AND s.score_5 IS NOT NULL
                )
                SELECT
                    dimension_name,
                    AVG(score) as avg_score,
                    COUNT(*) as sample_count
                FROM dimension_scores
                GROUP BY dimension_name
                ORDER BY avg_score ASC
            
2025-08-15 13:32:41 - sqlalchemy.engine.Engine - INFO - [cached since 4891s ago] {'classification': '功能建议'}
2025-08-15 13:32:41 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-15 13:32:41 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-15 13:32:41 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions) AS anon_1
2025-08-15 13:32:41 - sqlalchemy.engine.Engine - INFO - [cached since 5045s ago] {}
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - [cached since 4891s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0)}
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s) AS anon_1
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - [cached since 4891s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'classification_1': ''}
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.classification IS NOT NULL AND questions.classification != %(classification_1)s) AS anon_1
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - [cached since 4891s ago] {'classification_1': ''}
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT access_logs.id AS access_logs_id, access_logs.user_id AS access_logs_user_id, access_logs.username AS access_logs_username, access_logs.action AS access_logs_action, access_logs.ip_address AS access_logs_ip_address, access_logs.created_at AS access_logs_created_at 
FROM access_logs 
WHERE access_logs.action = %(action_1)s) AS anon_1
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - [cached since 4894s ago] {'action_1': 'login'}
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT access_logs.id AS access_logs_id, access_logs.user_id AS access_logs_user_id, access_logs.username AS access_logs_username, access_logs.action AS access_logs_action, access_logs.ip_address AS access_logs_ip_address, access_logs.created_at AS access_logs_created_at 
FROM access_logs 
WHERE access_logs.action = %(action_1)s AND access_logs.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - [cached since 4891s ago] {'action_1': 'login', 'created_at_1': datetime.datetime(2025, 8, 11, 0, 0)}
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - [cached since 4891s ago] {'created_at_1': datetime.datetime(2025, 8, 15, 0, 0)}
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - [cached since 4891s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0)}
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s) AS anon_1
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - [cached since 4891s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'classification_1': ''}
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - SELECT coalesce(sum(least(anon_1.cnt, %(least_1)s)), %(coalesce_2)s) AS coalesce_1 
FROM (SELECT answers.question_business_id AS qbid, count(answers.id) AS cnt 
FROM answers JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.created_at >= %(created_at_1)s AND answers.created_at >= %(created_at_2)s AND answers.assistant_type IN (%(assistant_type_1_1)s, %(assistant_type_1_2)s) AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s GROUP BY answers.question_business_id) AS anon_1
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - [cached since 4891s ago] {'least_1': 2, 'coalesce_2': 0, 'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 11, 0, 0), 'classification_1': '', 'assistant_type_1_1': 'doubao', 'assistant_type_1_2': 'xiaotian'}
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT count(distinct(answers.question_business_id)) AS count_2 
FROM answers JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.created_at >= %(created_at_1)s AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s AND answers.is_scored = true AND answers.assistant_type IN (%(assistant_type_1_1)s, %(assistant_type_1_2)s, %(assistant_type_1_3)s) GROUP BY answers.question_business_id 
HAVING count(distinct(answers.assistant_type)) = %(count_3)s) AS anon_1
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - [cached since 4891s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'classification_1': '', 'count_3': 3, 'assistant_type_1_1': 'yoyo', 'assistant_type_1_2': 'doubao', 'assistant_type_1_3': 'xiaotian'}
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - SELECT count(distinct(questions.business_id)) AS count_1 
FROM questions JOIN answers ON questions.business_id = answers.question_business_id 
WHERE questions.created_at >= %(created_at_1)s AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s AND answers.assistant_type IN (%(assistant_type_1_1)s, %(assistant_type_1_2)s) AND answers.created_at >= %(created_at_2)s
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - [cached since 4891s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'classification_1': '', 'created_at_2': datetime.datetime(2025, 8, 11, 0, 0), 'assistant_type_1_1': 'doubao', 'assistant_type_1_2': 'xiaotian'}
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.processing_status = %(processing_status_1)s AND questions.is_badcase = true) AS anon_1
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - [cached since 4891s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'processing_status_1': 'scored'}
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.processing_status = %(processing_status_1)s AND questions.badcase_review_status = %(badcase_review_status_1)s) AS anon_1
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - [cached since 4891s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'processing_status_1': 'scored', 'badcase_review_status_1': 'reviewed'}
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - [cached since 4891s ago] {'created_at_1': datetime.datetime(2025, 8, 15, 4, 32, 42, 22041)}
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - [cached since 4891s ago] {'created_at_1': datetime.datetime(2025, 8, 14, 23, 32, 42, 22041)}
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.updated_at >= %(updated_at_1)s AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s) AS anon_1
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - [cached since 4891s ago] {'updated_at_1': datetime.datetime(2025, 8, 15, 5, 2, 42, 22041), 'classification_1': ''}
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers JOIN questions ON answers.question_business_id = questions.business_id 
WHERE answers.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - [cached since 4891s ago] {'created_at_1': datetime.datetime(2025, 8, 15, 5, 2, 42, 22041)}
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.updated_at >= %(updated_at_1)s AND answers.is_scored = true) AS anon_1
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - [cached since 4891s ago] {'updated_at_1': datetime.datetime(2025, 8, 15, 5, 2, 42, 22041)}
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - SELECT date_trunc(%(date_trunc_1)s, questions.created_at) AS day, count(questions.id) AS count 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s GROUP BY date_trunc(%(date_trunc_2)s, questions.created_at) ORDER BY day
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - [cached since 4891s ago] {'date_trunc_1': 'day', 'created_at_1': datetime.datetime(2025, 8, 8, 5, 32, 42, 46427), 'date_trunc_2': 'day'}
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - SELECT date_trunc(%(date_trunc_1)s, questions.updated_at) AS day, count(questions.id) AS count 
FROM questions 
WHERE questions.updated_at >= %(updated_at_1)s AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s AND questions.processing_status IN (%(processing_status_1_1)s, %(processing_status_1_2)s, %(processing_status_1_3)s) GROUP BY date_trunc(%(date_trunc_2)s, questions.updated_at) ORDER BY day
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - [cached since 4891s ago] {'date_trunc_1': 'day', 'updated_at_1': datetime.datetime(2025, 8, 8, 5, 32, 42, 46427), 'classification_1': '', 'date_trunc_2': 'day', 'processing_status_1_1': 'classified', 'processing_status_1_2': 'answers_generated', 'processing_status_1_3': 'scored'}
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - SELECT date_trunc(%(date_trunc_1)s, answers.created_at) AS day, count(answers.id) AS count 
FROM answers JOIN questions ON answers.question_business_id = questions.business_id 
WHERE answers.created_at >= %(created_at_1)s AND questions.created_at >= %(created_at_2)s AND answers.assistant_type IN (%(assistant_type_1_1)s, %(assistant_type_1_2)s) AND answers.is_scored = true AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s GROUP BY date_trunc(%(date_trunc_2)s, answers.created_at) ORDER BY day
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - [cached since 4891s ago] {'date_trunc_1': 'day', 'created_at_1': datetime.datetime(2025, 8, 8, 5, 32, 42, 46427), 'created_at_2': datetime.datetime(2025, 8, 8, 5, 32, 42, 46427), 'classification_1': '', 'date_trunc_2': 'day', 'assistant_type_1_1': 'doubao', 'assistant_type_1_2': 'xiaotian'}
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - SELECT answers.assistant_type AS answers_assistant_type, avg(scores.score_1) AS avg_score_1, avg(scores.score_2) AS avg_score_2, avg(scores.score_3) AS avg_score_3, avg(scores.score_4) AS avg_score_4, avg(scores.score_5) AS avg_score_5, avg(scores.average_score) AS avg_total, count(scores.id) AS score_count 
FROM answers JOIN scores ON answers.id = scores.answer_id GROUP BY answers.assistant_type
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - [cached since 4891s ago] {}
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - SELECT system_config.id AS system_config_id, system_config.config_key AS system_config_config_key, system_config.config_value AS system_config_config_value, system_config.config_type AS system_config_config_type, system_config.description AS system_config_description, system_config.effective_time AS system_config_effective_time, system_config.previous_value AS system_config_previous_value, system_config.status AS system_config_status, system_config.created_at AS system_config_created_at, system_config.updated_at AS system_config_updated_at 
FROM system_config 
WHERE system_config.config_key = %(config_key_1)s 
 LIMIT %(param_1)s
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - [cached since 4977s ago] {'config_key_1': 'display.hot_categories_time_range', 'param_1': 1}
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - SELECT questions.classification AS name, count(questions.id) AS count 
FROM questions 
WHERE questions.classification IS NOT NULL AND questions.classification != %(classification_1)s GROUP BY questions.classification
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - [cached since 4891s ago] {'classification_1': ''}
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - SELECT questions.classification AS name, count(questions.id) AS count 
FROM questions 
WHERE questions.classification IS NOT NULL AND questions.classification != %(classification_1)s AND questions.created_at >= %(created_at_1)s GROUP BY questions.classification ORDER BY count(questions.id) DESC
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - [cached since 4891s ago] {'classification_1': '', 'created_at_1': datetime.datetime(2025, 8, 8, 5, 32, 42, 58911)}
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - SELECT questions.classification AS name, count(questions.id) AS count 
FROM questions 
WHERE questions.classification IS NOT NULL AND questions.classification != %(classification_1)s GROUP BY questions.classification ORDER BY count(questions.id) DESC
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - [cached since 5045s ago] {'classification_1': ''}
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions ORDER BY questions.created_at DESC 
 LIMIT %(param_1)s
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - [cached since 4891s ago] {'param_1': 5}
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers ORDER BY answers.created_at DESC 
 LIMIT %(param_1)s
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - [cached since 4891s ago] {'param_1': 5}
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - SELECT scores.id AS scores_id, scores.answer_id AS scores_answer_id, scores.score_1 AS scores_score_1, scores.score_2 AS scores_score_2, scores.score_3 AS scores_score_3, scores.score_4 AS scores_score_4, scores.score_5 AS scores_score_5, scores.dimension_1_name AS scores_dimension_1_name, scores.dimension_2_name AS scores_dimension_2_name, scores.dimension_3_name AS scores_dimension_3_name, scores.dimension_4_name AS scores_dimension_4_name, scores.dimension_5_name AS scores_dimension_5_name, scores.average_score AS scores_average_score, scores.comment AS scores_comment, scores.rated_at AS scores_rated_at 
FROM scores ORDER BY scores.rated_at DESC 
 LIMIT %(param_1)s
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - [cached since 4891s ago] {'param_1': 5}
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - [cached since 4891s ago] {'created_at_1': datetime.datetime(2025, 8, 15, 5, 27, 42, 64231)}
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - [cached since 4891s ago] {'created_at_1': datetime.datetime(2025, 8, 15, 5, 27, 42, 64231)}
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT scores.id AS scores_id, scores.answer_id AS scores_answer_id, scores.score_1 AS scores_score_1, scores.score_2 AS scores_score_2, scores.score_3 AS scores_score_3, scores.score_4 AS scores_score_4, scores.score_5 AS scores_score_5, scores.dimension_1_name AS scores_dimension_1_name, scores.dimension_2_name AS scores_dimension_2_name, scores.dimension_3_name AS scores_dimension_3_name, scores.dimension_4_name AS scores_dimension_4_name, scores.dimension_5_name AS scores_dimension_5_name, scores.average_score AS scores_average_score, scores.comment AS scores_comment, scores.rated_at AS scores_rated_at 
FROM scores 
WHERE scores.rated_at >= %(rated_at_1)s) AS anon_1
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - [cached since 4891s ago] {'rated_at_1': datetime.datetime(2025, 8, 15, 5, 27, 42, 64231)}
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.assistant_type = %(assistant_type_1)s AND answers.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - [cached since 4891s ago] {'assistant_type_1': 'yoyo', 'created_at_1': datetime.datetime(2025, 8, 15, 5, 27, 42, 64231)}
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.assistant_type = %(assistant_type_1)s AND answers.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - [cached since 4891s ago] {'assistant_type_1': 'doubao', 'created_at_1': datetime.datetime(2025, 8, 15, 5, 27, 42, 64231)}
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.assistant_type = %(assistant_type_1)s AND answers.created_at >= %(created_at_1)s) AS anon_1
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - [cached since 4891s ago] {'assistant_type_1': 'xiaotian', 'created_at_1': datetime.datetime(2025, 8, 15, 5, 27, 42, 64231)}
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - SELECT questions.classification AS name, count(questions.id) AS count 
FROM questions 
WHERE questions.classification IS NOT NULL AND questions.classification != %(classification_1)s GROUP BY questions.classification
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - [cached since 4891s ago] {'classification_1': ''}
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - [cached since 4891s ago] {'classification_1': '科学问题', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - [cached since 4891s ago] {'classification_1': '科学问题', 'assistant_type_1': 'doubao', 'param_1': 1}
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - [cached since 4891s ago] {'classification_1': '科学问题', 'assistant_type_1': 'xiaotian', 'param_1': 1}
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - [cached since 4891s ago] {'classification_1': '数据分析', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - [cached since 4891s ago] {'classification_1': '数据分析', 'assistant_type_1': 'doubao', 'param_1': 1}
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - [cached since 4891s ago] {'classification_1': '数据分析', 'assistant_type_1': 'xiaotian', 'param_1': 1}
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - [cached since 4891s ago] {'classification_1': '用户体验', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - [cached since 4891s ago] {'classification_1': '用户体验', 'assistant_type_1': 'doubao', 'param_1': 1}
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - [cached since 4891s ago] {'classification_1': '用户体验', 'assistant_type_1': 'xiaotian', 'param_1': 1}
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - [cached since 4891s ago] {'classification_1': '性能优化', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - [cached since 4891s ago] {'classification_1': '性能优化', 'assistant_type_1': 'doubao', 'param_1': 1}
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - [cached since 4891s ago] {'classification_1': '性能优化', 'assistant_type_1': 'xiaotian', 'param_1': 1}
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - [cached since 4891s ago] {'classification_1': '业务咨询', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - [cached since 4891s ago] {'classification_1': '业务咨询', 'assistant_type_1': 'doubao', 'param_1': 1}
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - [cached since 4891s ago] {'classification_1': '业务咨询', 'assistant_type_1': 'xiaotian', 'param_1': 1}
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - [cached since 4891s ago] {'classification_1': '经济问题', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - [cached since 4891s ago] {'classification_1': '经济问题', 'assistant_type_1': 'doubao', 'param_1': 1}
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - [cached since 4891s ago] {'classification_1': '经济问题', 'assistant_type_1': 'xiaotian', 'param_1': 1}
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - [cached since 4891s ago] {'classification_1': '功能建议', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - [cached since 4891s ago] {'classification_1': '功能建议', 'assistant_type_1': 'doubao', 'param_1': 1}
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - [cached since 4891s ago] {'classification_1': '功能建议', 'assistant_type_1': 'xiaotian', 'param_1': 1}
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - [cached since 4891s ago] {'classification_1': '账户管理', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - [cached since 4891s ago] {'classification_1': '账户管理', 'assistant_type_1': 'doubao', 'param_1': 1}
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - [cached since 4891s ago] {'classification_1': '账户管理', 'assistant_type_1': 'xiaotian', 'param_1': 1}
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - [cached since 4891s ago] {'classification_1': '教育问题', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - [cached since 4891s ago] {'classification_1': '教育问题', 'assistant_type_1': 'doubao', 'param_1': 1}
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - [cached since 4891s ago] {'classification_1': '教育问题', 'assistant_type_1': 'xiaotian', 'param_1': 1}
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - [cached since 4891s ago] {'classification_1': '技术问题', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - [cached since 4891s ago] {'classification_1': '技术问题', 'assistant_type_1': 'doubao', 'param_1': 1}
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - [cached since 4891s ago] {'classification_1': '技术问题', 'assistant_type_1': 'xiaotian', 'param_1': 1}
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - [cached since 4891s ago] {'classification_1': '其他', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - [cached since 4891s ago] {'classification_1': '其他', 'assistant_type_1': 'doubao', 'param_1': 1}
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - [cached since 4891s ago] {'classification_1': '其他', 'assistant_type_1': 'xiaotian', 'param_1': 1}
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - [cached since 4891s ago] {'classification_1': '安全设置', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - [cached since 4891s ago] {'classification_1': '安全设置', 'assistant_type_1': 'doubao', 'param_1': 1}
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - [cached since 4891s ago] {'classification_1': '安全设置', 'assistant_type_1': 'xiaotian', 'param_1': 1}
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - [cached since 4891s ago] {'classification_1': '系统优化', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - [cached since 4891s ago] {'classification_1': '系统优化', 'assistant_type_1': 'doubao', 'param_1': 1}
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - [cached since 4891s ago] {'classification_1': '系统优化', 'assistant_type_1': 'xiaotian', 'param_1': 1}
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - [cached since 4891s ago] {'classification_1': '工程问题', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - [cached since 4891s ago] {'classification_1': '工程问题', 'assistant_type_1': 'doubao', 'param_1': 1}
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - [cached since 4891s ago] {'classification_1': '工程问题', 'assistant_type_1': 'xiaotian', 'param_1': 1}
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - [cached since 4891s ago] {'classification_1': '故障排查', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - [cached since 4891s ago] {'classification_1': '故障排查', 'assistant_type_1': 'doubao', 'param_1': 1}
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - [cached since 4891s ago] {'classification_1': '故障排查', 'assistant_type_1': 'xiaotian', 'param_1': 1}
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - [cached since 4891s ago] {'classification_1': '产品使用', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - [cached since 4891s ago] {'classification_1': '产品使用', 'assistant_type_1': 'doubao', 'param_1': 1}
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - [cached since 4891s ago] {'classification_1': '产品使用', 'assistant_type_1': 'xiaotian', 'param_1': 1}
2025-08-15 13:32:42 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-15 13:32:44 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-15 13:32:44 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions) AS anon_1
2025-08-15 13:32:44 - sqlalchemy.engine.Engine - INFO - [cached since 5047s ago] {}
2025-08-15 13:32:44 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers) AS anon_1
2025-08-15 13:32:44 - sqlalchemy.engine.Engine - INFO - [cached since 5047s ago] {}
2025-08-15 13:32:44 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.is_scored = true) AS anon_1
2025-08-15 13:32:44 - sqlalchemy.engine.Engine - INFO - [cached since 5047s ago] {}
2025-08-15 13:32:44 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT scores.id AS scores_id, scores.answer_id AS scores_answer_id, scores.score_1 AS scores_score_1, scores.score_2 AS scores_score_2, scores.score_3 AS scores_score_3, scores.score_4 AS scores_score_4, scores.score_5 AS scores_score_5, scores.dimension_1_name AS scores_dimension_1_name, scores.dimension_2_name AS scores_dimension_2_name, scores.dimension_3_name AS scores_dimension_3_name, scores.dimension_4_name AS scores_dimension_4_name, scores.dimension_5_name AS scores_dimension_5_name, scores.average_score AS scores_average_score, scores.comment AS scores_comment, scores.rated_at AS scores_rated_at 
FROM scores) AS anon_1
2025-08-15 13:32:44 - sqlalchemy.engine.Engine - INFO - [cached since 5047s ago] {}
2025-08-15 13:32:44 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.assistant_type = %(assistant_type_1)s) AS anon_1
2025-08-15 13:32:44 - sqlalchemy.engine.Engine - INFO - [cached since 5047s ago] {'assistant_type_1': 'doubao'}
2025-08-15 13:32:44 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.assistant_type = %(assistant_type_1)s) AS anon_1
2025-08-15 13:32:44 - sqlalchemy.engine.Engine - INFO - [cached since 5047s ago] {'assistant_type_1': 'xiaotian'}
2025-08-15 13:32:44 - sqlalchemy.engine.Engine - INFO - SELECT count(questions.id) AS count_1 
FROM questions
2025-08-15 13:32:44 - sqlalchemy.engine.Engine - INFO - [cached since 5047s ago] {}
2025-08-15 13:32:44 - sqlalchemy.engine.Engine - INFO - SELECT count(answers.id) AS count_1 
FROM answers
2025-08-15 13:32:44 - sqlalchemy.engine.Engine - INFO - [cached since 5047s ago] {}
2025-08-15 13:32:44 - sqlalchemy.engine.Engine - INFO - SELECT count(answers.id) AS count_1 
FROM answers 
WHERE answers.assistant_type = %(assistant_type_1)s
2025-08-15 13:32:44 - sqlalchemy.engine.Engine - INFO - [cached since 5047s ago] {'assistant_type_1': 'yoyo'}
2025-08-15 13:32:44 - sqlalchemy.engine.Engine - INFO - SELECT COUNT(*) FROM table1
2025-08-15 13:32:44 - sqlalchemy.engine.Engine - INFO - [cached since 5047s ago] {}
2025-08-15 13:32:44 - sqlalchemy.engine.Engine - INFO - SELECT COUNT(*) FROM table1 WHERE answer IS NOT NULL AND answer != '' AND TRIM(answer) != ''
2025-08-15 13:32:44 - sqlalchemy.engine.Engine - INFO - [cached since 5047s ago] {}
2025-08-15 13:32:44 - sqlalchemy.engine.Engine - INFO - SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions ORDER BY questions.sendmessagetime DESC 
 LIMIT %(param_1)s
2025-08-15 13:32:44 - sqlalchemy.engine.Engine - INFO - [cached since 5047s ago] {'param_1': 1}
2025-08-15 13:32:44 - sqlalchemy.engine.Engine - INFO - SELECT MAX(sendmessagetime) FROM table1
2025-08-15 13:32:44 - sqlalchemy.engine.Engine - INFO - [cached since 5047s ago] {}
2025-08-15 13:32:44 - app.services.sync_service - ERROR - 获取同步统计失败: 'NoneType' object has no attribute 'isoformat'
2025-08-15 13:32:44 - app.services.sync_service - ERROR - 获取同步统计失败: 'NoneType' object has no attribute 'isoformat'
2025-08-15 13:32:44 - sqlalchemy.engine.Engine - INFO - SELECT date(questions.sendmessagetime) AS date, count(questions.id) AS questions 
FROM questions 
WHERE questions.sendmessagetime >= %(sendmessagetime_1)s GROUP BY date(questions.sendmessagetime)
2025-08-15 13:32:44 - sqlalchemy.engine.Engine - INFO - [cached since 5047s ago] {'sendmessagetime_1': datetime.datetime(2025, 8, 8, 5, 32, 44, 366802)}
2025-08-15 13:32:44 - sqlalchemy.engine.Engine - INFO - SELECT date(questions.sendmessagetime) AS date, count(questions.id) AS classifications 
FROM questions 
WHERE questions.sendmessagetime >= %(sendmessagetime_1)s AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s GROUP BY date(questions.sendmessagetime)
2025-08-15 13:32:44 - sqlalchemy.engine.Engine - INFO - [cached since 5047s ago] {'sendmessagetime_1': datetime.datetime(2025, 8, 8, 5, 32, 44, 366802), 'classification_1': ''}
2025-08-15 13:32:44 - sqlalchemy.engine.Engine - INFO - SELECT date(scores.rated_at) AS date, count(scores.id) AS scores 
FROM scores 
WHERE scores.rated_at >= %(rated_at_1)s GROUP BY date(scores.rated_at)
2025-08-15 13:32:44 - sqlalchemy.engine.Engine - INFO - [cached since 5047s ago] {'rated_at_1': datetime.datetime(2025, 8, 8, 5, 32, 44, 366802)}
2025-08-15 13:32:44 - sqlalchemy.engine.Engine - INFO - SELECT questions.classification AS questions_classification, count(questions.id) AS count_1 
FROM questions 
WHERE questions.classification IS NOT NULL GROUP BY questions.classification
2025-08-15 13:32:44 - sqlalchemy.engine.Engine - INFO - [cached since 5047s ago] {}
2025-08-15 13:32:44 - sqlalchemy.engine.Engine - INFO - SELECT answers.assistant_type AS answers_assistant_type, count(answers.id) AS total 
FROM answers GROUP BY answers.assistant_type
2025-08-15 13:32:44 - sqlalchemy.engine.Engine - INFO - [cached since 5047s ago] {}
2025-08-15 13:32:44 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-15 13:32:44 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-15 13:32:44 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions ORDER BY questions.created_at DESC) AS anon_1
2025-08-15 13:32:44 - sqlalchemy.engine.Engine - INFO - [cached since 5047s ago] {}
2025-08-15 13:32:44 - sqlalchemy.engine.Engine - INFO - SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions ORDER BY questions.created_at DESC 
 LIMIT %(param_1)s OFFSET %(param_2)s
2025-08-15 13:32:44 - sqlalchemy.engine.Engine - INFO - [cached since 5047s ago] {'param_1': 20, 'param_2': 0}
2025-08-15 13:32:44 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-15 13:32:44 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-15 13:32:44 - sqlalchemy.engine.Engine - INFO - SELECT questions.classification AS name, count(questions.id) AS count 
FROM questions 
WHERE questions.classification IS NOT NULL AND questions.classification != %(classification_1)s GROUP BY questions.classification ORDER BY count(questions.id) DESC
2025-08-15 13:32:44 - sqlalchemy.engine.Engine - INFO - [cached since 5047s ago] {'classification_1': ''}
2025-08-15 13:32:44 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-15 13:32:46 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-15 13:32:46 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s) AS anon_1
2025-08-15 13:32:46 - sqlalchemy.engine.Engine - INFO - [cached since 4979s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 17, 23, 59, 59, 999999), 'processing_status_1': 'scored'}
2025-08-15 13:32:46 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s AND questions.is_badcase = true) AS anon_1
2025-08-15 13:32:46 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-15 13:32:46 - sqlalchemy.engine.Engine - INFO - [cached since 4979s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 17, 23, 59, 59, 999999), 'processing_status_1': 'scored'}
2025-08-15 13:32:46 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-15 13:32:46 - sqlalchemy.engine.Engine - INFO - SELECT questions.classification AS name, count(questions.id) AS count 
FROM questions 
WHERE questions.classification IS NOT NULL AND questions.classification != %(classification_1)s GROUP BY questions.classification ORDER BY count(questions.id) DESC
2025-08-15 13:32:46 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s AND questions.is_badcase = true) AS anon_1
2025-08-15 13:32:46 - sqlalchemy.engine.Engine - INFO - [cached since 5049s ago] {'classification_1': ''}
2025-08-15 13:32:46 - sqlalchemy.engine.Engine - INFO - [cached since 4979s ago] {'created_at_1': datetime.datetime(2020, 1, 1, 0, 0), 'created_at_2': datetime.datetime(2099, 12, 31, 23, 59, 59, 999999), 'processing_status_1': 'scored'}
2025-08-15 13:32:46 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s AND questions.is_badcase = true AND questions.badcase_review_status = %(badcase_review_status_1)s) AS anon_1
2025-08-15 13:32:46 - sqlalchemy.engine.Engine - INFO - [cached since 4979s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 17, 23, 59, 59, 999999), 'processing_status_1': 'scored', 'badcase_review_status_1': 'pending'}
2025-08-15 13:32:46 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-15 13:32:46 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s AND questions.badcase_review_status = %(badcase_review_status_1)s) AS anon_1
2025-08-15 13:32:46 - sqlalchemy.engine.Engine - INFO - SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s AND questions.is_badcase = true ORDER BY questions.badcase_detected_at DESC 
 LIMIT %(param_1)s OFFSET %(param_2)s
2025-08-15 13:32:46 - sqlalchemy.engine.Engine - INFO - [cached since 4979s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 17, 23, 59, 59, 999999), 'processing_status_1': 'scored', 'badcase_review_status_1': 'reviewed'}
2025-08-15 13:32:46 - sqlalchemy.engine.Engine - INFO - [cached since 4979s ago] {'created_at_1': datetime.datetime(2020, 1, 1, 0, 0), 'created_at_2': datetime.datetime(2099, 12, 31, 23, 59, 59, 999999), 'processing_status_1': 'scored', 'param_1': 20, 'param_2': 0}
2025-08-15 13:32:46 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s AND questions.badcase_review_status = %(badcase_review_status_1)s AND questions.is_badcase = false) AS anon_1
2025-08-15 13:32:46 - sqlalchemy.engine.Engine - INFO - SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.question_business_id = %(question_business_id_1)s AND answers.assistant_type = %(assistant_type_1)s 
 LIMIT %(param_1)s
2025-08-15 13:32:46 - sqlalchemy.engine.Engine - INFO - [cached since 4979s ago] {'created_at_1': datetime.datetime(2025, 8, 11, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 17, 23, 59, 59, 999999), 'processing_status_1': 'scored', 'badcase_review_status_1': 'reviewed'}
2025-08-15 13:32:46 - sqlalchemy.engine.Engine - INFO - [cached since 4979s ago] {'question_business_id_1': '3ec3964eeb467d6b6e8388efb63d9935', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-15 13:32:46 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-15 13:32:46 - sqlalchemy.engine.Engine - INFO - SELECT scores.id AS scores_id, scores.answer_id AS scores_answer_id, scores.score_1 AS scores_score_1, scores.score_2 AS scores_score_2, scores.score_3 AS scores_score_3, scores.score_4 AS scores_score_4, scores.score_5 AS scores_score_5, scores.dimension_1_name AS scores_dimension_1_name, scores.dimension_2_name AS scores_dimension_2_name, scores.dimension_3_name AS scores_dimension_3_name, scores.dimension_4_name AS scores_dimension_4_name, scores.dimension_5_name AS scores_dimension_5_name, scores.average_score AS scores_average_score, scores.comment AS scores_comment, scores.rated_at AS scores_rated_at 
FROM scores 
WHERE scores.answer_id = %(answer_id_1)s 
 LIMIT %(param_1)s
2025-08-15 13:32:46 - sqlalchemy.engine.Engine - INFO - [cached since 4979s ago] {'answer_id_1': 3691, 'param_1': 1}
2025-08-15 13:32:46 - sqlalchemy.engine.Engine - INFO - SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.question_business_id = %(question_business_id_1)s AND answers.assistant_type = %(assistant_type_1)s 
 LIMIT %(param_1)s
2025-08-15 13:32:46 - sqlalchemy.engine.Engine - INFO - [cached since 4979s ago] {'question_business_id_1': '7b85dc4fed4e8eded5a919bb4cc7d72e', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-15 13:32:46 - sqlalchemy.engine.Engine - INFO - SELECT scores.id AS scores_id, scores.answer_id AS scores_answer_id, scores.score_1 AS scores_score_1, scores.score_2 AS scores_score_2, scores.score_3 AS scores_score_3, scores.score_4 AS scores_score_4, scores.score_5 AS scores_score_5, scores.dimension_1_name AS scores_dimension_1_name, scores.dimension_2_name AS scores_dimension_2_name, scores.dimension_3_name AS scores_dimension_3_name, scores.dimension_4_name AS scores_dimension_4_name, scores.dimension_5_name AS scores_dimension_5_name, scores.average_score AS scores_average_score, scores.comment AS scores_comment, scores.rated_at AS scores_rated_at 
FROM scores 
WHERE scores.answer_id = %(answer_id_1)s 
 LIMIT %(param_1)s
2025-08-15 13:32:46 - sqlalchemy.engine.Engine - INFO - [cached since 4979s ago] {'answer_id_1': 3692, 'param_1': 1}
2025-08-15 13:32:46 - sqlalchemy.engine.Engine - INFO - SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.question_business_id = %(question_business_id_1)s AND answers.assistant_type = %(assistant_type_1)s 
 LIMIT %(param_1)s
2025-08-15 13:32:46 - sqlalchemy.engine.Engine - INFO - [cached since 4979s ago] {'question_business_id_1': '8258557b9c619a271ef8330eec2134fa', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-15 13:32:46 - sqlalchemy.engine.Engine - INFO - SELECT scores.id AS scores_id, scores.answer_id AS scores_answer_id, scores.score_1 AS scores_score_1, scores.score_2 AS scores_score_2, scores.score_3 AS scores_score_3, scores.score_4 AS scores_score_4, scores.score_5 AS scores_score_5, scores.dimension_1_name AS scores_dimension_1_name, scores.dimension_2_name AS scores_dimension_2_name, scores.dimension_3_name AS scores_dimension_3_name, scores.dimension_4_name AS scores_dimension_4_name, scores.dimension_5_name AS scores_dimension_5_name, scores.average_score AS scores_average_score, scores.comment AS scores_comment, scores.rated_at AS scores_rated_at 
FROM scores 
WHERE scores.answer_id = %(answer_id_1)s 
 LIMIT %(param_1)s
2025-08-15 13:32:46 - sqlalchemy.engine.Engine - INFO - [cached since 4979s ago] {'answer_id_1': 3694, 'param_1': 1}
2025-08-15 13:32:46 - sqlalchemy.engine.Engine - INFO - SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.question_business_id = %(question_business_id_1)s AND answers.assistant_type = %(assistant_type_1)s 
 LIMIT %(param_1)s
2025-08-15 13:32:46 - sqlalchemy.engine.Engine - INFO - [cached since 4979s ago] {'question_business_id_1': '1e38aa042ccf5b6e1bc31acc59b5a2d3', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-15 13:32:46 - sqlalchemy.engine.Engine - INFO - SELECT scores.id AS scores_id, scores.answer_id AS scores_answer_id, scores.score_1 AS scores_score_1, scores.score_2 AS scores_score_2, scores.score_3 AS scores_score_3, scores.score_4 AS scores_score_4, scores.score_5 AS scores_score_5, scores.dimension_1_name AS scores_dimension_1_name, scores.dimension_2_name AS scores_dimension_2_name, scores.dimension_3_name AS scores_dimension_3_name, scores.dimension_4_name AS scores_dimension_4_name, scores.dimension_5_name AS scores_dimension_5_name, scores.average_score AS scores_average_score, scores.comment AS scores_comment, scores.rated_at AS scores_rated_at 
FROM scores 
WHERE scores.answer_id = %(answer_id_1)s 
 LIMIT %(param_1)s
2025-08-15 13:32:46 - sqlalchemy.engine.Engine - INFO - [cached since 4979s ago] {'answer_id_1': 3695, 'param_1': 1}
2025-08-15 13:32:46 - sqlalchemy.engine.Engine - INFO - SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.question_business_id = %(question_business_id_1)s AND answers.assistant_type = %(assistant_type_1)s 
 LIMIT %(param_1)s
2025-08-15 13:32:46 - sqlalchemy.engine.Engine - INFO - [cached since 4979s ago] {'question_business_id_1': 'ace1ea2ae80d35a0d2916ba07e0ab366', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-15 13:32:46 - sqlalchemy.engine.Engine - INFO - SELECT scores.id AS scores_id, scores.answer_id AS scores_answer_id, scores.score_1 AS scores_score_1, scores.score_2 AS scores_score_2, scores.score_3 AS scores_score_3, scores.score_4 AS scores_score_4, scores.score_5 AS scores_score_5, scores.dimension_1_name AS scores_dimension_1_name, scores.dimension_2_name AS scores_dimension_2_name, scores.dimension_3_name AS scores_dimension_3_name, scores.dimension_4_name AS scores_dimension_4_name, scores.dimension_5_name AS scores_dimension_5_name, scores.average_score AS scores_average_score, scores.comment AS scores_comment, scores.rated_at AS scores_rated_at 
FROM scores 
WHERE scores.answer_id = %(answer_id_1)s 
 LIMIT %(param_1)s
2025-08-15 13:32:46 - sqlalchemy.engine.Engine - INFO - [cached since 4979s ago] {'answer_id_1': 3696, 'param_1': 1}
2025-08-15 13:32:46 - sqlalchemy.engine.Engine - INFO - SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.question_business_id = %(question_business_id_1)s AND answers.assistant_type = %(assistant_type_1)s 
 LIMIT %(param_1)s
2025-08-15 13:32:46 - sqlalchemy.engine.Engine - INFO - [cached since 4979s ago] {'question_business_id_1': '8041f42934885cff5da68748e39b3998', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-15 13:32:46 - sqlalchemy.engine.Engine - INFO - SELECT scores.id AS scores_id, scores.answer_id AS scores_answer_id, scores.score_1 AS scores_score_1, scores.score_2 AS scores_score_2, scores.score_3 AS scores_score_3, scores.score_4 AS scores_score_4, scores.score_5 AS scores_score_5, scores.dimension_1_name AS scores_dimension_1_name, scores.dimension_2_name AS scores_dimension_2_name, scores.dimension_3_name AS scores_dimension_3_name, scores.dimension_4_name AS scores_dimension_4_name, scores.dimension_5_name AS scores_dimension_5_name, scores.average_score AS scores_average_score, scores.comment AS scores_comment, scores.rated_at AS scores_rated_at 
FROM scores 
WHERE scores.answer_id = %(answer_id_1)s 
 LIMIT %(param_1)s
2025-08-15 13:32:46 - sqlalchemy.engine.Engine - INFO - [cached since 4979s ago] {'answer_id_1': 3697, 'param_1': 1}
2025-08-15 13:32:46 - sqlalchemy.engine.Engine - INFO - SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.question_business_id = %(question_business_id_1)s AND answers.assistant_type = %(assistant_type_1)s 
 LIMIT %(param_1)s
2025-08-15 13:32:46 - sqlalchemy.engine.Engine - INFO - [cached since 4979s ago] {'question_business_id_1': 'd8faa8efde434e9b841f2d0cfada51cb', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-15 13:32:46 - sqlalchemy.engine.Engine - INFO - SELECT scores.id AS scores_id, scores.answer_id AS scores_answer_id, scores.score_1 AS scores_score_1, scores.score_2 AS scores_score_2, scores.score_3 AS scores_score_3, scores.score_4 AS scores_score_4, scores.score_5 AS scores_score_5, scores.dimension_1_name AS scores_dimension_1_name, scores.dimension_2_name AS scores_dimension_2_name, scores.dimension_3_name AS scores_dimension_3_name, scores.dimension_4_name AS scores_dimension_4_name, scores.dimension_5_name AS scores_dimension_5_name, scores.average_score AS scores_average_score, scores.comment AS scores_comment, scores.rated_at AS scores_rated_at 
FROM scores 
WHERE scores.answer_id = %(answer_id_1)s 
 LIMIT %(param_1)s
2025-08-15 13:32:46 - sqlalchemy.engine.Engine - INFO - [cached since 4979s ago] {'answer_id_1': 3698, 'param_1': 1}
2025-08-15 13:32:46 - sqlalchemy.engine.Engine - INFO - SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.question_business_id = %(question_business_id_1)s AND answers.assistant_type = %(assistant_type_1)s 
 LIMIT %(param_1)s
2025-08-15 13:32:46 - sqlalchemy.engine.Engine - INFO - [cached since 4979s ago] {'question_business_id_1': '15f5c63faa35074a24984e05bf9e75bb', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-15 13:32:46 - sqlalchemy.engine.Engine - INFO - SELECT scores.id AS scores_id, scores.answer_id AS scores_answer_id, scores.score_1 AS scores_score_1, scores.score_2 AS scores_score_2, scores.score_3 AS scores_score_3, scores.score_4 AS scores_score_4, scores.score_5 AS scores_score_5, scores.dimension_1_name AS scores_dimension_1_name, scores.dimension_2_name AS scores_dimension_2_name, scores.dimension_3_name AS scores_dimension_3_name, scores.dimension_4_name AS scores_dimension_4_name, scores.dimension_5_name AS scores_dimension_5_name, scores.average_score AS scores_average_score, scores.comment AS scores_comment, scores.rated_at AS scores_rated_at 
FROM scores 
WHERE scores.answer_id = %(answer_id_1)s 
 LIMIT %(param_1)s
2025-08-15 13:32:46 - sqlalchemy.engine.Engine - INFO - [cached since 4979s ago] {'answer_id_1': 3699, 'param_1': 1}
2025-08-15 13:32:46 - sqlalchemy.engine.Engine - INFO - SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.question_business_id = %(question_business_id_1)s AND answers.assistant_type = %(assistant_type_1)s 
 LIMIT %(param_1)s
2025-08-15 13:32:46 - sqlalchemy.engine.Engine - INFO - [cached since 4979s ago] {'question_business_id_1': '201b164857c8d2f90681d426670b162e', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-15 13:32:46 - sqlalchemy.engine.Engine - INFO - SELECT scores.id AS scores_id, scores.answer_id AS scores_answer_id, scores.score_1 AS scores_score_1, scores.score_2 AS scores_score_2, scores.score_3 AS scores_score_3, scores.score_4 AS scores_score_4, scores.score_5 AS scores_score_5, scores.dimension_1_name AS scores_dimension_1_name, scores.dimension_2_name AS scores_dimension_2_name, scores.dimension_3_name AS scores_dimension_3_name, scores.dimension_4_name AS scores_dimension_4_name, scores.dimension_5_name AS scores_dimension_5_name, scores.average_score AS scores_average_score, scores.comment AS scores_comment, scores.rated_at AS scores_rated_at 
FROM scores 
WHERE scores.answer_id = %(answer_id_1)s 
 LIMIT %(param_1)s
2025-08-15 13:32:46 - sqlalchemy.engine.Engine - INFO - [cached since 4979s ago] {'answer_id_1': 3700, 'param_1': 1}
2025-08-15 13:32:46 - sqlalchemy.engine.Engine - INFO - SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.question_business_id = %(question_business_id_1)s AND answers.assistant_type = %(assistant_type_1)s 
 LIMIT %(param_1)s
2025-08-15 13:32:46 - sqlalchemy.engine.Engine - INFO - [cached since 4979s ago] {'question_business_id_1': 'a1bdf55b25132fe8b085ccbf26c5b109', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-15 13:32:46 - sqlalchemy.engine.Engine - INFO - SELECT scores.id AS scores_id, scores.answer_id AS scores_answer_id, scores.score_1 AS scores_score_1, scores.score_2 AS scores_score_2, scores.score_3 AS scores_score_3, scores.score_4 AS scores_score_4, scores.score_5 AS scores_score_5, scores.dimension_1_name AS scores_dimension_1_name, scores.dimension_2_name AS scores_dimension_2_name, scores.dimension_3_name AS scores_dimension_3_name, scores.dimension_4_name AS scores_dimension_4_name, scores.dimension_5_name AS scores_dimension_5_name, scores.average_score AS scores_average_score, scores.comment AS scores_comment, scores.rated_at AS scores_rated_at 
FROM scores 
WHERE scores.answer_id = %(answer_id_1)s 
 LIMIT %(param_1)s
2025-08-15 13:32:46 - sqlalchemy.engine.Engine - INFO - [cached since 4979s ago] {'answer_id_1': 3701, 'param_1': 1}
2025-08-15 13:32:46 - sqlalchemy.engine.Engine - INFO - SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.question_business_id = %(question_business_id_1)s AND answers.assistant_type = %(assistant_type_1)s 
 LIMIT %(param_1)s
2025-08-15 13:32:46 - sqlalchemy.engine.Engine - INFO - [cached since 4979s ago] {'question_business_id_1': '8555cc30853b4df30910f6618aeca393', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-15 13:32:46 - sqlalchemy.engine.Engine - INFO - SELECT scores.id AS scores_id, scores.answer_id AS scores_answer_id, scores.score_1 AS scores_score_1, scores.score_2 AS scores_score_2, scores.score_3 AS scores_score_3, scores.score_4 AS scores_score_4, scores.score_5 AS scores_score_5, scores.dimension_1_name AS scores_dimension_1_name, scores.dimension_2_name AS scores_dimension_2_name, scores.dimension_3_name AS scores_dimension_3_name, scores.dimension_4_name AS scores_dimension_4_name, scores.dimension_5_name AS scores_dimension_5_name, scores.average_score AS scores_average_score, scores.comment AS scores_comment, scores.rated_at AS scores_rated_at 
FROM scores 
WHERE scores.answer_id = %(answer_id_1)s 
 LIMIT %(param_1)s
2025-08-15 13:32:46 - sqlalchemy.engine.Engine - INFO - [cached since 4979s ago] {'answer_id_1': 3702, 'param_1': 1}
2025-08-15 13:32:46 - sqlalchemy.engine.Engine - INFO - SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.question_business_id = %(question_business_id_1)s AND answers.assistant_type = %(assistant_type_1)s 
 LIMIT %(param_1)s
2025-08-15 13:32:46 - sqlalchemy.engine.Engine - INFO - [cached since 4979s ago] {'question_business_id_1': '19fa299347ce8244f6248ed1b35089bd', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-15 13:32:46 - sqlalchemy.engine.Engine - INFO - SELECT scores.id AS scores_id, scores.answer_id AS scores_answer_id, scores.score_1 AS scores_score_1, scores.score_2 AS scores_score_2, scores.score_3 AS scores_score_3, scores.score_4 AS scores_score_4, scores.score_5 AS scores_score_5, scores.dimension_1_name AS scores_dimension_1_name, scores.dimension_2_name AS scores_dimension_2_name, scores.dimension_3_name AS scores_dimension_3_name, scores.dimension_4_name AS scores_dimension_4_name, scores.dimension_5_name AS scores_dimension_5_name, scores.average_score AS scores_average_score, scores.comment AS scores_comment, scores.rated_at AS scores_rated_at 
FROM scores 
WHERE scores.answer_id = %(answer_id_1)s 
 LIMIT %(param_1)s
2025-08-15 13:32:46 - sqlalchemy.engine.Engine - INFO - [cached since 4979s ago] {'answer_id_1': 3703, 'param_1': 1}
2025-08-15 13:32:46 - sqlalchemy.engine.Engine - INFO - SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.question_business_id = %(question_business_id_1)s AND answers.assistant_type = %(assistant_type_1)s 
 LIMIT %(param_1)s
2025-08-15 13:32:46 - sqlalchemy.engine.Engine - INFO - [cached since 4979s ago] {'question_business_id_1': '35aca1245067dee5ff6b320ad053d16b', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-15 13:32:46 - sqlalchemy.engine.Engine - INFO - SELECT scores.id AS scores_id, scores.answer_id AS scores_answer_id, scores.score_1 AS scores_score_1, scores.score_2 AS scores_score_2, scores.score_3 AS scores_score_3, scores.score_4 AS scores_score_4, scores.score_5 AS scores_score_5, scores.dimension_1_name AS scores_dimension_1_name, scores.dimension_2_name AS scores_dimension_2_name, scores.dimension_3_name AS scores_dimension_3_name, scores.dimension_4_name AS scores_dimension_4_name, scores.dimension_5_name AS scores_dimension_5_name, scores.average_score AS scores_average_score, scores.comment AS scores_comment, scores.rated_at AS scores_rated_at 
FROM scores 
WHERE scores.answer_id = %(answer_id_1)s 
 LIMIT %(param_1)s
2025-08-15 13:32:46 - sqlalchemy.engine.Engine - INFO - [cached since 4979s ago] {'answer_id_1': 3704, 'param_1': 1}
2025-08-15 13:32:46 - sqlalchemy.engine.Engine - INFO - SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.question_business_id = %(question_business_id_1)s AND answers.assistant_type = %(assistant_type_1)s 
 LIMIT %(param_1)s
2025-08-15 13:32:46 - sqlalchemy.engine.Engine - INFO - [cached since 4979s ago] {'question_business_id_1': '0cce7f5119d76c4857665b04c61b3b1a', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-15 13:32:46 - sqlalchemy.engine.Engine - INFO - SELECT scores.id AS scores_id, scores.answer_id AS scores_answer_id, scores.score_1 AS scores_score_1, scores.score_2 AS scores_score_2, scores.score_3 AS scores_score_3, scores.score_4 AS scores_score_4, scores.score_5 AS scores_score_5, scores.dimension_1_name AS scores_dimension_1_name, scores.dimension_2_name AS scores_dimension_2_name, scores.dimension_3_name AS scores_dimension_3_name, scores.dimension_4_name AS scores_dimension_4_name, scores.dimension_5_name AS scores_dimension_5_name, scores.average_score AS scores_average_score, scores.comment AS scores_comment, scores.rated_at AS scores_rated_at 
FROM scores 
WHERE scores.answer_id = %(answer_id_1)s 
 LIMIT %(param_1)s
2025-08-15 13:32:46 - sqlalchemy.engine.Engine - INFO - [cached since 4979s ago] {'answer_id_1': 3705, 'param_1': 1}
2025-08-15 13:32:46 - sqlalchemy.engine.Engine - INFO - SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.question_business_id = %(question_business_id_1)s AND answers.assistant_type = %(assistant_type_1)s 
 LIMIT %(param_1)s
2025-08-15 13:32:46 - sqlalchemy.engine.Engine - INFO - [cached since 4979s ago] {'question_business_id_1': 'd27bf5adadab7d2c8435eabe2df1346f', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-15 13:32:46 - sqlalchemy.engine.Engine - INFO - SELECT scores.id AS scores_id, scores.answer_id AS scores_answer_id, scores.score_1 AS scores_score_1, scores.score_2 AS scores_score_2, scores.score_3 AS scores_score_3, scores.score_4 AS scores_score_4, scores.score_5 AS scores_score_5, scores.dimension_1_name AS scores_dimension_1_name, scores.dimension_2_name AS scores_dimension_2_name, scores.dimension_3_name AS scores_dimension_3_name, scores.dimension_4_name AS scores_dimension_4_name, scores.dimension_5_name AS scores_dimension_5_name, scores.average_score AS scores_average_score, scores.comment AS scores_comment, scores.rated_at AS scores_rated_at 
FROM scores 
WHERE scores.answer_id = %(answer_id_1)s 
 LIMIT %(param_1)s
2025-08-15 13:32:46 - sqlalchemy.engine.Engine - INFO - [cached since 4979s ago] {'answer_id_1': 3706, 'param_1': 1}
2025-08-15 13:32:46 - sqlalchemy.engine.Engine - INFO - SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.question_business_id = %(question_business_id_1)s AND answers.assistant_type = %(assistant_type_1)s 
 LIMIT %(param_1)s
2025-08-15 13:32:46 - sqlalchemy.engine.Engine - INFO - [cached since 4979s ago] {'question_business_id_1': 'bf5bc0a2e0ebf0984e089662948acf98', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-15 13:32:46 - sqlalchemy.engine.Engine - INFO - SELECT scores.id AS scores_id, scores.answer_id AS scores_answer_id, scores.score_1 AS scores_score_1, scores.score_2 AS scores_score_2, scores.score_3 AS scores_score_3, scores.score_4 AS scores_score_4, scores.score_5 AS scores_score_5, scores.dimension_1_name AS scores_dimension_1_name, scores.dimension_2_name AS scores_dimension_2_name, scores.dimension_3_name AS scores_dimension_3_name, scores.dimension_4_name AS scores_dimension_4_name, scores.dimension_5_name AS scores_dimension_5_name, scores.average_score AS scores_average_score, scores.comment AS scores_comment, scores.rated_at AS scores_rated_at 
FROM scores 
WHERE scores.answer_id = %(answer_id_1)s 
 LIMIT %(param_1)s
2025-08-15 13:32:46 - sqlalchemy.engine.Engine - INFO - [cached since 4979s ago] {'answer_id_1': 3707, 'param_1': 1}
2025-08-15 13:32:46 - sqlalchemy.engine.Engine - INFO - SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.question_business_id = %(question_business_id_1)s AND answers.assistant_type = %(assistant_type_1)s 
 LIMIT %(param_1)s
2025-08-15 13:32:46 - sqlalchemy.engine.Engine - INFO - [cached since 4979s ago] {'question_business_id_1': '79d19a33d6c72f5cfe1f0a1d8e0f65bf', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-15 13:32:46 - sqlalchemy.engine.Engine - INFO - SELECT scores.id AS scores_id, scores.answer_id AS scores_answer_id, scores.score_1 AS scores_score_1, scores.score_2 AS scores_score_2, scores.score_3 AS scores_score_3, scores.score_4 AS scores_score_4, scores.score_5 AS scores_score_5, scores.dimension_1_name AS scores_dimension_1_name, scores.dimension_2_name AS scores_dimension_2_name, scores.dimension_3_name AS scores_dimension_3_name, scores.dimension_4_name AS scores_dimension_4_name, scores.dimension_5_name AS scores_dimension_5_name, scores.average_score AS scores_average_score, scores.comment AS scores_comment, scores.rated_at AS scores_rated_at 
FROM scores 
WHERE scores.answer_id = %(answer_id_1)s 
 LIMIT %(param_1)s
2025-08-15 13:32:46 - sqlalchemy.engine.Engine - INFO - [cached since 4979s ago] {'answer_id_1': 3708, 'param_1': 1}
2025-08-15 13:32:46 - sqlalchemy.engine.Engine - INFO - SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.question_business_id = %(question_business_id_1)s AND answers.assistant_type = %(assistant_type_1)s 
 LIMIT %(param_1)s
2025-08-15 13:32:46 - sqlalchemy.engine.Engine - INFO - [cached since 4979s ago] {'question_business_id_1': '1543de8213fb3e8aa0653b4d45d5d627', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-15 13:32:46 - sqlalchemy.engine.Engine - INFO - SELECT scores.id AS scores_id, scores.answer_id AS scores_answer_id, scores.score_1 AS scores_score_1, scores.score_2 AS scores_score_2, scores.score_3 AS scores_score_3, scores.score_4 AS scores_score_4, scores.score_5 AS scores_score_5, scores.dimension_1_name AS scores_dimension_1_name, scores.dimension_2_name AS scores_dimension_2_name, scores.dimension_3_name AS scores_dimension_3_name, scores.dimension_4_name AS scores_dimension_4_name, scores.dimension_5_name AS scores_dimension_5_name, scores.average_score AS scores_average_score, scores.comment AS scores_comment, scores.rated_at AS scores_rated_at 
FROM scores 
WHERE scores.answer_id = %(answer_id_1)s 
 LIMIT %(param_1)s
2025-08-15 13:32:46 - sqlalchemy.engine.Engine - INFO - [cached since 4979s ago] {'answer_id_1': 3710, 'param_1': 1}
2025-08-15 13:32:46 - sqlalchemy.engine.Engine - INFO - SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.question_business_id = %(question_business_id_1)s AND answers.assistant_type = %(assistant_type_1)s 
 LIMIT %(param_1)s
2025-08-15 13:32:46 - sqlalchemy.engine.Engine - INFO - [cached since 4979s ago] {'question_business_id_1': 'c42135658935576c651d18d40b7d9aa5', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-15 13:32:46 - sqlalchemy.engine.Engine - INFO - SELECT scores.id AS scores_id, scores.answer_id AS scores_answer_id, scores.score_1 AS scores_score_1, scores.score_2 AS scores_score_2, scores.score_3 AS scores_score_3, scores.score_4 AS scores_score_4, scores.score_5 AS scores_score_5, scores.dimension_1_name AS scores_dimension_1_name, scores.dimension_2_name AS scores_dimension_2_name, scores.dimension_3_name AS scores_dimension_3_name, scores.dimension_4_name AS scores_dimension_4_name, scores.dimension_5_name AS scores_dimension_5_name, scores.average_score AS scores_average_score, scores.comment AS scores_comment, scores.rated_at AS scores_rated_at 
FROM scores 
WHERE scores.answer_id = %(answer_id_1)s 
 LIMIT %(param_1)s
2025-08-15 13:32:46 - sqlalchemy.engine.Engine - INFO - [cached since 4979s ago] {'answer_id_1': 3711, 'param_1': 1}
2025-08-15 13:32:46 - sqlalchemy.engine.Engine - INFO - SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.question_business_id = %(question_business_id_1)s AND answers.assistant_type = %(assistant_type_1)s 
 LIMIT %(param_1)s
2025-08-15 13:32:46 - sqlalchemy.engine.Engine - INFO - [cached since 4979s ago] {'question_business_id_1': '7dad31cdddfc2a729523ea13bbac76ca', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-15 13:32:46 - sqlalchemy.engine.Engine - INFO - SELECT scores.id AS scores_id, scores.answer_id AS scores_answer_id, scores.score_1 AS scores_score_1, scores.score_2 AS scores_score_2, scores.score_3 AS scores_score_3, scores.score_4 AS scores_score_4, scores.score_5 AS scores_score_5, scores.dimension_1_name AS scores_dimension_1_name, scores.dimension_2_name AS scores_dimension_2_name, scores.dimension_3_name AS scores_dimension_3_name, scores.dimension_4_name AS scores_dimension_4_name, scores.dimension_5_name AS scores_dimension_5_name, scores.average_score AS scores_average_score, scores.comment AS scores_comment, scores.rated_at AS scores_rated_at 
FROM scores 
WHERE scores.answer_id = %(answer_id_1)s 
 LIMIT %(param_1)s
2025-08-15 13:32:46 - sqlalchemy.engine.Engine - INFO - [cached since 4979s ago] {'answer_id_1': 3712, 'param_1': 1}
2025-08-15 13:32:46 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-15 13:32:48 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-15 13:32:48 - sqlalchemy.engine.Engine - INFO - SELECT system_config.id AS system_config_id, system_config.config_key AS system_config_config_key, system_config.config_value AS system_config_config_value, system_config.config_type AS system_config_config_type, system_config.description AS system_config_description, system_config.effective_time AS system_config_effective_time, system_config.previous_value AS system_config_previous_value, system_config.status AS system_config_status, system_config.created_at AS system_config_created_at, system_config.updated_at AS system_config_updated_at 
FROM system_config 
WHERE system_config.status = %(status_1)s AND system_config.effective_time > %(effective_time_1)s
2025-08-15 13:32:48 - sqlalchemy.engine.Engine - INFO - [cached since 4983s ago] {'status_1': 'pending', 'effective_time_1': datetime.datetime(2025, 8, 15, 5, 32, 48, 97374)}
2025-08-15 13:32:48 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-15 13:32:48 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-15 13:32:48 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-15 13:32:48 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-15 13:32:48 - sqlalchemy.engine.Engine - INFO - SELECT system_config.id AS system_config_id, system_config.config_key AS system_config_config_key, system_config.config_value AS system_config_config_value, system_config.config_type AS system_config_config_type, system_config.description AS system_config_description, system_config.effective_time AS system_config_effective_time, system_config.previous_value AS system_config_previous_value, system_config.status AS system_config_status, system_config.created_at AS system_config_created_at, system_config.updated_at AS system_config_updated_at 
FROM system_config 
WHERE system_config.config_key = %(config_key_1)s 
 LIMIT %(param_1)s
2025-08-15 13:32:48 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.processing_status = %(processing_status_1)s AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s AND NOT (EXISTS (SELECT 1 
FROM answers 
WHERE answers.question_business_id = questions.business_id AND answers.assistant_type = %(assistant_type_1)s)) AND NOT (EXISTS (SELECT 1 
FROM answers 
WHERE answers.question_business_id = questions.business_id AND answers.assistant_type = %(assistant_type_2)s))) AS anon_1
2025-08-15 13:32:48 - sqlalchemy.engine.Engine - INFO - SELECT system_config.id AS system_config_id, system_config.config_key AS system_config_config_key, system_config.config_value AS system_config_config_value, system_config.config_type AS system_config_config_type, system_config.description AS system_config_description, system_config.effective_time AS system_config_effective_time, system_config.previous_value AS system_config_previous_value, system_config.status AS system_config_status, system_config.created_at AS system_config_created_at, system_config.updated_at AS system_config_updated_at 
FROM system_config 
WHERE system_config.config_key = %(config_key_1)s 
 LIMIT %(param_1)s
2025-08-15 13:32:48 - sqlalchemy.engine.Engine - INFO - [cached since 4983s ago] {'config_key_1': 'display.hot_categories_time_range', 'param_1': 1}
2025-08-15 13:32:48 - sqlalchemy.engine.Engine - INFO - [cached since 4983s ago] {'processing_status_1': 'classified', 'classification_1': '', 'assistant_type_1': 'doubao', 'assistant_type_2': 'xiaotian'}
2025-08-15 13:32:48 - sqlalchemy.engine.Engine - INFO - [cached since 4983s ago] {'config_key_1': 'workflow.answer_generation_mode', 'param_1': 1}
2025-08-15 13:32:48 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-15 13:32:48 - app.services.answer_generation_service - INFO - 待导出问题数量: 0
2025-08-15 13:32:48 - app.services.answer_generation_service - INFO - 待导出问题数量: 0
2025-08-15 13:32:48 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-15 13:32:48 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-15 13:32:49 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-15 13:32:49 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT user_applications.id AS user_applications_id, user_applications.username AS user_applications_username, user_applications.display_name AS user_applications_display_name, user_applications.password_hash AS user_applications_password_hash, user_applications.apply_role AS user_applications_apply_role, user_applications.reason AS user_applications_reason, user_applications.status AS user_applications_status, user_applications.created_at AS user_applications_created_at, user_applications.reviewed_by AS user_applications_reviewed_by, user_applications.reviewed_at AS user_applications_reviewed_at 
FROM user_applications ORDER BY user_applications.created_at DESC) AS anon_1
2025-08-15 13:32:49 - sqlalchemy.engine.Engine - INFO - [cached since 5050s ago] {}
2025-08-15 13:32:49 - sqlalchemy.engine.Engine - INFO - SELECT user_applications.id AS user_applications_id, user_applications.username AS user_applications_username, user_applications.display_name AS user_applications_display_name, user_applications.password_hash AS user_applications_password_hash, user_applications.apply_role AS user_applications_apply_role, user_applications.reason AS user_applications_reason, user_applications.status AS user_applications_status, user_applications.created_at AS user_applications_created_at, user_applications.reviewed_by AS user_applications_reviewed_by, user_applications.reviewed_at AS user_applications_reviewed_at 
FROM user_applications ORDER BY user_applications.created_at DESC 
 LIMIT %(param_1)s OFFSET %(param_2)s
2025-08-15 13:32:49 - sqlalchemy.engine.Engine - INFO - [cached since 5050s ago] {'param_1': 20, 'param_2': 0}
2025-08-15 13:32:49 - sqlalchemy.engine.Engine - INFO - SELECT users.id AS users_id, users.username AS users_username, users.display_name AS users_display_name, users.password_hash AS users_password_hash, users.role AS users_role, users.status AS users_status, users.created_at AS users_created_at, users.last_login_at AS users_last_login_at, users.login_count AS users_login_count 
FROM users 
WHERE users.id = %(pk_1)s
2025-08-15 13:32:49 - sqlalchemy.engine.Engine - INFO - [cached since 5050s ago] {'pk_1': 1}
2025-08-15 13:32:49 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-15 13:33:57 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-15 13:33:57 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT user_applications.id AS user_applications_id, user_applications.username AS user_applications_username, user_applications.display_name AS user_applications_display_name, user_applications.password_hash AS user_applications_password_hash, user_applications.apply_role AS user_applications_apply_role, user_applications.reason AS user_applications_reason, user_applications.status AS user_applications_status, user_applications.created_at AS user_applications_created_at, user_applications.reviewed_by AS user_applications_reviewed_by, user_applications.reviewed_at AS user_applications_reviewed_at 
FROM user_applications ORDER BY user_applications.created_at DESC) AS anon_1
2025-08-15 13:33:57 - sqlalchemy.engine.Engine - INFO - [cached since 5118s ago] {}
2025-08-15 13:33:57 - sqlalchemy.engine.Engine - INFO - SELECT user_applications.id AS user_applications_id, user_applications.username AS user_applications_username, user_applications.display_name AS user_applications_display_name, user_applications.password_hash AS user_applications_password_hash, user_applications.apply_role AS user_applications_apply_role, user_applications.reason AS user_applications_reason, user_applications.status AS user_applications_status, user_applications.created_at AS user_applications_created_at, user_applications.reviewed_by AS user_applications_reviewed_by, user_applications.reviewed_at AS user_applications_reviewed_at 
FROM user_applications ORDER BY user_applications.created_at DESC 
 LIMIT %(param_1)s OFFSET %(param_2)s
2025-08-15 13:33:57 - sqlalchemy.engine.Engine - INFO - [cached since 5118s ago] {'param_1': 20, 'param_2': 0}
2025-08-15 13:33:57 - sqlalchemy.engine.Engine - INFO - SELECT users.id AS users_id, users.username AS users_username, users.display_name AS users_display_name, users.password_hash AS users_password_hash, users.role AS users_role, users.status AS users_status, users.created_at AS users_created_at, users.last_login_at AS users_last_login_at, users.login_count AS users_login_count 
FROM users 
WHERE users.id = %(pk_1)s
2025-08-15 13:33:57 - sqlalchemy.engine.Engine - INFO - [cached since 5118s ago] {'pk_1': 1}
2025-08-15 13:33:57 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-15 13:33:57 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-15 13:33:57 - sqlalchemy.engine.Engine - INFO - SELECT users.id AS users_id, users.username AS users_username, users.display_name AS users_display_name, users.password_hash AS users_password_hash, users.role AS users_role, users.status AS users_status, users.created_at AS users_created_at, users.last_login_at AS users_last_login_at, users.login_count AS users_login_count 
FROM users 
WHERE users.id = %(pk_1)s
2025-08-15 13:33:57 - sqlalchemy.engine.Engine - INFO - [cached since 5086s ago] {'pk_1': '1'}
2025-08-15 13:33:57 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-15 13:33:59 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-15 13:33:59 - sqlalchemy.engine.Engine - INFO - SELECT users.id AS users_id, users.username AS users_username, users.display_name AS users_display_name, users.password_hash AS users_password_hash, users.role AS users_role, users.status AS users_status, users.created_at AS users_created_at, users.last_login_at AS users_last_login_at, users.login_count AS users_login_count 
FROM users 
WHERE users.id = %(pk_1)s
2025-08-15 13:33:59 - sqlalchemy.engine.Engine - INFO - [cached since 5088s ago] {'pk_1': '1'}
2025-08-15 13:33:59 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-15 13:33:59 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-15 13:33:59 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT user_applications.id AS user_applications_id, user_applications.username AS user_applications_username, user_applications.display_name AS user_applications_display_name, user_applications.password_hash AS user_applications_password_hash, user_applications.apply_role AS user_applications_apply_role, user_applications.reason AS user_applications_reason, user_applications.status AS user_applications_status, user_applications.created_at AS user_applications_created_at, user_applications.reviewed_by AS user_applications_reviewed_by, user_applications.reviewed_at AS user_applications_reviewed_at 
FROM user_applications ORDER BY user_applications.created_at DESC) AS anon_1
2025-08-15 13:33:59 - sqlalchemy.engine.Engine - INFO - [cached since 5120s ago] {}
2025-08-15 13:33:59 - sqlalchemy.engine.Engine - INFO - SELECT user_applications.id AS user_applications_id, user_applications.username AS user_applications_username, user_applications.display_name AS user_applications_display_name, user_applications.password_hash AS user_applications_password_hash, user_applications.apply_role AS user_applications_apply_role, user_applications.reason AS user_applications_reason, user_applications.status AS user_applications_status, user_applications.created_at AS user_applications_created_at, user_applications.reviewed_by AS user_applications_reviewed_by, user_applications.reviewed_at AS user_applications_reviewed_at 
FROM user_applications ORDER BY user_applications.created_at DESC 
 LIMIT %(param_1)s OFFSET %(param_2)s
2025-08-15 13:33:59 - sqlalchemy.engine.Engine - INFO - [cached since 5120s ago] {'param_1': 20, 'param_2': 0}
2025-08-15 13:33:59 - sqlalchemy.engine.Engine - INFO - SELECT users.id AS users_id, users.username AS users_username, users.display_name AS users_display_name, users.password_hash AS users_password_hash, users.role AS users_role, users.status AS users_status, users.created_at AS users_created_at, users.last_login_at AS users_last_login_at, users.login_count AS users_login_count 
FROM users 
WHERE users.id = %(pk_1)s
2025-08-15 13:33:59 - sqlalchemy.engine.Engine - INFO - [cached since 5120s ago] {'pk_1': 1}
2025-08-15 13:33:59 - sqlalchemy.engine.Engine - INFO - ROLLBACK
