2025-08-18 23:46:41 - sqlalchemy.engine.Engine - INFO - [cached since 0.09036s ago] {'updated_at': datetime.datetime(2025, 8, 18, 15, 46, 41, 181678), 'answers_id': 4169}
2025-08-18 23:46:41 - sqlalchemy.engine.Engine - INFO - SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.question_business_id = %(question_business_id_1)s AND answers.assistant_type = %(assistant_type_1)s 
 LIMIT %(param_1)s
2025-08-18 23:46:41 - sqlalchemy.engine.Engine - INFO - [cached since 0.1308s ago] {'question_business_id_1': '6efb0a50286801858598577f9756f7cc', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-18 23:46:41 - sqlalchemy.engine.Engine - INFO - UPDATE answers SET updated_at=%(updated_at)s WHERE answers.id = %(answers_id)s
2025-08-18 23:46:41 - sqlalchemy.engine.Engine - INFO - [cached since 0.1303s ago] {'updated_at': datetime.datetime(2025, 8, 18, 15, 46, 41, 221590), 'answers_id': 4170}
2025-08-18 23:46:41 - sqlalchemy.engine.Engine - INFO - SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.question_business_id = %(question_business_id_1)s AND answers.assistant_type = %(assistant_type_1)s 
 LIMIT %(param_1)s
2025-08-18 23:46:41 - sqlalchemy.engine.Engine - INFO - [cached since 0.1325s ago] {'question_business_id_1': '543604c1d8586351fe6a678a9fd008e7', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-18 23:46:41 - sqlalchemy.engine.Engine - INFO - UPDATE answers SET updated_at=%(updated_at)s WHERE answers.id = %(answers_id)s
2025-08-18 23:46:41 - sqlalchemy.engine.Engine - INFO - [cached since 0.132s ago] {'updated_at': datetime.datetime(2025, 8, 18, 15, 46, 41, 223283), 'answers_id': 4171}
2025-08-18 23:46:41 - sqlalchemy.engine.Engine - INFO - SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.question_business_id = %(question_business_id_1)s AND answers.assistant_type = %(assistant_type_1)s 
 LIMIT %(param_1)s
2025-08-18 23:46:41 - sqlalchemy.engine.Engine - INFO - [cached since 0.1342s ago] {'question_business_id_1': '3b352100564af98b6ff41e23203f2909', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-18 23:46:41 - sqlalchemy.engine.Engine - INFO - UPDATE answers SET updated_at=%(updated_at)s WHERE answers.id = %(answers_id)s
2025-08-18 23:46:41 - sqlalchemy.engine.Engine - INFO - [cached since 0.1336s ago] {'updated_at': datetime.datetime(2025, 8, 18, 15, 46, 41, 224903), 'answers_id': 4172}
2025-08-18 23:46:41 - sqlalchemy.engine.Engine - INFO - SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.question_business_id = %(question_business_id_1)s AND answers.assistant_type = %(assistant_type_1)s 
 LIMIT %(param_1)s
2025-08-18 23:46:41 - sqlalchemy.engine.Engine - INFO - [cached since 0.1357s ago] {'question_business_id_1': 'dd444ad77363513b54634d88d3fbc9d4', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-18 23:46:41 - sqlalchemy.engine.Engine - INFO - UPDATE answers SET updated_at=%(updated_at)s WHERE answers.id = %(answers_id)s
2025-08-18 23:46:41 - sqlalchemy.engine.Engine - INFO - [cached since 0.1351s ago] {'updated_at': datetime.datetime(2025, 8, 18, 15, 46, 41, 226376), 'answers_id': 4173}
2025-08-18 23:46:41 - sqlalchemy.engine.Engine - INFO - SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.question_business_id = %(question_business_id_1)s AND answers.assistant_type = %(assistant_type_1)s 
 LIMIT %(param_1)s
2025-08-18 23:46:41 - sqlalchemy.engine.Engine - INFO - [cached since 0.1373s ago] {'question_business_id_1': 'fb74179539eb09871c3fbc30b1ac2bb1', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-18 23:46:41 - sqlalchemy.engine.Engine - INFO - UPDATE answers SET updated_at=%(updated_at)s WHERE answers.id = %(answers_id)s
2025-08-18 23:46:41 - sqlalchemy.engine.Engine - INFO - [cached since 0.1367s ago] {'updated_at': datetime.datetime(2025, 8, 18, 15, 46, 41, 228009), 'answers_id': 4174}
2025-08-18 23:46:41 - sqlalchemy.engine.Engine - INFO - SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.question_business_id = %(question_business_id_1)s AND answers.assistant_type = %(assistant_type_1)s 
 LIMIT %(param_1)s
2025-08-18 23:46:41 - sqlalchemy.engine.Engine - INFO - [cached since 0.1387s ago] {'question_business_id_1': 'df8e958246f05720262731d1ed95ec39', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-18 23:46:41 - sqlalchemy.engine.Engine - INFO - UPDATE answers SET updated_at=%(updated_at)s WHERE answers.id = %(answers_id)s
2025-08-18 23:46:41 - sqlalchemy.engine.Engine - INFO - [cached since 0.1381s ago] {'updated_at': datetime.datetime(2025, 8, 18, 15, 46, 41, 229449), 'answers_id': 4175}
2025-08-18 23:46:41 - sqlalchemy.engine.Engine - INFO - SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.question_business_id = %(question_business_id_1)s AND answers.assistant_type = %(assistant_type_1)s 
 LIMIT %(param_1)s
2025-08-18 23:46:41 - sqlalchemy.engine.Engine - INFO - [cached since 0.1403s ago] {'question_business_id_1': 'eab26ea5a9627755989016fd9940ce6a', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-18 23:46:41 - sqlalchemy.engine.Engine - INFO - UPDATE answers SET updated_at=%(updated_at)s WHERE answers.id = %(answers_id)s
2025-08-18 23:46:41 - sqlalchemy.engine.Engine - INFO - [cached since 0.1397s ago] {'updated_at': datetime.datetime(2025, 8, 18, 15, 46, 41, 231029), 'answers_id': 4176}
2025-08-18 23:46:41 - sqlalchemy.engine.Engine - INFO - SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.question_business_id = %(question_business_id_1)s AND answers.assistant_type = %(assistant_type_1)s 
 LIMIT %(param_1)s
2025-08-18 23:46:41 - sqlalchemy.engine.Engine - INFO - [cached since 0.1418s ago] {'question_business_id_1': 'd5de7bf900a96ce5917d78ba0a10fa6b', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-18 23:46:41 - sqlalchemy.engine.Engine - INFO - UPDATE answers SET updated_at=%(updated_at)s WHERE answers.id = %(answers_id)s
2025-08-18 23:46:41 - sqlalchemy.engine.Engine - INFO - [cached since 0.1412s ago] {'updated_at': datetime.datetime(2025, 8, 18, 15, 46, 41, 232580), 'answers_id': 4177}
2025-08-18 23:46:41 - sqlalchemy.engine.Engine - INFO - SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.question_business_id = %(question_business_id_1)s AND answers.assistant_type = %(assistant_type_1)s 
 LIMIT %(param_1)s
2025-08-18 23:46:41 - sqlalchemy.engine.Engine - INFO - [cached since 0.1434s ago] {'question_business_id_1': '55a1667487a24b1fb344a1e7b19097d8', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-18 23:46:41 - sqlalchemy.engine.Engine - INFO - UPDATE answers SET updated_at=%(updated_at)s WHERE answers.id = %(answers_id)s
2025-08-18 23:46:41 - sqlalchemy.engine.Engine - INFO - [cached since 0.1428s ago] {'updated_at': datetime.datetime(2025, 8, 18, 15, 46, 41, 234109), 'answers_id': 4178}
2025-08-18 23:46:41 - sqlalchemy.engine.Engine - INFO - SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.question_business_id = %(question_business_id_1)s AND answers.assistant_type = %(assistant_type_1)s 
 LIMIT %(param_1)s
2025-08-18 23:46:41 - sqlalchemy.engine.Engine - INFO - [cached since 0.145s ago] {'question_business_id_1': '3ad95a0699ea9ea4d71e86ab59ec0e9c', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-18 23:46:41 - sqlalchemy.engine.Engine - INFO - UPDATE answers SET updated_at=%(updated_at)s WHERE answers.id = %(answers_id)s
2025-08-18 23:46:41 - sqlalchemy.engine.Engine - INFO - [cached since 0.1444s ago] {'updated_at': datetime.datetime(2025, 8, 18, 15, 46, 41, 235718), 'answers_id': 4179}
2025-08-18 23:46:41 - sqlalchemy.engine.Engine - INFO - SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.question_business_id = %(question_business_id_1)s AND answers.assistant_type = %(assistant_type_1)s 
 LIMIT %(param_1)s
2025-08-18 23:46:41 - sqlalchemy.engine.Engine - INFO - [cached since 0.1466s ago] {'question_business_id_1': '8205141c43ea2e3ddf6853f8218f7a35', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-18 23:46:41 - sqlalchemy.engine.Engine - INFO - UPDATE answers SET updated_at=%(updated_at)s WHERE answers.id = %(answers_id)s
2025-08-18 23:46:41 - sqlalchemy.engine.Engine - INFO - [cached since 0.146s ago] {'updated_at': datetime.datetime(2025, 8, 18, 15, 46, 41, 237320), 'answers_id': 4180}
2025-08-18 23:46:41 - sqlalchemy.engine.Engine - INFO - SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.question_business_id = %(question_business_id_1)s AND answers.assistant_type = %(assistant_type_1)s 
 LIMIT %(param_1)s
2025-08-18 23:46:41 - sqlalchemy.engine.Engine - INFO - [cached since 0.1481s ago] {'question_business_id_1': 'bd26a1df8aee135a29051d34447b92ff', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-18 23:46:41 - sqlalchemy.engine.Engine - INFO - UPDATE answers SET updated_at=%(updated_at)s WHERE answers.id = %(answers_id)s
2025-08-18 23:46:41 - sqlalchemy.engine.Engine - INFO - [cached since 0.1477s ago] {'updated_at': datetime.datetime(2025, 8, 18, 15, 46, 41, 238956), 'answers_id': 4181}
2025-08-18 23:46:41 - sqlalchemy.engine.Engine - INFO - SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.question_business_id = %(question_business_id_1)s AND answers.assistant_type = %(assistant_type_1)s 
 LIMIT %(param_1)s
2025-08-18 23:46:41 - sqlalchemy.engine.Engine - INFO - [cached since 0.1499s ago] {'question_business_id_1': '5aa571d1381308d07c4d92f39be95138', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-18 23:46:41 - sqlalchemy.engine.Engine - INFO - UPDATE answers SET updated_at=%(updated_at)s WHERE answers.id = %(answers_id)s
2025-08-18 23:46:41 - sqlalchemy.engine.Engine - INFO - [cached since 0.1495s ago] {'updated_at': datetime.datetime(2025, 8, 18, 15, 46, 41, 240830), 'answers_id': 4182}
2025-08-18 23:46:41 - sqlalchemy.engine.Engine - INFO - SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.question_business_id = %(question_business_id_1)s AND answers.assistant_type = %(assistant_type_1)s 
 LIMIT %(param_1)s
2025-08-18 23:46:41 - sqlalchemy.engine.Engine - INFO - [cached since 0.1517s ago] {'question_business_id_1': '101eb0aa498164cc8cfccad92e7dab01', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-18 23:46:41 - sqlalchemy.engine.Engine - INFO - UPDATE answers SET updated_at=%(updated_at)s WHERE answers.id = %(answers_id)s
2025-08-18 23:46:41 - sqlalchemy.engine.Engine - INFO - [cached since 0.1512s ago] {'updated_at': datetime.datetime(2025, 8, 18, 15, 46, 41, 242438), 'answers_id': 4183}
2025-08-18 23:46:41 - sqlalchemy.engine.Engine - INFO - SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.question_business_id = %(question_business_id_1)s AND answers.assistant_type = %(assistant_type_1)s 
 LIMIT %(param_1)s
2025-08-18 23:46:41 - sqlalchemy.engine.Engine - INFO - [cached since 0.1534s ago] {'question_business_id_1': 'c25e922db50a65ea3234b3e5752a7a42', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-18 23:46:41 - sqlalchemy.engine.Engine - INFO - UPDATE answers SET updated_at=%(updated_at)s WHERE answers.id = %(answers_id)s
2025-08-18 23:46:41 - sqlalchemy.engine.Engine - INFO - [cached since 0.1528s ago] {'updated_at': datetime.datetime(2025, 8, 18, 15, 46, 41, 244159), 'answers_id': 4184}
2025-08-18 23:46:41 - sqlalchemy.engine.Engine - INFO - SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.question_business_id = %(question_business_id_1)s AND answers.assistant_type = %(assistant_type_1)s 
 LIMIT %(param_1)s
2025-08-18 23:46:41 - sqlalchemy.engine.Engine - INFO - [cached since 0.155s ago] {'question_business_id_1': '2ac14b547359a76a56c8223e936c9bcf', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-18 23:46:41 - sqlalchemy.engine.Engine - INFO - UPDATE answers SET updated_at=%(updated_at)s WHERE answers.id = %(answers_id)s
2025-08-18 23:46:41 - sqlalchemy.engine.Engine - INFO - [cached since 0.1544s ago] {'updated_at': datetime.datetime(2025, 8, 18, 15, 46, 41, 245718), 'answers_id': 4185}
2025-08-18 23:46:41 - sqlalchemy.engine.Engine - INFO - SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.question_business_id = %(question_business_id_1)s AND answers.assistant_type = %(assistant_type_1)s 
 LIMIT %(param_1)s
2025-08-18 23:46:41 - sqlalchemy.engine.Engine - INFO - [cached since 0.1565s ago] {'question_business_id_1': '6f7b916e9762180ab48441a60ed003c4', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-18 23:46:41 - app.services.sync_service - INFO - 准备同步 50 条答案到answers表
2025-08-18 23:46:41 - app.services.sync_service - INFO - 准备同步 50 条答案到answers表
2025-08-18 23:46:41 - sqlalchemy.engine.Engine - INFO - UPDATE answers SET updated_at=%(updated_at)s WHERE answers.id = %(answers_id)s
2025-08-18 23:46:41 - sqlalchemy.engine.Engine - INFO - [cached since 0.1559s ago] {'updated_at': datetime.datetime(2025, 8, 18, 15, 46, 41, 247282), 'answers_id': 4186}
2025-08-18 23:46:41 - sqlalchemy.engine.Engine - INFO - COMMIT
2025-08-18 23:46:41 - app.services.sync_service - INFO - 数据同步完成: {'success': True, 'message': '成功同步 50 条问题和 50 条答案', 'synced_questions': 50, 'synced_answers': 50, 'total_synced': 50}
2025-08-18 23:46:41 - app.services.sync_service - INFO - 数据同步完成: {'success': True, 'message': '成功同步 50 条问题和 50 条答案', 'synced_questions': 50, 'synced_answers': 50, 'total_synced': 50}
2025-08-18 23:46:41 - app.services.scheduler_service - INFO - 数据同步阶段完成: 成功同步 50 条问题和 50 条答案
2025-08-18 23:46:41 - app.services.scheduler_service - INFO - 数据同步阶段完成: 成功同步 50 条问题和 50 条答案
2025-08-18 23:46:41 - app.services.scheduler_service - INFO - 执行工作流阶段: classification
2025-08-18 23:46:41 - app.services.scheduler_service - INFO - 执行工作流阶段: classification
2025-08-18 23:46:41 - app.services.scheduler_service - INFO - 开始执行分类处理阶段 [workflow: workflow_20250818_154640]
2025-08-18 23:46:41 - app.services.scheduler_service - INFO - 开始执行分类处理阶段 [workflow: workflow_20250818_154640]
2025-08-18 23:46:41 - app.services.ai_processing_service - INFO - 开始批量分类处理
2025-08-18 23:46:41 - app.services.ai_processing_service - INFO - 开始批量分类处理
2025-08-18 23:46:41 - app.services.ai_processing_service - INFO - 查找所有待分类问题（不限制时间范围和处理状态）
2025-08-18 23:46:41 - app.services.ai_processing_service - INFO - 查找所有待分类问题（不限制时间范围和处理状态）
2025-08-18 23:46:41 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-18 23:46:41 - sqlalchemy.engine.Engine - INFO - SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE (questions.classification IS NULL OR questions.classification = %(classification_1)s) AND questions.is_deleted = false ORDER BY questions.created_at DESC
2025-08-18 23:46:41 - sqlalchemy.engine.Engine - INFO - [generated in 0.00016s] {'classification_1': ''}
2025-08-18 23:46:41 - app.services.scheduler_service - INFO - 分类处理阶段完成: 没有需要分类的问题
2025-08-18 23:46:41 - app.services.scheduler_service - INFO - 分类处理阶段完成: 没有需要分类的问题
2025-08-18 23:46:41 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-18 23:46:41 - app.services.scheduler_service - INFO - 执行工作流阶段: answer_generation
2025-08-18 23:46:41 - app.services.scheduler_service - INFO - 执行工作流阶段: answer_generation
2025-08-18 23:46:41 - app.services.scheduler_service - INFO - 开始执行答案生成阶段 [workflow: workflow_20250818_154640]
2025-08-18 23:46:41 - app.services.scheduler_service - INFO - 开始执行答案生成阶段 [workflow: workflow_20250818_154640]
2025-08-18 23:46:41 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-18 23:46:41 - sqlalchemy.engine.Engine - INFO - SELECT system_config.id AS system_config_id, system_config.config_key AS system_config_config_key, system_config.config_value AS system_config_config_value, system_config.config_type AS system_config_config_type, system_config.description AS system_config_description, system_config.effective_time AS system_config_effective_time, system_config.previous_value AS system_config_previous_value, system_config.status AS system_config_status, system_config.created_at AS system_config_created_at, system_config.updated_at AS system_config_updated_at 
FROM system_config 
WHERE system_config.config_key = %(config_key_1)s 
 LIMIT %(param_1)s
2025-08-18 23:46:41 - sqlalchemy.engine.Engine - INFO - [cached since 105.1s ago] {'config_key_1': 'workflow.answer_generation_mode', 'param_1': 1}
2025-08-18 23:46:41 - app.services.scheduler_service - INFO - 当前答案生成模式: api
2025-08-18 23:46:41 - app.services.scheduler_service - INFO - 当前答案生成模式: api
2025-08-18 23:46:41 - app.services.ai_processing_service - INFO - 开始批量答案生成
2025-08-18 23:46:41 - app.services.ai_processing_service - INFO - 开始批量答案生成
2025-08-18 23:46:41 - sqlalchemy.engine.Engine - INFO - SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.processing_status IN (%(processing_status_1_1)s, %(processing_status_1_2)s, %(processing_status_1_3)s) ORDER BY questions.created_at DESC
2025-08-18 23:46:41 - sqlalchemy.engine.Engine - INFO - [generated in 0.00020s] {'created_at_1': datetime.datetime(2025, 8, 17, 15, 46, 41, 255521), 'processing_status_1_1': 'pending', 'processing_status_1_2': 'classified', 'processing_status_1_3': 'answer_generation_failed'}
2025-08-18 23:46:41 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-18 23:46:41 - app.services.scheduler_service - INFO - 执行工作流阶段: scoring
2025-08-18 23:46:41 - app.services.scheduler_service - INFO - 执行工作流阶段: scoring
2025-08-18 23:46:41 - app.services.scheduler_service - INFO - 开始执行评分处理阶段 [workflow: workflow_20250818_154640]
2025-08-18 23:46:41 - app.services.scheduler_service - INFO - 开始执行评分处理阶段 [workflow: workflow_20250818_154640]
2025-08-18 23:46:41 - app.services.ai_processing_service - INFO - 开始批量评分处理
2025-08-18 23:46:41 - app.services.ai_processing_service - INFO - 开始批量评分处理
2025-08-18 23:46:41 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-18 23:46:41 - sqlalchemy.engine.Engine - INFO - SELECT DISTINCT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions JOIN answers ON questions.business_id = answers.question_business_id 
WHERE questions.created_at >= %(created_at_1)s AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s AND questions.processing_status IN (%(processing_status_1_1)s, %(processing_status_1_2)s) AND answers.answer_text IS NOT NULL AND answers.answer_text != %(answer_text_1)s ORDER BY questions.created_at DESC
2025-08-18 23:46:41 - sqlalchemy.engine.Engine - INFO - [generated in 0.00022s] {'created_at_1': datetime.datetime(2025, 8, 17, 15, 46, 41, 296139), 'classification_1': '', 'answer_text_1': '', 'processing_status_1_1': 'answers_generated', 'processing_status_1_2': 'scoring'}
2025-08-18 23:46:41 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-18 23:46:41 - app.services.scheduler_service - INFO - 阶段 scoring 不自动进入下一阶段，工作流暂停
2025-08-18 23:46:41 - app.services.scheduler_service - INFO - 阶段 scoring 不自动进入下一阶段，工作流暂停
2025-08-18 23:46:41 - apscheduler.executors.default - INFO - Job "可配置间隔AI处理工作流 (trigger: interval[0:03:00], next run at: 2025-08-18 23:49:40 CST)" executed successfully
2025-08-18 23:46:49 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-18 23:46:49 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions) AS anon_1
2025-08-18 23:46:49 - sqlalchemy.engine.Engine - INFO - [cached since 155.1s ago] {}
2025-08-18 23:46:49 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers) AS anon_1
2025-08-18 23:46:49 - sqlalchemy.engine.Engine - INFO - [cached since 155.1s ago] {}
2025-08-18 23:46:49 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.question_business_id AS answers_question_business_id 
FROM answers JOIN questions ON answers.question_business_id = questions.business_id 
WHERE answers.is_scored = true AND answers.assistant_type IN (%(assistant_type_1_1)s, %(assistant_type_1_2)s, %(assistant_type_1_3)s) GROUP BY answers.question_business_id 
HAVING count(distinct(answers.assistant_type)) = %(count_2)s) AS anon_1
2025-08-18 23:46:49 - sqlalchemy.engine.Engine - INFO - [cached since 155.1s ago] {'count_2': 3, 'assistant_type_1_1': 'yoyo', 'assistant_type_1_2': 'doubao', 'assistant_type_1_3': 'xiaotian'}
2025-08-18 23:46:49 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT scores.id AS scores_id, scores.answer_id AS scores_answer_id, scores.score_1 AS scores_score_1, scores.score_2 AS scores_score_2, scores.score_3 AS scores_score_3, scores.score_4 AS scores_score_4, scores.score_5 AS scores_score_5, scores.dimension_1_name AS scores_dimension_1_name, scores.dimension_2_name AS scores_dimension_2_name, scores.dimension_3_name AS scores_dimension_3_name, scores.dimension_4_name AS scores_dimension_4_name, scores.dimension_5_name AS scores_dimension_5_name, scores.average_score AS scores_average_score, scores.comment AS scores_comment, scores.rated_at AS scores_rated_at 
FROM scores) AS anon_1
2025-08-18 23:46:49 - sqlalchemy.engine.Engine - INFO - [cached since 155.1s ago] {}
2025-08-18 23:46:49 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.assistant_type = %(assistant_type_1)s) AS anon_1
2025-08-18 23:46:49 - sqlalchemy.engine.Engine - INFO - [cached since 155.1s ago] {'assistant_type_1': 'doubao'}
2025-08-18 23:46:49 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.assistant_type = %(assistant_type_1)s) AS anon_1
2025-08-18 23:46:49 - sqlalchemy.engine.Engine - INFO - [cached since 155.1s ago] {'assistant_type_1': 'xiaotian'}
2025-08-18 23:46:49 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.classification IS NOT NULL AND questions.classification != %(classification_1)s) AS anon_1
2025-08-18 23:46:49 - sqlalchemy.engine.Engine - INFO - [cached since 155.1s ago] {'classification_1': ''}
2025-08-18 23:46:49 - sqlalchemy.engine.Engine - INFO - SELECT count(questions.id) AS count_1 
FROM questions
2025-08-18 23:46:49 - sqlalchemy.engine.Engine - INFO - [cached since 155.1s ago] {}
2025-08-18 23:46:49 - sqlalchemy.engine.Engine - INFO - SELECT count(answers.id) AS count_1 
FROM answers
2025-08-18 23:46:49 - sqlalchemy.engine.Engine - INFO - [cached since 155.1s ago] {}
2025-08-18 23:46:49 - sqlalchemy.engine.Engine - INFO - SELECT count(answers.id) AS count_1 
FROM answers 
WHERE answers.assistant_type = %(assistant_type_1)s
2025-08-18 23:46:49 - sqlalchemy.engine.Engine - INFO - [cached since 155.1s ago] {'assistant_type_1': 'yoyo'}
2025-08-18 23:46:49 - sqlalchemy.engine.Engine - INFO - SELECT COUNT(*) FROM table1
2025-08-18 23:46:49 - sqlalchemy.engine.Engine - INFO - [cached since 155.1s ago] {}
2025-08-18 23:46:49 - sqlalchemy.engine.Engine - INFO - SELECT COUNT(*) FROM table1 WHERE answer IS NOT NULL AND answer != '' AND TRIM(answer) != ''
2025-08-18 23:46:49 - sqlalchemy.engine.Engine - INFO - [cached since 155.1s ago] {}
2025-08-18 23:46:49 - sqlalchemy.engine.Engine - INFO - SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions ORDER BY questions.sendmessagetime DESC 
 LIMIT %(param_1)s
2025-08-18 23:46:49 - sqlalchemy.engine.Engine - INFO - [cached since 155.1s ago] {'param_1': 1}
2025-08-18 23:46:49 - sqlalchemy.engine.Engine - INFO - SELECT MAX(sendmessagetime) FROM table1
2025-08-18 23:46:49 - sqlalchemy.engine.Engine - INFO - [cached since 155.1s ago] {}
2025-08-18 23:46:49 - sqlalchemy.engine.Engine - INFO - SELECT date(questions.sendmessagetime) AS date, count(questions.id) AS questions 
FROM questions 
WHERE questions.sendmessagetime >= %(sendmessagetime_1)s GROUP BY date(questions.sendmessagetime)
2025-08-18 23:46:49 - sqlalchemy.engine.Engine - INFO - [cached since 155.1s ago] {'sendmessagetime_1': datetime.datetime(2025, 8, 11, 15, 46, 49, 962481)}
2025-08-18 23:46:49 - sqlalchemy.engine.Engine - INFO - SELECT date(questions.sendmessagetime) AS date, count(questions.id) AS classifications 
FROM questions 
WHERE questions.sendmessagetime >= %(sendmessagetime_1)s AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s GROUP BY date(questions.sendmessagetime)
2025-08-18 23:46:49 - sqlalchemy.engine.Engine - INFO - [cached since 155.1s ago] {'sendmessagetime_1': datetime.datetime(2025, 8, 11, 15, 46, 49, 962481), 'classification_1': ''}
2025-08-18 23:46:49 - sqlalchemy.engine.Engine - INFO - SELECT date(scores.rated_at) AS date, count(scores.id) AS scores 
FROM scores 
WHERE scores.rated_at >= %(rated_at_1)s GROUP BY date(scores.rated_at)
2025-08-18 23:46:49 - sqlalchemy.engine.Engine - INFO - [cached since 155.1s ago] {'rated_at_1': datetime.datetime(2025, 8, 11, 15, 46, 49, 962481)}
2025-08-18 23:46:49 - sqlalchemy.engine.Engine - INFO - SELECT questions.classification AS questions_classification, count(questions.id) AS count_1 
FROM questions 
WHERE questions.classification IS NOT NULL GROUP BY questions.classification
2025-08-18 23:46:49 - sqlalchemy.engine.Engine - INFO - [cached since 155.1s ago] {}
2025-08-18 23:46:49 - sqlalchemy.engine.Engine - INFO - SELECT answers.assistant_type AS answers_assistant_type, count(answers.id) AS total 
FROM answers GROUP BY answers.assistant_type
2025-08-18 23:46:49 - sqlalchemy.engine.Engine - INFO - [cached since 155.1s ago] {}
2025-08-18 23:46:49 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-18 23:46:49 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-18 23:46:49 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions) AS anon_1
2025-08-18 23:46:49 - sqlalchemy.engine.Engine - INFO - [cached since 155.1s ago] {}
2025-08-18 23:46:49 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s) AS anon_1
2025-08-18 23:46:49 - sqlalchemy.engine.Engine - INFO - [cached since 113.9s ago] {'created_at_1': datetime.datetime(2025, 8, 18, 0, 0)}
2025-08-18 23:46:49 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s) AS anon_1
2025-08-18 23:46:49 - sqlalchemy.engine.Engine - INFO - [cached since 113.9s ago] {'created_at_1': datetime.datetime(2025, 8, 18, 0, 0), 'classification_1': ''}
2025-08-18 23:46:49 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.classification IS NOT NULL AND questions.classification != %(classification_1)s) AS anon_1
2025-08-18 23:46:49 - sqlalchemy.engine.Engine - INFO - [cached since 155.1s ago] {'classification_1': ''}
2025-08-18 23:46:49 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT access_logs.id AS access_logs_id, access_logs.user_id AS access_logs_user_id, access_logs.username AS access_logs_username, access_logs.action AS access_logs_action, access_logs.ip_address AS access_logs_ip_address, access_logs.created_at AS access_logs_created_at 
FROM access_logs 
WHERE access_logs.action = %(action_1)s) AS anon_1
2025-08-18 23:46:49 - sqlalchemy.engine.Engine - INFO - [cached since 113.9s ago] {'action_1': 'login'}
2025-08-18 23:46:49 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT access_logs.id AS access_logs_id, access_logs.user_id AS access_logs_user_id, access_logs.username AS access_logs_username, access_logs.action AS access_logs_action, access_logs.ip_address AS access_logs_ip_address, access_logs.created_at AS access_logs_created_at 
FROM access_logs 
WHERE access_logs.action = %(action_1)s AND access_logs.created_at >= %(created_at_1)s) AS anon_1
2025-08-18 23:46:49 - sqlalchemy.engine.Engine - INFO - [cached since 113.9s ago] {'action_1': 'login', 'created_at_1': datetime.datetime(2025, 8, 18, 0, 0)}
2025-08-18 23:46:49 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s) AS anon_1
2025-08-18 23:46:49 - sqlalchemy.engine.Engine - INFO - [cached since 113.9s ago] {'created_at_1': datetime.datetime(2025, 8, 18, 0, 0)}
2025-08-18 23:46:49 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s) AS anon_1
2025-08-18 23:46:49 - sqlalchemy.engine.Engine - INFO - [cached since 113.9s ago] {'created_at_1': datetime.datetime(2025, 8, 18, 0, 0)}
2025-08-18 23:46:49 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s) AS anon_1
2025-08-18 23:46:49 - sqlalchemy.engine.Engine - INFO - [cached since 113.9s ago] {'created_at_1': datetime.datetime(2025, 8, 18, 0, 0), 'classification_1': ''}
2025-08-18 23:46:49 - sqlalchemy.engine.Engine - INFO - SELECT coalesce(sum(least(anon_1.cnt, %(least_1)s)), %(coalesce_2)s) AS coalesce_1 
FROM (SELECT answers.question_business_id AS qbid, count(answers.id) AS cnt 
FROM answers JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.created_at >= %(created_at_1)s AND answers.created_at >= %(created_at_2)s AND answers.assistant_type IN (%(assistant_type_1_1)s, %(assistant_type_1_2)s) AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s GROUP BY answers.question_business_id) AS anon_1
2025-08-18 23:46:49 - sqlalchemy.engine.Engine - INFO - [cached since 113.9s ago] {'least_1': 2, 'coalesce_2': 0, 'created_at_1': datetime.datetime(2025, 8, 18, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 18, 0, 0), 'classification_1': '', 'assistant_type_1_1': 'doubao', 'assistant_type_1_2': 'xiaotian'}
2025-08-18 23:46:49 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT count(distinct(answers.question_business_id)) AS count_2 
FROM answers JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.created_at >= %(created_at_1)s AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s AND answers.is_scored = true AND answers.assistant_type IN (%(assistant_type_1_1)s, %(assistant_type_1_2)s, %(assistant_type_1_3)s) GROUP BY answers.question_business_id 
HAVING count(distinct(answers.assistant_type)) = %(count_3)s) AS anon_1
2025-08-18 23:46:49 - sqlalchemy.engine.Engine - INFO - [cached since 113.9s ago] {'created_at_1': datetime.datetime(2025, 8, 18, 0, 0), 'classification_1': '', 'count_3': 3, 'assistant_type_1_1': 'yoyo', 'assistant_type_1_2': 'doubao', 'assistant_type_1_3': 'xiaotian'}
2025-08-18 23:46:49 - sqlalchemy.engine.Engine - INFO - SELECT count(distinct(questions.business_id)) AS count_1 
FROM questions JOIN answers ON questions.business_id = answers.question_business_id 
WHERE questions.created_at >= %(created_at_1)s AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s AND answers.assistant_type IN (%(assistant_type_1_1)s, %(assistant_type_1_2)s) AND answers.created_at >= %(created_at_2)s
2025-08-18 23:46:49 - sqlalchemy.engine.Engine - INFO - [cached since 113.9s ago] {'created_at_1': datetime.datetime(2025, 8, 18, 0, 0), 'classification_1': '', 'created_at_2': datetime.datetime(2025, 8, 18, 0, 0), 'assistant_type_1_1': 'doubao', 'assistant_type_1_2': 'xiaotian'}
2025-08-18 23:46:50 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.processing_status = %(processing_status_1)s AND questions.is_badcase = true) AS anon_1
2025-08-18 23:46:50 - sqlalchemy.engine.Engine - INFO - [cached since 113.9s ago] {'created_at_1': datetime.datetime(2025, 8, 18, 0, 0), 'processing_status_1': 'scored'}
2025-08-18 23:46:50 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.processing_status = %(processing_status_1)s AND questions.badcase_review_status = %(badcase_review_status_1)s) AS anon_1
2025-08-18 23:46:50 - sqlalchemy.engine.Engine - INFO - [cached since 113.9s ago] {'created_at_1': datetime.datetime(2025, 8, 18, 0, 0), 'processing_status_1': 'scored', 'badcase_review_status_1': 'reviewed'}
2025-08-18 23:46:50 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s) AS anon_1
2025-08-18 23:46:50 - sqlalchemy.engine.Engine - INFO - [cached since 113.9s ago] {'created_at_1': datetime.datetime(2025, 8, 18, 14, 46, 49, 992363)}
2025-08-18 23:46:50 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s) AS anon_1
2025-08-18 23:46:50 - sqlalchemy.engine.Engine - INFO - [cached since 113.9s ago] {'created_at_1': datetime.datetime(2025, 8, 18, 9, 46, 49, 992363)}
2025-08-18 23:46:50 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.updated_at >= %(updated_at_1)s AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s) AS anon_1
2025-08-18 23:46:50 - sqlalchemy.engine.Engine - INFO - [cached since 113.9s ago] {'updated_at_1': datetime.datetime(2025, 8, 18, 15, 16, 49, 992363), 'classification_1': ''}
2025-08-18 23:46:50 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers JOIN questions ON answers.question_business_id = questions.business_id 
WHERE answers.created_at >= %(created_at_1)s) AS anon_1
2025-08-18 23:46:50 - sqlalchemy.engine.Engine - INFO - [cached since 113.9s ago] {'created_at_1': datetime.datetime(2025, 8, 18, 15, 16, 49, 992363)}
2025-08-18 23:46:50 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.updated_at >= %(updated_at_1)s AND answers.is_scored = true) AS anon_1
2025-08-18 23:46:50 - sqlalchemy.engine.Engine - INFO - [cached since 113.9s ago] {'updated_at_1': datetime.datetime(2025, 8, 18, 15, 16, 49, 992363)}
2025-08-18 23:46:50 - sqlalchemy.engine.Engine - INFO - SELECT date_trunc(%(date_trunc_1)s, questions.created_at) AS day, count(questions.id) AS count 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s GROUP BY date_trunc(%(date_trunc_2)s, questions.created_at) ORDER BY day
2025-08-18 23:46:50 - sqlalchemy.engine.Engine - INFO - [cached since 113.9s ago] {'date_trunc_1': 'day', 'created_at_1': datetime.datetime(2025, 8, 11, 15, 46, 50, 8394), 'date_trunc_2': 'day'}
2025-08-18 23:46:50 - sqlalchemy.engine.Engine - INFO - SELECT date_trunc(%(date_trunc_1)s, questions.updated_at) AS day, count(questions.id) AS count 
FROM questions 
WHERE questions.updated_at >= %(updated_at_1)s AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s AND questions.processing_status IN (%(processing_status_1_1)s, %(processing_status_1_2)s, %(processing_status_1_3)s) GROUP BY date_trunc(%(date_trunc_2)s, questions.updated_at) ORDER BY day
2025-08-18 23:46:50 - sqlalchemy.engine.Engine - INFO - [cached since 113.9s ago] {'date_trunc_1': 'day', 'updated_at_1': datetime.datetime(2025, 8, 11, 15, 46, 50, 8394), 'classification_1': '', 'date_trunc_2': 'day', 'processing_status_1_1': 'classified', 'processing_status_1_2': 'answers_generated', 'processing_status_1_3': 'scored'}
2025-08-18 23:46:50 - sqlalchemy.engine.Engine - INFO - SELECT date_trunc(%(date_trunc_1)s, answers.created_at) AS day, count(answers.id) AS count 
FROM answers JOIN questions ON answers.question_business_id = questions.business_id 
WHERE answers.created_at >= %(created_at_1)s AND questions.created_at >= %(created_at_2)s AND answers.assistant_type IN (%(assistant_type_1_1)s, %(assistant_type_1_2)s) AND answers.is_scored = true AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s GROUP BY date_trunc(%(date_trunc_2)s, answers.created_at) ORDER BY day
2025-08-18 23:46:50 - sqlalchemy.engine.Engine - INFO - [cached since 113.9s ago] {'date_trunc_1': 'day', 'created_at_1': datetime.datetime(2025, 8, 11, 15, 46, 50, 8394), 'created_at_2': datetime.datetime(2025, 8, 11, 15, 46, 50, 8394), 'classification_1': '', 'date_trunc_2': 'day', 'assistant_type_1_1': 'doubao', 'assistant_type_1_2': 'xiaotian'}
2025-08-18 23:46:50 - sqlalchemy.engine.Engine - INFO - SELECT answers.assistant_type AS answers_assistant_type, avg(scores.score_1) AS avg_score_1, avg(scores.score_2) AS avg_score_2, avg(scores.score_3) AS avg_score_3, avg(scores.score_4) AS avg_score_4, avg(scores.score_5) AS avg_score_5, avg(scores.average_score) AS avg_total, count(scores.id) AS score_count 
FROM answers JOIN scores ON answers.id = scores.answer_id GROUP BY answers.assistant_type
2025-08-18 23:46:50 - sqlalchemy.engine.Engine - INFO - [cached since 113.9s ago] {}
2025-08-18 23:46:50 - sqlalchemy.engine.Engine - INFO - SELECT system_config.id AS system_config_id, system_config.config_key AS system_config_config_key, system_config.config_value AS system_config_config_value, system_config.config_type AS system_config_config_type, system_config.description AS system_config_description, system_config.effective_time AS system_config_effective_time, system_config.previous_value AS system_config_previous_value, system_config.status AS system_config_status, system_config.created_at AS system_config_created_at, system_config.updated_at AS system_config_updated_at 
FROM system_config 
WHERE system_config.config_key = %(config_key_1)s 
 LIMIT %(param_1)s
2025-08-18 23:46:50 - sqlalchemy.engine.Engine - INFO - [cached since 113.9s ago] {'config_key_1': 'display.hot_categories_time_range', 'param_1': 1}
2025-08-18 23:46:50 - sqlalchemy.engine.Engine - INFO - SELECT questions.classification AS name, count(questions.id) AS count 
FROM questions 
WHERE questions.classification IS NOT NULL AND questions.classification != %(classification_1)s GROUP BY questions.classification
2025-08-18 23:46:50 - sqlalchemy.engine.Engine - INFO - [cached since 113.9s ago] {'classification_1': ''}
2025-08-18 23:46:50 - sqlalchemy.engine.Engine - INFO - SELECT questions.classification AS name, count(questions.id) AS count 
FROM questions 
WHERE questions.classification IS NOT NULL AND questions.classification != %(classification_1)s AND questions.created_at >= %(created_at_1)s GROUP BY questions.classification ORDER BY count(questions.id) DESC
2025-08-18 23:46:50 - sqlalchemy.engine.Engine - INFO - [cached since 113.9s ago] {'classification_1': '', 'created_at_1': datetime.datetime(2025, 8, 11, 15, 46, 50, 16940)}
2025-08-18 23:46:50 - sqlalchemy.engine.Engine - INFO - SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions ORDER BY questions.created_at DESC 
 LIMIT %(param_1)s
2025-08-18 23:46:50 - sqlalchemy.engine.Engine - INFO - [cached since 113.9s ago] {'param_1': 5}
2025-08-18 23:46:50 - sqlalchemy.engine.Engine - INFO - SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers ORDER BY answers.created_at DESC 
 LIMIT %(param_1)s
2025-08-18 23:46:50 - sqlalchemy.engine.Engine - INFO - [cached since 113.9s ago] {'param_1': 5}
2025-08-18 23:46:50 - sqlalchemy.engine.Engine - INFO - SELECT scores.id AS scores_id, scores.answer_id AS scores_answer_id, scores.score_1 AS scores_score_1, scores.score_2 AS scores_score_2, scores.score_3 AS scores_score_3, scores.score_4 AS scores_score_4, scores.score_5 AS scores_score_5, scores.dimension_1_name AS scores_dimension_1_name, scores.dimension_2_name AS scores_dimension_2_name, scores.dimension_3_name AS scores_dimension_3_name, scores.dimension_4_name AS scores_dimension_4_name, scores.dimension_5_name AS scores_dimension_5_name, scores.average_score AS scores_average_score, scores.comment AS scores_comment, scores.rated_at AS scores_rated_at 
FROM scores ORDER BY scores.rated_at DESC 
 LIMIT %(param_1)s
2025-08-18 23:46:50 - sqlalchemy.engine.Engine - INFO - [cached since 113.9s ago] {'param_1': 5}
2025-08-18 23:46:50 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s) AS anon_1
2025-08-18 23:46:50 - sqlalchemy.engine.Engine - INFO - [cached since 113.9s ago] {'created_at_1': datetime.datetime(2025, 8, 18, 15, 41, 50, 21088)}
2025-08-18 23:46:50 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.created_at >= %(created_at_1)s) AS anon_1
2025-08-18 23:46:50 - sqlalchemy.engine.Engine - INFO - [cached since 113.9s ago] {'created_at_1': datetime.datetime(2025, 8, 18, 15, 41, 50, 21088)}
2025-08-18 23:46:50 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT scores.id AS scores_id, scores.answer_id AS scores_answer_id, scores.score_1 AS scores_score_1, scores.score_2 AS scores_score_2, scores.score_3 AS scores_score_3, scores.score_4 AS scores_score_4, scores.score_5 AS scores_score_5, scores.dimension_1_name AS scores_dimension_1_name, scores.dimension_2_name AS scores_dimension_2_name, scores.dimension_3_name AS scores_dimension_3_name, scores.dimension_4_name AS scores_dimension_4_name, scores.dimension_5_name AS scores_dimension_5_name, scores.average_score AS scores_average_score, scores.comment AS scores_comment, scores.rated_at AS scores_rated_at 
FROM scores 
WHERE scores.rated_at >= %(rated_at_1)s) AS anon_1
2025-08-18 23:46:50 - sqlalchemy.engine.Engine - INFO - [cached since 113.9s ago] {'rated_at_1': datetime.datetime(2025, 8, 18, 15, 41, 50, 21088)}
2025-08-18 23:46:50 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.assistant_type = %(assistant_type_1)s AND answers.created_at >= %(created_at_1)s) AS anon_1
2025-08-18 23:46:50 - sqlalchemy.engine.Engine - INFO - [cached since 113.9s ago] {'assistant_type_1': 'yoyo', 'created_at_1': datetime.datetime(2025, 8, 18, 15, 41, 50, 21088)}
2025-08-18 23:46:50 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.assistant_type = %(assistant_type_1)s AND answers.created_at >= %(created_at_1)s) AS anon_1
2025-08-18 23:46:50 - sqlalchemy.engine.Engine - INFO - [cached since 113.9s ago] {'assistant_type_1': 'doubao', 'created_at_1': datetime.datetime(2025, 8, 18, 15, 41, 50, 21088)}
2025-08-18 23:46:50 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.assistant_type = %(assistant_type_1)s AND answers.created_at >= %(created_at_1)s) AS anon_1
2025-08-18 23:46:50 - sqlalchemy.engine.Engine - INFO - [cached since 113.9s ago] {'assistant_type_1': 'xiaotian', 'created_at_1': datetime.datetime(2025, 8, 18, 15, 41, 50, 21088)}
2025-08-18 23:46:50 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-18 23:47:02 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-18 23:47:02 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-18 23:47:02 - sqlalchemy.engine.Engine - INFO - SELECT questions.classification AS questions_classification, count(questions.id) AS badcase_count 
FROM questions 
WHERE questions.is_badcase = true GROUP BY questions.classification ORDER BY count(questions.id) DESC 
 LIMIT %(param_1)s
2025-08-18 23:47:02 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s) AS anon_1
2025-08-18 23:47:02 - sqlalchemy.engine.Engine - INFO - [cached since 187.1s ago] {'param_1': 3}
2025-08-18 23:47:02 - sqlalchemy.engine.Engine - INFO - [cached since 187.1s ago] {'created_at_1': datetime.datetime(2025, 8, 18, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 24, 23, 59, 59, 999999), 'processing_status_1': 'scored'}
2025-08-18 23:47:02 - sqlalchemy.engine.Engine - INFO - 
                WITH dimension_scores AS (
                    -- 维度1的数据
                    SELECT
                        s.dimension_1_name as dimension_name,
                        s.score_1 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_1_name IS NOT NULL
                    AND s.score_1 IS NOT NULL

                    UNION ALL

                    -- 维度2的数据
                    SELECT
                        s.dimension_2_name as dimension_name,
                        s.score_2 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_2_name IS NOT NULL
                    AND s.score_2 IS NOT NULL

                    UNION ALL

                    -- 维度3的数据
                    SELECT
                        s.dimension_3_name as dimension_name,
                        s.score_3 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_3_name IS NOT NULL
                    AND s.score_3 IS NOT NULL

                    UNION ALL

                    -- 维度4的数据
                    SELECT
                        s.dimension_4_name as dimension_name,
                        s.score_4 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_4_name IS NOT NULL
                    AND s.score_4 IS NOT NULL

                    UNION ALL

                    -- 维度5的数据
                    SELECT
                        s.dimension_5_name as dimension_name,
                        s.score_5 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_5_name IS NOT NULL
                    AND s.score_5 IS NOT NULL
                )
                SELECT
                    dimension_name,
                    AVG(score) as avg_score,
                    COUNT(*) as sample_count
                FROM dimension_scores
                GROUP BY dimension_name
                ORDER BY avg_score ASC
            
2025-08-18 23:47:02 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s AND questions.is_badcase = true) AS anon_1
2025-08-18 23:47:02 - sqlalchemy.engine.Engine - INFO - [cached since 187.1s ago] {'classification': '产品使用'}
2025-08-18 23:47:02 - sqlalchemy.engine.Engine - INFO - [cached since 187.1s ago] {'created_at_1': datetime.datetime(2025, 8, 18, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 24, 23, 59, 59, 999999), 'processing_status_1': 'scored'}
2025-08-18 23:47:02 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s AND questions.is_badcase = true AND questions.badcase_review_status = %(badcase_review_status_1)s) AS anon_1
2025-08-18 23:47:02 - sqlalchemy.engine.Engine - INFO - [cached since 187.1s ago] {'created_at_1': datetime.datetime(2025, 8, 18, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 24, 23, 59, 59, 999999), 'processing_status_1': 'scored', 'badcase_review_status_1': 'pending'}
2025-08-18 23:47:02 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s AND questions.badcase_review_status = %(badcase_review_status_1)s) AS anon_1
2025-08-18 23:47:02 - sqlalchemy.engine.Engine - INFO - [cached since 187.1s ago] {'created_at_1': datetime.datetime(2025, 8, 18, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 24, 23, 59, 59, 999999), 'processing_status_1': 'scored', 'badcase_review_status_1': 'reviewed'}
2025-08-18 23:47:02 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s AND questions.badcase_review_status = %(badcase_review_status_1)s AND questions.is_badcase = false) AS anon_1
2025-08-18 23:47:02 - sqlalchemy.engine.Engine - INFO - 
                WITH dimension_scores AS (
                    -- 维度1的数据
                    SELECT
                        s.dimension_1_name as dimension_name,
                        s.score_1 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_1_name IS NOT NULL
                    AND s.score_1 IS NOT NULL

                    UNION ALL

                    -- 维度2的数据
                    SELECT
                        s.dimension_2_name as dimension_name,
                        s.score_2 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_2_name IS NOT NULL
                    AND s.score_2 IS NOT NULL

                    UNION ALL

                    -- 维度3的数据
                    SELECT
                        s.dimension_3_name as dimension_name,
                        s.score_3 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_3_name IS NOT NULL
                    AND s.score_3 IS NOT NULL

                    UNION ALL

                    -- 维度4的数据
                    SELECT
                        s.dimension_4_name as dimension_name,
                        s.score_4 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_4_name IS NOT NULL
                    AND s.score_4 IS NOT NULL

                    UNION ALL

                    -- 维度5的数据
                    SELECT
                        s.dimension_5_name as dimension_name,
                        s.score_5 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_5_name IS NOT NULL
                    AND s.score_5 IS NOT NULL
                )
                SELECT
                    dimension_name,
                    AVG(score) as avg_score,
                    COUNT(*) as sample_count
                FROM dimension_scores
                GROUP BY dimension_name
                ORDER BY avg_score ASC
            
2025-08-18 23:47:02 - sqlalchemy.engine.Engine - INFO - [cached since 187.1s ago] {'created_at_1': datetime.datetime(2025, 8, 18, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 24, 23, 59, 59, 999999), 'processing_status_1': 'scored', 'badcase_review_status_1': 'reviewed'}
2025-08-18 23:47:02 - sqlalchemy.engine.Engine - INFO - [cached since 187.1s ago] {'classification': '其他'}
2025-08-18 23:47:02 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-18 23:47:02 - sqlalchemy.engine.Engine - INFO - 
                WITH dimension_scores AS (
                    -- 维度1的数据
                    SELECT
                        s.dimension_1_name as dimension_name,
                        s.score_1 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_1_name IS NOT NULL
                    AND s.score_1 IS NOT NULL

                    UNION ALL

                    -- 维度2的数据
                    SELECT
                        s.dimension_2_name as dimension_name,
                        s.score_2 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_2_name IS NOT NULL
                    AND s.score_2 IS NOT NULL

                    UNION ALL

                    -- 维度3的数据
                    SELECT
                        s.dimension_3_name as dimension_name,
                        s.score_3 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_3_name IS NOT NULL
                    AND s.score_3 IS NOT NULL

                    UNION ALL

                    -- 维度4的数据
                    SELECT
                        s.dimension_4_name as dimension_name,
                        s.score_4 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_4_name IS NOT NULL
                    AND s.score_4 IS NOT NULL

                    UNION ALL

                    -- 维度5的数据
                    SELECT
                        s.dimension_5_name as dimension_name,
                        s.score_5 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_5_name IS NOT NULL
                    AND s.score_5 IS NOT NULL
                )
                SELECT
                    dimension_name,
                    AVG(score) as avg_score,
                    COUNT(*) as sample_count
                FROM dimension_scores
                GROUP BY dimension_name
                ORDER BY avg_score ASC
            
2025-08-18 23:47:02 - sqlalchemy.engine.Engine - INFO - [cached since 187.1s ago] {'classification': '经济问题'}
2025-08-18 23:47:02 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-18 23:47:06 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-18 23:47:06 - sqlalchemy.engine.Engine - INFO - SELECT users.id AS users_id, users.username AS users_username, users.display_name AS users_display_name, users.password_hash AS users_password_hash, users.role AS users_role, users.status AS users_status, users.created_at AS users_created_at, users.last_login_at AS users_last_login_at, users.login_count AS users_login_count 
FROM users 
WHERE users.id = %(pk_1)s
2025-08-18 23:47:06 - sqlalchemy.engine.Engine - INFO - [generated in 0.00020s] {'pk_1': '1'}
2025-08-18 23:47:06 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-18 23:47:06 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-18 23:47:06 - app.api.word_analysis_api - INFO - 获取词云数据请求: time_range=week, limit=40
2025-08-18 23:47:06 - app.api.word_analysis_api - INFO - 获取词云数据请求: time_range=week, limit=40
2025-08-18 23:47:06 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s) AS anon_1
2025-08-18 23:47:06 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-18 23:47:06 - app.services.word_analysis_service - INFO - 开始获取热词分析数据，时间范围: week, 限制: 40
2025-08-18 23:47:06 - sqlalchemy.engine.Engine - INFO - [cached since 191.4s ago] {'created_at_1': datetime.datetime(2025, 8, 18, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 24, 23, 59, 59, 999999), 'processing_status_1': 'scored'}
2025-08-18 23:47:06 - app.services.word_analysis_service - INFO - 开始获取热词分析数据，时间范围: week, 限制: 40
2025-08-18 23:47:06 - sqlalchemy.engine.Engine - INFO - SELECT questions.classification AS questions_classification, count(questions.id) AS badcase_count 
FROM questions 
WHERE questions.is_badcase = true GROUP BY questions.classification ORDER BY count(questions.id) DESC 
 LIMIT %(param_1)s
2025-08-18 23:47:06 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-18 23:47:06 - sqlalchemy.engine.Engine - INFO - [cached since 191.4s ago] {'param_1': 3}
2025-08-18 23:47:06 - sqlalchemy.engine.Engine - INFO - SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.query IS NOT NULL AND questions.query != %(query_1)s AND questions.is_deleted = false
2025-08-18 23:47:06 - sqlalchemy.engine.Engine - INFO - [cached since 161.4s ago] {'created_at_1': datetime.datetime(2025, 8, 18, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 24, 23, 59, 59, 999999), 'query_1': ''}
2025-08-18 23:47:06 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s AND questions.is_badcase = true) AS anon_1
2025-08-18 23:47:06 - sqlalchemy.engine.Engine - INFO - 
                WITH dimension_scores AS (
                    -- 维度1的数据
                    SELECT
                        s.dimension_1_name as dimension_name,
                        s.score_1 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_1_name IS NOT NULL
                    AND s.score_1 IS NOT NULL

                    UNION ALL

                    -- 维度2的数据
                    SELECT
                        s.dimension_2_name as dimension_name,
                        s.score_2 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_2_name IS NOT NULL
                    AND s.score_2 IS NOT NULL

                    UNION ALL

                    -- 维度3的数据
                    SELECT
                        s.dimension_3_name as dimension_name,
                        s.score_3 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_3_name IS NOT NULL
                    AND s.score_3 IS NOT NULL

                    UNION ALL

                    -- 维度4的数据
                    SELECT
                        s.dimension_4_name as dimension_name,
                        s.score_4 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_4_name IS NOT NULL
                    AND s.score_4 IS NOT NULL

                    UNION ALL

                    -- 维度5的数据
                    SELECT
                        s.dimension_5_name as dimension_name,
                        s.score_5 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_5_name IS NOT NULL
                    AND s.score_5 IS NOT NULL
                )
                SELECT
                    dimension_name,
                    AVG(score) as avg_score,
                    COUNT(*) as sample_count
                FROM dimension_scores
                GROUP BY dimension_name
                ORDER BY avg_score ASC
            
2025-08-18 23:47:06 - sqlalchemy.engine.Engine - INFO - [cached since 191.4s ago] {'created_at_1': datetime.datetime(2025, 8, 18, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 24, 23, 59, 59, 999999), 'processing_status_1': 'scored'}
2025-08-18 23:47:06 - sqlalchemy.engine.Engine - INFO - [cached since 191.4s ago] {'classification': '产品使用'}
2025-08-18 23:47:06 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s AND questions.is_badcase = true AND questions.badcase_review_status = %(badcase_review_status_1)s) AS anon_1
2025-08-18 23:47:06 - app.services.word_analysis_service - INFO - 查询到 53 个问题，时间范围: 2025-08-18 00:00:00 至 2025-08-24 23:59:59.999999
2025-08-18 23:47:06 - sqlalchemy.engine.Engine - INFO - [cached since 191.4s ago] {'created_at_1': datetime.datetime(2025, 8, 18, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 24, 23, 59, 59, 999999), 'processing_status_1': 'scored', 'badcase_review_status_1': 'pending'}
2025-08-18 23:47:06 - app.services.word_analysis_service - INFO - 查询到 53 个问题，时间范围: 2025-08-18 00:00:00 至 2025-08-24 23:59:59.999999
2025-08-18 23:47:06 - sqlalchemy.engine.Engine - INFO - 
                WITH dimension_scores AS (
                    -- 维度1的数据
                    SELECT
                        s.dimension_1_name as dimension_name,
                        s.score_1 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_1_name IS NOT NULL
                    AND s.score_1 IS NOT NULL

                    UNION ALL

                    -- 维度2的数据
                    SELECT
                        s.dimension_2_name as dimension_name,
                        s.score_2 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_2_name IS NOT NULL
                    AND s.score_2 IS NOT NULL

                    UNION ALL

                    -- 维度3的数据
                    SELECT
                        s.dimension_3_name as dimension_name,
                        s.score_3 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_3_name IS NOT NULL
                    AND s.score_3 IS NOT NULL

                    UNION ALL

                    -- 维度4的数据
                    SELECT
                        s.dimension_4_name as dimension_name,
                        s.score_4 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_4_name IS NOT NULL
                    AND s.score_4 IS NOT NULL

                    UNION ALL

                    -- 维度5的数据
                    SELECT
                        s.dimension_5_name as dimension_name,
                        s.score_5 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_5_name IS NOT NULL
                    AND s.score_5 IS NOT NULL
                )
                SELECT
                    dimension_name,
                    AVG(score) as avg_score,
                    COUNT(*) as sample_count
                FROM dimension_scores
                GROUP BY dimension_name
                ORDER BY avg_score ASC
            
2025-08-18 23:47:06 - app.services.word_analysis_service - INFO - 问题样本 1: 价格是多少？...
2025-08-18 23:47:06 - app.services.word_analysis_service - INFO - 问题样本 1: 价格是多少？...
2025-08-18 23:47:06 - sqlalchemy.engine.Engine - INFO - [cached since 191.4s ago] {'classification': '其他'}
2025-08-18 23:47:06 - app.services.word_analysis_service - INFO - 问题样本 2: 定制开发相关的政策？...
2025-08-18 23:47:06 - app.services.word_analysis_service - INFO - 问题样本 2: 定制开发相关的政策？...
2025-08-18 23:47:06 - app.services.word_analysis_service - INFO - 问题样本 3: 用户设置在哪里可以找到？...
2025-08-18 23:47:06 - app.services.word_analysis_service - INFO - 问题样本 3: 用户设置在哪里可以找到？...
2025-08-18 23:47:06 - app.services.word_analysis_service - INFO - 有效问题文本数: 53, 总文本长度: 596
2025-08-18 23:47:06 - app.services.word_analysis_service - INFO - 有效问题文本数: 53, 总文本长度: 596
2025-08-18 23:47:06 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s AND questions.badcase_review_status = %(badcase_review_status_1)s) AS anon_1
2025-08-18 23:47:06 - app.services.word_analysis_service - INFO - 文本分析完成，原始词汇: 361, 过滤后: 129, 唯一词汇: 46
2025-08-18 23:47:06 - app.services.word_analysis_service - INFO - 文本分析完成，原始词汇: 361, 过滤后: 129, 唯一词汇: 46
2025-08-18 23:47:06 - sqlalchemy.engine.Engine - INFO - [cached since 191.4s ago] {'created_at_1': datetime.datetime(2025, 8, 18, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 24, 23, 59, 59, 999999), 'processing_status_1': 'scored', 'badcase_review_status_1': 'reviewed'}
2025-08-18 23:47:06 - sqlalchemy.engine.Engine - INFO - 
                WITH dimension_scores AS (
                    -- 维度1的数据
                    SELECT
                        s.dimension_1_name as dimension_name,
                        s.score_1 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_1_name IS NOT NULL
                    AND s.score_1 IS NOT NULL

                    UNION ALL

                    -- 维度2的数据
                    SELECT
                        s.dimension_2_name as dimension_name,
                        s.score_2 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_2_name IS NOT NULL
                    AND s.score_2 IS NOT NULL

                    UNION ALL

                    -- 维度3的数据
                    SELECT
                        s.dimension_3_name as dimension_name,
                        s.score_3 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_3_name IS NOT NULL
                    AND s.score_3 IS NOT NULL

                    UNION ALL

                    -- 维度4的数据
                    SELECT
                        s.dimension_4_name as dimension_name,
                        s.score_4 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_4_name IS NOT NULL
                    AND s.score_4 IS NOT NULL

                    UNION ALL

                    -- 维度5的数据
                    SELECT
                        s.dimension_5_name as dimension_name,
                        s.score_5 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_5_name IS NOT NULL
                    AND s.score_5 IS NOT NULL
                )
                SELECT
                    dimension_name,
                    AVG(score) as avg_score,
                    COUNT(*) as sample_count
                FROM dimension_scores
                GROUP BY dimension_name
                ORDER BY avg_score ASC
            
2025-08-18 23:47:06 - app.services.word_analysis_service - INFO - 热词分析完成，共分析 53 个问题，生成 40 个热词
2025-08-18 23:47:06 - app.services.word_analysis_service - INFO - 热词分析完成，共分析 53 个问题，生成 40 个热词
2025-08-18 23:47:06 - sqlalchemy.engine.Engine - INFO - [cached since 191.4s ago] {'classification': '经济问题'}
2025-08-18 23:47:06 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-18 23:47:06 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s AND questions.badcase_review_status = %(badcase_review_status_1)s AND questions.is_badcase = false) AS anon_1
2025-08-18 23:47:06 - sqlalchemy.engine.Engine - INFO - [cached since 191.4s ago] {'created_at_1': datetime.datetime(2025, 8, 18, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 24, 23, 59, 59, 999999), 'processing_status_1': 'scored', 'badcase_review_status_1': 'reviewed'}
2025-08-18 23:47:06 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-18 23:47:06 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-18 23:47:07 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-18 23:47:07 - sqlalchemy.engine.Engine - INFO - SELECT questions.classification AS name, count(questions.id) AS count 
FROM questions 
WHERE questions.classification IS NOT NULL AND questions.classification != %(classification_1)s GROUP BY questions.classification
2025-08-18 23:47:07 - sqlalchemy.engine.Engine - INFO - [cached since 131.2s ago] {'classification_1': ''}
2025-08-18 23:47:07 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:47:07 - sqlalchemy.engine.Engine - INFO - [generated in 0.00019s] {'classification_1': '科学问题', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-18 23:47:07 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:47:07 - sqlalchemy.engine.Engine - INFO - [cached since 0.001969s ago] {'classification_1': '科学问题', 'assistant_type_1': 'doubao', 'param_1': 1}
2025-08-18 23:47:07 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:47:07 - sqlalchemy.engine.Engine - INFO - [cached since 0.003394s ago] {'classification_1': '科学问题', 'assistant_type_1': 'xiaotian', 'param_1': 1}
2025-08-18 23:47:07 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:47:07 - sqlalchemy.engine.Engine - INFO - [cached since 0.004934s ago] {'classification_1': '数据分析', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-18 23:47:07 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:47:07 - sqlalchemy.engine.Engine - INFO - [cached since 0.006339s ago] {'classification_1': '数据分析', 'assistant_type_1': 'doubao', 'param_1': 1}
2025-08-18 23:47:07 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:47:07 - sqlalchemy.engine.Engine - INFO - [cached since 0.007639s ago] {'classification_1': '数据分析', 'assistant_type_1': 'xiaotian', 'param_1': 1}
2025-08-18 23:47:07 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:47:07 - sqlalchemy.engine.Engine - INFO - [cached since 0.009064s ago] {'classification_1': '用户体验', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-18 23:47:07 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:47:07 - sqlalchemy.engine.Engine - INFO - [cached since 0.01053s ago] {'classification_1': '用户体验', 'assistant_type_1': 'doubao', 'param_1': 1}
2025-08-18 23:47:07 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:47:07 - sqlalchemy.engine.Engine - INFO - [cached since 0.01185s ago] {'classification_1': '用户体验', 'assistant_type_1': 'xiaotian', 'param_1': 1}
2025-08-18 23:47:07 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:47:07 - sqlalchemy.engine.Engine - INFO - [cached since 0.01318s ago] {'classification_1': '性能优化', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-18 23:47:07 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:47:07 - sqlalchemy.engine.Engine - INFO - [cached since 0.01448s ago] {'classification_1': '性能优化', 'assistant_type_1': 'doubao', 'param_1': 1}
2025-08-18 23:47:07 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:47:07 - sqlalchemy.engine.Engine - INFO - [cached since 0.01573s ago] {'classification_1': '性能优化', 'assistant_type_1': 'xiaotian', 'param_1': 1}
2025-08-18 23:47:07 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:47:07 - sqlalchemy.engine.Engine - INFO - [cached since 0.017s ago] {'classification_1': '业务咨询', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-18 23:47:07 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:47:07 - sqlalchemy.engine.Engine - INFO - [cached since 0.0182s ago] {'classification_1': '业务咨询', 'assistant_type_1': 'doubao', 'param_1': 1}
2025-08-18 23:47:07 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:47:07 - sqlalchemy.engine.Engine - INFO - [cached since 0.0194s ago] {'classification_1': '业务咨询', 'assistant_type_1': 'xiaotian', 'param_1': 1}
2025-08-18 23:47:07 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:47:07 - sqlalchemy.engine.Engine - INFO - [cached since 0.0206s ago] {'classification_1': '经济问题', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-18 23:47:07 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:47:07 - sqlalchemy.engine.Engine - INFO - [cached since 0.02215s ago] {'classification_1': '经济问题', 'assistant_type_1': 'doubao', 'param_1': 1}
2025-08-18 23:47:07 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:47:07 - sqlalchemy.engine.Engine - INFO - [cached since 0.02354s ago] {'classification_1': '经济问题', 'assistant_type_1': 'xiaotian', 'param_1': 1}
2025-08-18 23:47:07 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:47:07 - sqlalchemy.engine.Engine - INFO - [cached since 0.02485s ago] {'classification_1': '账户管理', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-18 23:47:07 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:47:07 - sqlalchemy.engine.Engine - INFO - [cached since 0.02624s ago] {'classification_1': '账户管理', 'assistant_type_1': 'doubao', 'param_1': 1}
2025-08-18 23:47:07 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:47:07 - sqlalchemy.engine.Engine - INFO - [cached since 0.02739s ago] {'classification_1': '账户管理', 'assistant_type_1': 'xiaotian', 'param_1': 1}
2025-08-18 23:47:07 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:47:07 - sqlalchemy.engine.Engine - INFO - [cached since 0.02888s ago] {'classification_1': '功能建议', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-18 23:47:07 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:47:07 - sqlalchemy.engine.Engine - INFO - [cached since 0.03017s ago] {'classification_1': '功能建议', 'assistant_type_1': 'doubao', 'param_1': 1}
2025-08-18 23:47:07 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:47:07 - sqlalchemy.engine.Engine - INFO - [cached since 0.03147s ago] {'classification_1': '功能建议', 'assistant_type_1': 'xiaotian', 'param_1': 1}
2025-08-18 23:47:07 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:47:07 - sqlalchemy.engine.Engine - INFO - [cached since 0.03272s ago] {'classification_1': '教育问题', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-18 23:47:07 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:47:07 - sqlalchemy.engine.Engine - INFO - [cached since 0.03391s ago] {'classification_1': '教育问题', 'assistant_type_1': 'doubao', 'param_1': 1}
2025-08-18 23:47:07 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:47:07 - sqlalchemy.engine.Engine - INFO - [cached since 0.03504s ago] {'classification_1': '教育问题', 'assistant_type_1': 'xiaotian', 'param_1': 1}
2025-08-18 23:47:07 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:47:07 - sqlalchemy.engine.Engine - INFO - [cached since 0.03627s ago] {'classification_1': '技术问题', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-18 23:47:07 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:47:07 - sqlalchemy.engine.Engine - INFO - [cached since 0.03756s ago] {'classification_1': '技术问题', 'assistant_type_1': 'doubao', 'param_1': 1}
2025-08-18 23:47:07 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:47:07 - sqlalchemy.engine.Engine - INFO - [cached since 0.04619s ago] {'classification_1': '技术问题', 'assistant_type_1': 'xiaotian', 'param_1': 1}
2025-08-18 23:47:07 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:47:07 - sqlalchemy.engine.Engine - INFO - [cached since 0.04739s ago] {'classification_1': '其他', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-18 23:47:07 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:47:07 - sqlalchemy.engine.Engine - INFO - [cached since 0.0486s ago] {'classification_1': '其他', 'assistant_type_1': 'doubao', 'param_1': 1}
2025-08-18 23:47:07 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:47:07 - sqlalchemy.engine.Engine - INFO - [cached since 0.0501s ago] {'classification_1': '其他', 'assistant_type_1': 'xiaotian', 'param_1': 1}
2025-08-18 23:47:07 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:47:07 - sqlalchemy.engine.Engine - INFO - [cached since 0.05153s ago] {'classification_1': '安全设置', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-18 23:47:07 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:47:07 - sqlalchemy.engine.Engine - INFO - [cached since 0.05281s ago] {'classification_1': '安全设置', 'assistant_type_1': 'doubao', 'param_1': 1}
2025-08-18 23:47:07 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:47:07 - sqlalchemy.engine.Engine - INFO - [cached since 0.05402s ago] {'classification_1': '安全设置', 'assistant_type_1': 'xiaotian', 'param_1': 1}
2025-08-18 23:47:07 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:47:07 - sqlalchemy.engine.Engine - INFO - [cached since 0.05526s ago] {'classification_1': '故障排查', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-18 23:47:07 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:47:07 - sqlalchemy.engine.Engine - INFO - [cached since 0.05651s ago] {'classification_1': '故障排查', 'assistant_type_1': 'doubao', 'param_1': 1}
2025-08-18 23:47:07 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:47:07 - sqlalchemy.engine.Engine - INFO - [cached since 0.05785s ago] {'classification_1': '故障排查', 'assistant_type_1': 'xiaotian', 'param_1': 1}
2025-08-18 23:47:07 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:47:07 - sqlalchemy.engine.Engine - INFO - [cached since 0.05996s ago] {'classification_1': '工程问题', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-18 23:47:07 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:47:07 - sqlalchemy.engine.Engine - INFO - [cached since 0.06124s ago] {'classification_1': '工程问题', 'assistant_type_1': 'doubao', 'param_1': 1}
2025-08-18 23:47:07 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:47:07 - sqlalchemy.engine.Engine - INFO - [cached since 0.06254s ago] {'classification_1': '工程问题', 'assistant_type_1': 'xiaotian', 'param_1': 1}
2025-08-18 23:47:07 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:47:07 - sqlalchemy.engine.Engine - INFO - [cached since 0.06372s ago] {'classification_1': '产品使用', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-18 23:47:07 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:47:07 - sqlalchemy.engine.Engine - INFO - [cached since 0.06499s ago] {'classification_1': '产品使用', 'assistant_type_1': 'doubao', 'param_1': 1}
2025-08-18 23:47:07 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:47:07 - sqlalchemy.engine.Engine - INFO - [cached since 0.06639s ago] {'classification_1': '产品使用', 'assistant_type_1': 'xiaotian', 'param_1': 1}
2025-08-18 23:47:07 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-18 23:47:10 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-18 23:47:10 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-18 23:47:10 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-18 23:47:10 - sqlalchemy.engine.Engine - INFO - SELECT questions.classification AS name, count(questions.id) AS count 
FROM questions 
WHERE questions.classification IS NOT NULL AND questions.classification != %(classification_1)s GROUP BY questions.classification ORDER BY count(questions.id) DESC
2025-08-18 23:47:10 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s) AS anon_1
2025-08-18 23:47:10 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s AND questions.is_badcase = true) AS anon_1
2025-08-18 23:47:10 - sqlalchemy.engine.Engine - INFO - [generated in 0.00091s] {'classification_1': ''}
2025-08-18 23:47:10 - sqlalchemy.engine.Engine - INFO - [cached since 194.7s ago] {'created_at_1': datetime.datetime(2025, 8, 18, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 24, 23, 59, 59, 999999), 'processing_status_1': 'scored'}
2025-08-18 23:47:10 - sqlalchemy.engine.Engine - INFO - [cached since 194.7s ago] {'created_at_1': datetime.datetime(2020, 1, 1, 0, 0), 'created_at_2': datetime.datetime(2099, 12, 31, 23, 59, 59, 999999), 'processing_status_1': 'scored'}
2025-08-18 23:47:10 - sqlalchemy.engine.Engine - INFO - SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s AND questions.is_badcase = true ORDER BY questions.badcase_detected_at DESC 
 LIMIT %(param_1)s OFFSET %(param_2)s
2025-08-18 23:47:10 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s AND questions.is_badcase = true) AS anon_1
2025-08-18 23:47:10 - sqlalchemy.engine.Engine - INFO - [generated in 0.00083s] {'created_at_1': datetime.datetime(2020, 1, 1, 0, 0), 'created_at_2': datetime.datetime(2099, 12, 31, 23, 59, 59, 999999), 'processing_status_1': 'scored', 'param_1': 20, 'param_2': 0}
2025-08-18 23:47:10 - sqlalchemy.engine.Engine - INFO - [cached since 194.7s ago] {'created_at_1': datetime.datetime(2025, 8, 18, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 24, 23, 59, 59, 999999), 'processing_status_1': 'scored'}
2025-08-18 23:47:10 - sqlalchemy.engine.Engine - INFO - SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.question_business_id = %(question_business_id_1)s AND answers.assistant_type = %(assistant_type_1)s 
 LIMIT %(param_1)s
2025-08-18 23:47:10 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s AND questions.is_badcase = true AND questions.badcase_review_status = %(badcase_review_status_1)s) AS anon_1
2025-08-18 23:47:10 - sqlalchemy.engine.Engine - INFO - [cached since 28.92s ago] {'question_business_id_1': '87e0c4ff9b2b7e53c3da92590d49f348', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-18 23:47:10 - sqlalchemy.engine.Engine - INFO - [cached since 194.7s ago] {'created_at_1': datetime.datetime(2025, 8, 18, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 24, 23, 59, 59, 999999), 'processing_status_1': 'scored', 'badcase_review_status_1': 'pending'}
2025-08-18 23:47:10 - sqlalchemy.engine.Engine - INFO - SELECT scores.id AS scores_id, scores.answer_id AS scores_answer_id, scores.score_1 AS scores_score_1, scores.score_2 AS scores_score_2, scores.score_3 AS scores_score_3, scores.score_4 AS scores_score_4, scores.score_5 AS scores_score_5, scores.dimension_1_name AS scores_dimension_1_name, scores.dimension_2_name AS scores_dimension_2_name, scores.dimension_3_name AS scores_dimension_3_name, scores.dimension_4_name AS scores_dimension_4_name, scores.dimension_5_name AS scores_dimension_5_name, scores.average_score AS scores_average_score, scores.comment AS scores_comment, scores.rated_at AS scores_rated_at 
FROM scores 
WHERE scores.answer_id = %(answer_id_1)s 
 LIMIT %(param_1)s
2025-08-18 23:47:10 - sqlalchemy.engine.Engine - INFO - [generated in 0.00018s] {'answer_id_1': 4130, 'param_1': 1}
2025-08-18 23:47:10 - sqlalchemy.engine.Engine - INFO - SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.question_business_id = %(question_business_id_1)s AND answers.assistant_type = %(assistant_type_1)s 
 LIMIT %(param_1)s
2025-08-18 23:47:10 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s AND questions.badcase_review_status = %(badcase_review_status_1)s) AS anon_1
2025-08-18 23:47:10 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-18 23:47:10 - sqlalchemy.engine.Engine - INFO - [cached since 28.92s ago] {'question_business_id_1': 'e8146d52bbe9ceab98d2dab6e30db2ed', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-18 23:47:10 - sqlalchemy.engine.Engine - INFO - [cached since 194.7s ago] {'created_at_1': datetime.datetime(2025, 8, 18, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 24, 23, 59, 59, 999999), 'processing_status_1': 'scored', 'badcase_review_status_1': 'reviewed'}
2025-08-18 23:47:10 - sqlalchemy.engine.Engine - INFO - SELECT scores.id AS scores_id, scores.answer_id AS scores_answer_id, scores.score_1 AS scores_score_1, scores.score_2 AS scores_score_2, scores.score_3 AS scores_score_3, scores.score_4 AS scores_score_4, scores.score_5 AS scores_score_5, scores.dimension_1_name AS scores_dimension_1_name, scores.dimension_2_name AS scores_dimension_2_name, scores.dimension_3_name AS scores_dimension_3_name, scores.dimension_4_name AS scores_dimension_4_name, scores.dimension_5_name AS scores_dimension_5_name, scores.average_score AS scores_average_score, scores.comment AS scores_comment, scores.rated_at AS scores_rated_at 
FROM scores 
WHERE scores.answer_id = %(answer_id_1)s 
 LIMIT %(param_1)s
2025-08-18 23:47:10 - sqlalchemy.engine.Engine - INFO - [cached since 0.004076s ago] {'answer_id_1': 4137, 'param_1': 1}
2025-08-18 23:47:10 - sqlalchemy.engine.Engine - INFO - SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.question_business_id = %(question_business_id_1)s AND answers.assistant_type = %(assistant_type_1)s 
 LIMIT %(param_1)s
2025-08-18 23:47:10 - sqlalchemy.engine.Engine - INFO - [cached since 28.93s ago] {'question_business_id_1': '8cf63d22e34f4e0ec9b9620c934bf0c3', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-18 23:47:10 - sqlalchemy.engine.Engine - INFO - SELECT scores.id AS scores_id, scores.answer_id AS scores_answer_id, scores.score_1 AS scores_score_1, scores.score_2 AS scores_score_2, scores.score_3 AS scores_score_3, scores.score_4 AS scores_score_4, scores.score_5 AS scores_score_5, scores.dimension_1_name AS scores_dimension_1_name, scores.dimension_2_name AS scores_dimension_2_name, scores.dimension_3_name AS scores_dimension_3_name, scores.dimension_4_name AS scores_dimension_4_name, scores.dimension_5_name AS scores_dimension_5_name, scores.average_score AS scores_average_score, scores.comment AS scores_comment, scores.rated_at AS scores_rated_at 
FROM scores 
WHERE scores.answer_id = %(answer_id_1)s 
 LIMIT %(param_1)s
2025-08-18 23:47:10 - sqlalchemy.engine.Engine - INFO - [cached since 0.006273s ago] {'answer_id_1': 4138, 'param_1': 1}
2025-08-18 23:47:10 - sqlalchemy.engine.Engine - INFO - SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.question_business_id = %(question_business_id_1)s AND answers.assistant_type = %(assistant_type_1)s 
 LIMIT %(param_1)s
2025-08-18 23:47:10 - sqlalchemy.engine.Engine - INFO - [cached since 28.93s ago] {'question_business_id_1': '83af0a8ba059bc2c346d8a6c3a6a0a19', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-18 23:47:10 - sqlalchemy.engine.Engine - INFO - SELECT scores.id AS scores_id, scores.answer_id AS scores_answer_id, scores.score_1 AS scores_score_1, scores.score_2 AS scores_score_2, scores.score_3 AS scores_score_3, scores.score_4 AS scores_score_4, scores.score_5 AS scores_score_5, scores.dimension_1_name AS scores_dimension_1_name, scores.dimension_2_name AS scores_dimension_2_name, scores.dimension_3_name AS scores_dimension_3_name, scores.dimension_4_name AS scores_dimension_4_name, scores.dimension_5_name AS scores_dimension_5_name, scores.average_score AS scores_average_score, scores.comment AS scores_comment, scores.rated_at AS scores_rated_at 
FROM scores 
WHERE scores.answer_id = %(answer_id_1)s 
 LIMIT %(param_1)s
2025-08-18 23:47:10 - sqlalchemy.engine.Engine - INFO - [cached since 0.008696s ago] {'answer_id_1': 4139, 'param_1': 1}
2025-08-18 23:47:10 - sqlalchemy.engine.Engine - INFO - SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.question_business_id = %(question_business_id_1)s AND answers.assistant_type = %(assistant_type_1)s 
 LIMIT %(param_1)s
2025-08-18 23:47:10 - sqlalchemy.engine.Engine - INFO - [cached since 28.93s ago] {'question_business_id_1': '8e818135ba252084f447a1942a9b767a', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-18 23:47:10 - sqlalchemy.engine.Engine - INFO - SELECT scores.id AS scores_id, scores.answer_id AS scores_answer_id, scores.score_1 AS scores_score_1, scores.score_2 AS scores_score_2, scores.score_3 AS scores_score_3, scores.score_4 AS scores_score_4, scores.score_5 AS scores_score_5, scores.dimension_1_name AS scores_dimension_1_name, scores.dimension_2_name AS scores_dimension_2_name, scores.dimension_3_name AS scores_dimension_3_name, scores.dimension_4_name AS scores_dimension_4_name, scores.dimension_5_name AS scores_dimension_5_name, scores.average_score AS scores_average_score, scores.comment AS scores_comment, scores.rated_at AS scores_rated_at 
FROM scores 
WHERE scores.answer_id = %(answer_id_1)s 
 LIMIT %(param_1)s
2025-08-18 23:47:10 - sqlalchemy.engine.Engine - INFO - [cached since 0.01087s ago] {'answer_id_1': 4140, 'param_1': 1}
2025-08-18 23:47:10 - sqlalchemy.engine.Engine - INFO - SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.question_business_id = %(question_business_id_1)s AND answers.assistant_type = %(assistant_type_1)s 
 LIMIT %(param_1)s
2025-08-18 23:47:10 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s AND questions.badcase_review_status = %(badcase_review_status_1)s AND questions.is_badcase = false) AS anon_1
2025-08-18 23:47:10 - sqlalchemy.engine.Engine - INFO - [cached since 28.93s ago] {'question_business_id_1': 'c54e7b687d7c7a3fced8ae1f52abe999', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-18 23:47:10 - sqlalchemy.engine.Engine - INFO - [cached since 194.7s ago] {'created_at_1': datetime.datetime(2025, 8, 18, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 24, 23, 59, 59, 999999), 'processing_status_1': 'scored', 'badcase_review_status_1': 'reviewed'}
2025-08-18 23:47:10 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-18 23:47:10 - sqlalchemy.engine.Engine - INFO - SELECT scores.id AS scores_id, scores.answer_id AS scores_answer_id, scores.score_1 AS scores_score_1, scores.score_2 AS scores_score_2, scores.score_3 AS scores_score_3, scores.score_4 AS scores_score_4, scores.score_5 AS scores_score_5, scores.dimension_1_name AS scores_dimension_1_name, scores.dimension_2_name AS scores_dimension_2_name, scores.dimension_3_name AS scores_dimension_3_name, scores.dimension_4_name AS scores_dimension_4_name, scores.dimension_5_name AS scores_dimension_5_name, scores.average_score AS scores_average_score, scores.comment AS scores_comment, scores.rated_at AS scores_rated_at 
FROM scores 
WHERE scores.answer_id = %(answer_id_1)s 
 LIMIT %(param_1)s
2025-08-18 23:47:10 - sqlalchemy.engine.Engine - INFO - [cached since 0.01905s ago] {'answer_id_1': 4141, 'param_1': 1}
2025-08-18 23:47:10 - sqlalchemy.engine.Engine - INFO - SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.question_business_id = %(question_business_id_1)s AND answers.assistant_type = %(assistant_type_1)s 
 LIMIT %(param_1)s
2025-08-18 23:47:10 - sqlalchemy.engine.Engine - INFO - [cached since 28.94s ago] {'question_business_id_1': 'eab488b34a407e97c5f072469a39271c', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-18 23:47:10 - sqlalchemy.engine.Engine - INFO - SELECT scores.id AS scores_id, scores.answer_id AS scores_answer_id, scores.score_1 AS scores_score_1, scores.score_2 AS scores_score_2, scores.score_3 AS scores_score_3, scores.score_4 AS scores_score_4, scores.score_5 AS scores_score_5, scores.dimension_1_name AS scores_dimension_1_name, scores.dimension_2_name AS scores_dimension_2_name, scores.dimension_3_name AS scores_dimension_3_name, scores.dimension_4_name AS scores_dimension_4_name, scores.dimension_5_name AS scores_dimension_5_name, scores.average_score AS scores_average_score, scores.comment AS scores_comment, scores.rated_at AS scores_rated_at 
FROM scores 
WHERE scores.answer_id = %(answer_id_1)s 
 LIMIT %(param_1)s
2025-08-18 23:47:10 - sqlalchemy.engine.Engine - INFO - [cached since 0.02378s ago] {'answer_id_1': 4142, 'param_1': 1}
2025-08-18 23:47:10 - sqlalchemy.engine.Engine - INFO - SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.question_business_id = %(question_business_id_1)s AND answers.assistant_type = %(assistant_type_1)s 
 LIMIT %(param_1)s
2025-08-18 23:47:10 - sqlalchemy.engine.Engine - INFO - [cached since 28.94s ago] {'question_business_id_1': '93182fbb00a15577f97dd4690e47409b', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-18 23:47:10 - sqlalchemy.engine.Engine - INFO - SELECT scores.id AS scores_id, scores.answer_id AS scores_answer_id, scores.score_1 AS scores_score_1, scores.score_2 AS scores_score_2, scores.score_3 AS scores_score_3, scores.score_4 AS scores_score_4, scores.score_5 AS scores_score_5, scores.dimension_1_name AS scores_dimension_1_name, scores.dimension_2_name AS scores_dimension_2_name, scores.dimension_3_name AS scores_dimension_3_name, scores.dimension_4_name AS scores_dimension_4_name, scores.dimension_5_name AS scores_dimension_5_name, scores.average_score AS scores_average_score, scores.comment AS scores_comment, scores.rated_at AS scores_rated_at 
FROM scores 
WHERE scores.answer_id = %(answer_id_1)s 
 LIMIT %(param_1)s
2025-08-18 23:47:10 - sqlalchemy.engine.Engine - INFO - [cached since 0.02593s ago] {'answer_id_1': 4144, 'param_1': 1}
2025-08-18 23:47:10 - sqlalchemy.engine.Engine - INFO - SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.question_business_id = %(question_business_id_1)s AND answers.assistant_type = %(assistant_type_1)s 
 LIMIT %(param_1)s
2025-08-18 23:47:10 - sqlalchemy.engine.Engine - INFO - [cached since 28.95s ago] {'question_business_id_1': 'd7af7cdc55e6095954e54853950dca00', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-18 23:47:10 - sqlalchemy.engine.Engine - INFO - SELECT scores.id AS scores_id, scores.answer_id AS scores_answer_id, scores.score_1 AS scores_score_1, scores.score_2 AS scores_score_2, scores.score_3 AS scores_score_3, scores.score_4 AS scores_score_4, scores.score_5 AS scores_score_5, scores.dimension_1_name AS scores_dimension_1_name, scores.dimension_2_name AS scores_dimension_2_name, scores.dimension_3_name AS scores_dimension_3_name, scores.dimension_4_name AS scores_dimension_4_name, scores.dimension_5_name AS scores_dimension_5_name, scores.average_score AS scores_average_score, scores.comment AS scores_comment, scores.rated_at AS scores_rated_at 
FROM scores 
WHERE scores.answer_id = %(answer_id_1)s 
 LIMIT %(param_1)s
2025-08-18 23:47:10 - sqlalchemy.engine.Engine - INFO - [cached since 0.02771s ago] {'answer_id_1': 4145, 'param_1': 1}
2025-08-18 23:47:10 - sqlalchemy.engine.Engine - INFO - SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.question_business_id = %(question_business_id_1)s AND answers.assistant_type = %(assistant_type_1)s 
 LIMIT %(param_1)s
2025-08-18 23:47:10 - sqlalchemy.engine.Engine - INFO - [cached since 28.95s ago] {'question_business_id_1': '37262c3322dd72a8858e217524a7779e', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-18 23:47:10 - sqlalchemy.engine.Engine - INFO - SELECT scores.id AS scores_id, scores.answer_id AS scores_answer_id, scores.score_1 AS scores_score_1, scores.score_2 AS scores_score_2, scores.score_3 AS scores_score_3, scores.score_4 AS scores_score_4, scores.score_5 AS scores_score_5, scores.dimension_1_name AS scores_dimension_1_name, scores.dimension_2_name AS scores_dimension_2_name, scores.dimension_3_name AS scores_dimension_3_name, scores.dimension_4_name AS scores_dimension_4_name, scores.dimension_5_name AS scores_dimension_5_name, scores.average_score AS scores_average_score, scores.comment AS scores_comment, scores.rated_at AS scores_rated_at 
FROM scores 
WHERE scores.answer_id = %(answer_id_1)s 
 LIMIT %(param_1)s
2025-08-18 23:47:10 - sqlalchemy.engine.Engine - INFO - [cached since 0.0294s ago] {'answer_id_1': 4146, 'param_1': 1}
2025-08-18 23:47:10 - sqlalchemy.engine.Engine - INFO - SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.question_business_id = %(question_business_id_1)s AND answers.assistant_type = %(assistant_type_1)s 
 LIMIT %(param_1)s
2025-08-18 23:47:10 - sqlalchemy.engine.Engine - INFO - [cached since 28.95s ago] {'question_business_id_1': '9415eca2590ecea62f7df749020fa547', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-18 23:47:10 - sqlalchemy.engine.Engine - INFO - SELECT scores.id AS scores_id, scores.answer_id AS scores_answer_id, scores.score_1 AS scores_score_1, scores.score_2 AS scores_score_2, scores.score_3 AS scores_score_3, scores.score_4 AS scores_score_4, scores.score_5 AS scores_score_5, scores.dimension_1_name AS scores_dimension_1_name, scores.dimension_2_name AS scores_dimension_2_name, scores.dimension_3_name AS scores_dimension_3_name, scores.dimension_4_name AS scores_dimension_4_name, scores.dimension_5_name AS scores_dimension_5_name, scores.average_score AS scores_average_score, scores.comment AS scores_comment, scores.rated_at AS scores_rated_at 
FROM scores 
WHERE scores.answer_id = %(answer_id_1)s 
 LIMIT %(param_1)s
2025-08-18 23:47:10 - sqlalchemy.engine.Engine - INFO - [cached since 0.03122s ago] {'answer_id_1': 4147, 'param_1': 1}
2025-08-18 23:47:10 - sqlalchemy.engine.Engine - INFO - SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.question_business_id = %(question_business_id_1)s AND answers.assistant_type = %(assistant_type_1)s 
 LIMIT %(param_1)s
2025-08-18 23:47:10 - sqlalchemy.engine.Engine - INFO - [cached since 28.95s ago] {'question_business_id_1': '25ac57f77fad223774447e352c41e3fa', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-18 23:47:10 - sqlalchemy.engine.Engine - INFO - SELECT scores.id AS scores_id, scores.answer_id AS scores_answer_id, scores.score_1 AS scores_score_1, scores.score_2 AS scores_score_2, scores.score_3 AS scores_score_3, scores.score_4 AS scores_score_4, scores.score_5 AS scores_score_5, scores.dimension_1_name AS scores_dimension_1_name, scores.dimension_2_name AS scores_dimension_2_name, scores.dimension_3_name AS scores_dimension_3_name, scores.dimension_4_name AS scores_dimension_4_name, scores.dimension_5_name AS scores_dimension_5_name, scores.average_score AS scores_average_score, scores.comment AS scores_comment, scores.rated_at AS scores_rated_at 
FROM scores 
WHERE scores.answer_id = %(answer_id_1)s 
 LIMIT %(param_1)s
2025-08-18 23:47:10 - sqlalchemy.engine.Engine - INFO - [cached since 0.0331s ago] {'answer_id_1': 4148, 'param_1': 1}
2025-08-18 23:47:10 - sqlalchemy.engine.Engine - INFO - SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.question_business_id = %(question_business_id_1)s AND answers.assistant_type = %(assistant_type_1)s 
 LIMIT %(param_1)s
2025-08-18 23:47:10 - sqlalchemy.engine.Engine - INFO - [cached since 28.95s ago] {'question_business_id_1': 'd1c2ae818e77f62512f0aa58f6f2a176', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-18 23:47:10 - sqlalchemy.engine.Engine - INFO - SELECT scores.id AS scores_id, scores.answer_id AS scores_answer_id, scores.score_1 AS scores_score_1, scores.score_2 AS scores_score_2, scores.score_3 AS scores_score_3, scores.score_4 AS scores_score_4, scores.score_5 AS scores_score_5, scores.dimension_1_name AS scores_dimension_1_name, scores.dimension_2_name AS scores_dimension_2_name, scores.dimension_3_name AS scores_dimension_3_name, scores.dimension_4_name AS scores_dimension_4_name, scores.dimension_5_name AS scores_dimension_5_name, scores.average_score AS scores_average_score, scores.comment AS scores_comment, scores.rated_at AS scores_rated_at 
FROM scores 
WHERE scores.answer_id = %(answer_id_1)s 
 LIMIT %(param_1)s
2025-08-18 23:47:10 - sqlalchemy.engine.Engine - INFO - [cached since 0.03517s ago] {'answer_id_1': 4149, 'param_1': 1}
2025-08-18 23:47:10 - sqlalchemy.engine.Engine - INFO - SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.question_business_id = %(question_business_id_1)s AND answers.assistant_type = %(assistant_type_1)s 
 LIMIT %(param_1)s
2025-08-18 23:47:10 - sqlalchemy.engine.Engine - INFO - [cached since 28.96s ago] {'question_business_id_1': 'd6aac89b32b8165fd705a2512115d6b6', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-18 23:47:10 - sqlalchemy.engine.Engine - INFO - SELECT scores.id AS scores_id, scores.answer_id AS scores_answer_id, scores.score_1 AS scores_score_1, scores.score_2 AS scores_score_2, scores.score_3 AS scores_score_3, scores.score_4 AS scores_score_4, scores.score_5 AS scores_score_5, scores.dimension_1_name AS scores_dimension_1_name, scores.dimension_2_name AS scores_dimension_2_name, scores.dimension_3_name AS scores_dimension_3_name, scores.dimension_4_name AS scores_dimension_4_name, scores.dimension_5_name AS scores_dimension_5_name, scores.average_score AS scores_average_score, scores.comment AS scores_comment, scores.rated_at AS scores_rated_at 
FROM scores 
WHERE scores.answer_id = %(answer_id_1)s 
 LIMIT %(param_1)s
2025-08-18 23:47:10 - sqlalchemy.engine.Engine - INFO - [cached since 0.03842s ago] {'answer_id_1': 4150, 'param_1': 1}
2025-08-18 23:47:10 - sqlalchemy.engine.Engine - INFO - SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.question_business_id = %(question_business_id_1)s AND answers.assistant_type = %(assistant_type_1)s 
 LIMIT %(param_1)s
2025-08-18 23:47:10 - sqlalchemy.engine.Engine - INFO - [cached since 28.96s ago] {'question_business_id_1': 'a3997eb480bb83e227cb127014d9c5de', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-18 23:47:10 - sqlalchemy.engine.Engine - INFO - SELECT scores.id AS scores_id, scores.answer_id AS scores_answer_id, scores.score_1 AS scores_score_1, scores.score_2 AS scores_score_2, scores.score_3 AS scores_score_3, scores.score_4 AS scores_score_4, scores.score_5 AS scores_score_5, scores.dimension_1_name AS scores_dimension_1_name, scores.dimension_2_name AS scores_dimension_2_name, scores.dimension_3_name AS scores_dimension_3_name, scores.dimension_4_name AS scores_dimension_4_name, scores.dimension_5_name AS scores_dimension_5_name, scores.average_score AS scores_average_score, scores.comment AS scores_comment, scores.rated_at AS scores_rated_at 
FROM scores 
WHERE scores.answer_id = %(answer_id_1)s 
 LIMIT %(param_1)s
2025-08-18 23:47:10 - sqlalchemy.engine.Engine - INFO - [cached since 0.04031s ago] {'answer_id_1': 4151, 'param_1': 1}
2025-08-18 23:47:10 - sqlalchemy.engine.Engine - INFO - SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.question_business_id = %(question_business_id_1)s AND answers.assistant_type = %(assistant_type_1)s 
 LIMIT %(param_1)s
2025-08-18 23:47:10 - sqlalchemy.engine.Engine - INFO - [cached since 28.96s ago] {'question_business_id_1': 'e8031d6dc5ad042a1faf7c87eb3c33e4', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-18 23:47:10 - sqlalchemy.engine.Engine - INFO - SELECT scores.id AS scores_id, scores.answer_id AS scores_answer_id, scores.score_1 AS scores_score_1, scores.score_2 AS scores_score_2, scores.score_3 AS scores_score_3, scores.score_4 AS scores_score_4, scores.score_5 AS scores_score_5, scores.dimension_1_name AS scores_dimension_1_name, scores.dimension_2_name AS scores_dimension_2_name, scores.dimension_3_name AS scores_dimension_3_name, scores.dimension_4_name AS scores_dimension_4_name, scores.dimension_5_name AS scores_dimension_5_name, scores.average_score AS scores_average_score, scores.comment AS scores_comment, scores.rated_at AS scores_rated_at 
FROM scores 
WHERE scores.answer_id = %(answer_id_1)s 
 LIMIT %(param_1)s
2025-08-18 23:47:10 - sqlalchemy.engine.Engine - INFO - [cached since 0.04207s ago] {'answer_id_1': 4153, 'param_1': 1}
2025-08-18 23:47:10 - sqlalchemy.engine.Engine - INFO - SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.question_business_id = %(question_business_id_1)s AND answers.assistant_type = %(assistant_type_1)s 
 LIMIT %(param_1)s
2025-08-18 23:47:10 - sqlalchemy.engine.Engine - INFO - [cached since 28.96s ago] {'question_business_id_1': '063a9bb2bdb76974c0e6cd0cf993aa8d', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-18 23:47:10 - sqlalchemy.engine.Engine - INFO - SELECT scores.id AS scores_id, scores.answer_id AS scores_answer_id, scores.score_1 AS scores_score_1, scores.score_2 AS scores_score_2, scores.score_3 AS scores_score_3, scores.score_4 AS scores_score_4, scores.score_5 AS scores_score_5, scores.dimension_1_name AS scores_dimension_1_name, scores.dimension_2_name AS scores_dimension_2_name, scores.dimension_3_name AS scores_dimension_3_name, scores.dimension_4_name AS scores_dimension_4_name, scores.dimension_5_name AS scores_dimension_5_name, scores.average_score AS scores_average_score, scores.comment AS scores_comment, scores.rated_at AS scores_rated_at 
FROM scores 
WHERE scores.answer_id = %(answer_id_1)s 
 LIMIT %(param_1)s
2025-08-18 23:47:10 - sqlalchemy.engine.Engine - INFO - [cached since 0.04427s ago] {'answer_id_1': 4154, 'param_1': 1}
2025-08-18 23:47:10 - sqlalchemy.engine.Engine - INFO - SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.question_business_id = %(question_business_id_1)s AND answers.assistant_type = %(assistant_type_1)s 
 LIMIT %(param_1)s
2025-08-18 23:47:10 - sqlalchemy.engine.Engine - INFO - [cached since 28.97s ago] {'question_business_id_1': '7b6de1e7defb384d55ad5445a35e2b3f', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-18 23:47:10 - sqlalchemy.engine.Engine - INFO - SELECT scores.id AS scores_id, scores.answer_id AS scores_answer_id, scores.score_1 AS scores_score_1, scores.score_2 AS scores_score_2, scores.score_3 AS scores_score_3, scores.score_4 AS scores_score_4, scores.score_5 AS scores_score_5, scores.dimension_1_name AS scores_dimension_1_name, scores.dimension_2_name AS scores_dimension_2_name, scores.dimension_3_name AS scores_dimension_3_name, scores.dimension_4_name AS scores_dimension_4_name, scores.dimension_5_name AS scores_dimension_5_name, scores.average_score AS scores_average_score, scores.comment AS scores_comment, scores.rated_at AS scores_rated_at 
FROM scores 
WHERE scores.answer_id = %(answer_id_1)s 
 LIMIT %(param_1)s
2025-08-18 23:47:10 - sqlalchemy.engine.Engine - INFO - [cached since 0.04607s ago] {'answer_id_1': 4155, 'param_1': 1}
2025-08-18 23:47:10 - sqlalchemy.engine.Engine - INFO - SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.question_business_id = %(question_business_id_1)s AND answers.assistant_type = %(assistant_type_1)s 
 LIMIT %(param_1)s
2025-08-18 23:47:10 - sqlalchemy.engine.Engine - INFO - [cached since 28.97s ago] {'question_business_id_1': '6fc6a2b6471e48421dd6fd3aa64beb89', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-18 23:47:10 - sqlalchemy.engine.Engine - INFO - SELECT scores.id AS scores_id, scores.answer_id AS scores_answer_id, scores.score_1 AS scores_score_1, scores.score_2 AS scores_score_2, scores.score_3 AS scores_score_3, scores.score_4 AS scores_score_4, scores.score_5 AS scores_score_5, scores.dimension_1_name AS scores_dimension_1_name, scores.dimension_2_name AS scores_dimension_2_name, scores.dimension_3_name AS scores_dimension_3_name, scores.dimension_4_name AS scores_dimension_4_name, scores.dimension_5_name AS scores_dimension_5_name, scores.average_score AS scores_average_score, scores.comment AS scores_comment, scores.rated_at AS scores_rated_at 
FROM scores 
WHERE scores.answer_id = %(answer_id_1)s 
 LIMIT %(param_1)s
2025-08-18 23:47:10 - sqlalchemy.engine.Engine - INFO - [cached since 0.04764s ago] {'answer_id_1': 4156, 'param_1': 1}
2025-08-18 23:47:10 - sqlalchemy.engine.Engine - INFO - SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.question_business_id = %(question_business_id_1)s AND answers.assistant_type = %(assistant_type_1)s 
 LIMIT %(param_1)s
2025-08-18 23:47:10 - sqlalchemy.engine.Engine - INFO - [cached since 28.97s ago] {'question_business_id_1': 'bd1c654a9212288a7e1569b677c83805', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-18 23:47:10 - sqlalchemy.engine.Engine - INFO - SELECT scores.id AS scores_id, scores.answer_id AS scores_answer_id, scores.score_1 AS scores_score_1, scores.score_2 AS scores_score_2, scores.score_3 AS scores_score_3, scores.score_4 AS scores_score_4, scores.score_5 AS scores_score_5, scores.dimension_1_name AS scores_dimension_1_name, scores.dimension_2_name AS scores_dimension_2_name, scores.dimension_3_name AS scores_dimension_3_name, scores.dimension_4_name AS scores_dimension_4_name, scores.dimension_5_name AS scores_dimension_5_name, scores.average_score AS scores_average_score, scores.comment AS scores_comment, scores.rated_at AS scores_rated_at 
FROM scores 
WHERE scores.answer_id = %(answer_id_1)s 
 LIMIT %(param_1)s
2025-08-18 23:47:10 - sqlalchemy.engine.Engine - INFO - [cached since 0.04931s ago] {'answer_id_1': 4157, 'param_1': 1}
2025-08-18 23:47:10 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-18 23:47:12 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-18 23:47:12 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions) AS anon_1
2025-08-18 23:47:12 - sqlalchemy.engine.Engine - INFO - [cached since 177.9s ago] {}
2025-08-18 23:47:12 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers) AS anon_1
2025-08-18 23:47:12 - sqlalchemy.engine.Engine - INFO - [cached since 177.9s ago] {}
2025-08-18 23:47:12 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.question_business_id AS answers_question_business_id 
FROM answers JOIN questions ON answers.question_business_id = questions.business_id 
WHERE answers.is_scored = true AND answers.assistant_type IN (%(assistant_type_1_1)s, %(assistant_type_1_2)s, %(assistant_type_1_3)s) GROUP BY answers.question_business_id 
HAVING count(distinct(answers.assistant_type)) = %(count_2)s) AS anon_1
2025-08-18 23:47:12 - sqlalchemy.engine.Engine - INFO - [cached since 177.9s ago] {'count_2': 3, 'assistant_type_1_1': 'yoyo', 'assistant_type_1_2': 'doubao', 'assistant_type_1_3': 'xiaotian'}
2025-08-18 23:47:12 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT scores.id AS scores_id, scores.answer_id AS scores_answer_id, scores.score_1 AS scores_score_1, scores.score_2 AS scores_score_2, scores.score_3 AS scores_score_3, scores.score_4 AS scores_score_4, scores.score_5 AS scores_score_5, scores.dimension_1_name AS scores_dimension_1_name, scores.dimension_2_name AS scores_dimension_2_name, scores.dimension_3_name AS scores_dimension_3_name, scores.dimension_4_name AS scores_dimension_4_name, scores.dimension_5_name AS scores_dimension_5_name, scores.average_score AS scores_average_score, scores.comment AS scores_comment, scores.rated_at AS scores_rated_at 
FROM scores) AS anon_1
2025-08-18 23:47:12 - sqlalchemy.engine.Engine - INFO - [cached since 177.9s ago] {}
2025-08-18 23:47:12 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.assistant_type = %(assistant_type_1)s) AS anon_1
2025-08-18 23:47:12 - sqlalchemy.engine.Engine - INFO - [cached since 177.9s ago] {'assistant_type_1': 'doubao'}
2025-08-18 23:47:12 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.assistant_type = %(assistant_type_1)s) AS anon_1
2025-08-18 23:47:12 - sqlalchemy.engine.Engine - INFO - [cached since 177.9s ago] {'assistant_type_1': 'xiaotian'}
2025-08-18 23:47:12 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.classification IS NOT NULL AND questions.classification != %(classification_1)s) AS anon_1
2025-08-18 23:47:12 - sqlalchemy.engine.Engine - INFO - [cached since 177.9s ago] {'classification_1': ''}
2025-08-18 23:47:12 - sqlalchemy.engine.Engine - INFO - SELECT count(questions.id) AS count_1 
FROM questions
2025-08-18 23:47:12 - sqlalchemy.engine.Engine - INFO - [cached since 177.9s ago] {}
2025-08-18 23:47:12 - sqlalchemy.engine.Engine - INFO - SELECT count(answers.id) AS count_1 
FROM answers
2025-08-18 23:47:12 - sqlalchemy.engine.Engine - INFO - [cached since 177.8s ago] {}
2025-08-18 23:47:12 - sqlalchemy.engine.Engine - INFO - SELECT count(answers.id) AS count_1 
FROM answers 
WHERE answers.assistant_type = %(assistant_type_1)s
2025-08-18 23:47:12 - sqlalchemy.engine.Engine - INFO - [cached since 177.8s ago] {'assistant_type_1': 'yoyo'}
2025-08-18 23:47:12 - sqlalchemy.engine.Engine - INFO - SELECT COUNT(*) FROM table1
2025-08-18 23:47:12 - sqlalchemy.engine.Engine - INFO - [cached since 177.8s ago] {}
2025-08-18 23:47:12 - sqlalchemy.engine.Engine - INFO - SELECT COUNT(*) FROM table1 WHERE answer IS NOT NULL AND answer != '' AND TRIM(answer) != ''
2025-08-18 23:47:12 - sqlalchemy.engine.Engine - INFO - [cached since 177.8s ago] {}
2025-08-18 23:47:12 - sqlalchemy.engine.Engine - INFO - SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions ORDER BY questions.sendmessagetime DESC 
 LIMIT %(param_1)s
2025-08-18 23:47:12 - sqlalchemy.engine.Engine - INFO - [cached since 177.8s ago] {'param_1': 1}
2025-08-18 23:47:12 - sqlalchemy.engine.Engine - INFO - SELECT MAX(sendmessagetime) FROM table1
2025-08-18 23:47:12 - sqlalchemy.engine.Engine - INFO - [cached since 177.8s ago] {}
2025-08-18 23:47:12 - sqlalchemy.engine.Engine - INFO - SELECT date(questions.sendmessagetime) AS date, count(questions.id) AS questions 
FROM questions 
WHERE questions.sendmessagetime >= %(sendmessagetime_1)s GROUP BY date(questions.sendmessagetime)
2025-08-18 23:47:12 - sqlalchemy.engine.Engine - INFO - [cached since 177.8s ago] {'sendmessagetime_1': datetime.datetime(2025, 8, 11, 15, 47, 12, 710623)}
2025-08-18 23:47:12 - sqlalchemy.engine.Engine - INFO - SELECT date(questions.sendmessagetime) AS date, count(questions.id) AS classifications 
FROM questions 
WHERE questions.sendmessagetime >= %(sendmessagetime_1)s AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s GROUP BY date(questions.sendmessagetime)
2025-08-18 23:47:12 - sqlalchemy.engine.Engine - INFO - [cached since 177.8s ago] {'sendmessagetime_1': datetime.datetime(2025, 8, 11, 15, 47, 12, 710623), 'classification_1': ''}
2025-08-18 23:47:12 - sqlalchemy.engine.Engine - INFO - SELECT date(scores.rated_at) AS date, count(scores.id) AS scores 
FROM scores 
WHERE scores.rated_at >= %(rated_at_1)s GROUP BY date(scores.rated_at)
2025-08-18 23:47:12 - sqlalchemy.engine.Engine - INFO - [cached since 177.8s ago] {'rated_at_1': datetime.datetime(2025, 8, 11, 15, 47, 12, 710623)}
2025-08-18 23:47:12 - sqlalchemy.engine.Engine - INFO - SELECT questions.classification AS questions_classification, count(questions.id) AS count_1 
FROM questions 
WHERE questions.classification IS NOT NULL GROUP BY questions.classification
2025-08-18 23:47:12 - sqlalchemy.engine.Engine - INFO - [cached since 177.8s ago] {}
2025-08-18 23:47:12 - sqlalchemy.engine.Engine - INFO - SELECT answers.assistant_type AS answers_assistant_type, count(answers.id) AS total 
FROM answers GROUP BY answers.assistant_type
2025-08-18 23:47:12 - sqlalchemy.engine.Engine - INFO - [cached since 177.8s ago] {}
2025-08-18 23:47:12 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-18 23:47:12 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-18 23:47:12 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions ORDER BY questions.created_at DESC) AS anon_1
2025-08-18 23:47:12 - sqlalchemy.engine.Engine - INFO - [generated in 0.00028s] {}
2025-08-18 23:47:12 - sqlalchemy.engine.Engine - INFO - SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions ORDER BY questions.created_at DESC 
 LIMIT %(param_1)s OFFSET %(param_2)s
2025-08-18 23:47:12 - sqlalchemy.engine.Engine - INFO - [generated in 0.00021s] {'param_1': 20, 'param_2': 0}
2025-08-18 23:47:12 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-18 23:47:12 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-18 23:47:12 - sqlalchemy.engine.Engine - INFO - SELECT questions.classification AS name, count(questions.id) AS count 
FROM questions 
WHERE questions.classification IS NOT NULL AND questions.classification != %(classification_1)s GROUP BY questions.classification ORDER BY count(questions.id) DESC
2025-08-18 23:47:12 - sqlalchemy.engine.Engine - INFO - [cached since 2.932s ago] {'classification_1': ''}
2025-08-18 23:47:12 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-18 23:47:13 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-18 23:47:13 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s) AS anon_1
2025-08-18 23:47:13 - sqlalchemy.engine.Engine - INFO - [cached since 198.7s ago] {'created_at_1': datetime.datetime(2025, 8, 18, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 24, 23, 59, 59, 999999), 'processing_status_1': 'scored'}
2025-08-18 23:47:13 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s AND questions.is_badcase = true) AS anon_1
2025-08-18 23:47:13 - sqlalchemy.engine.Engine - INFO - [cached since 198.7s ago] {'created_at_1': datetime.datetime(2025, 8, 18, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 24, 23, 59, 59, 999999), 'processing_status_1': 'scored'}
2025-08-18 23:47:13 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s AND questions.is_badcase = true AND questions.badcase_review_status = %(badcase_review_status_1)s) AS anon_1
2025-08-18 23:47:13 - sqlalchemy.engine.Engine - INFO - [cached since 198.7s ago] {'created_at_1': datetime.datetime(2025, 8, 18, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 24, 23, 59, 59, 999999), 'processing_status_1': 'scored', 'badcase_review_status_1': 'pending'}
2025-08-18 23:47:13 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s AND questions.badcase_review_status = %(badcase_review_status_1)s) AS anon_1
2025-08-18 23:47:13 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-18 23:47:13 - sqlalchemy.engine.Engine - INFO - [cached since 198.7s ago] {'created_at_1': datetime.datetime(2025, 8, 18, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 24, 23, 59, 59, 999999), 'processing_status_1': 'scored', 'badcase_review_status_1': 'reviewed'}
2025-08-18 23:47:13 - app.api.word_analysis_api - INFO - 获取词云数据请求: time_range=week, limit=40
2025-08-18 23:47:13 - sqlalchemy.engine.Engine - INFO - SELECT questions.classification AS questions_classification, count(questions.id) AS badcase_count 
FROM questions 
WHERE questions.is_badcase = true GROUP BY questions.classification ORDER BY count(questions.id) DESC 
 LIMIT %(param_1)s
2025-08-18 23:47:13 - app.api.word_analysis_api - INFO - 获取词云数据请求: time_range=week, limit=40
2025-08-18 23:47:13 - sqlalchemy.engine.Engine - INFO - [cached since 198.7s ago] {'param_1': 3}
2025-08-18 23:47:13 - app.services.word_analysis_service - INFO - 开始获取热词分析数据，时间范围: week, 限制: 40
2025-08-18 23:47:13 - app.services.word_analysis_service - INFO - 开始获取热词分析数据，时间范围: week, 限制: 40
2025-08-18 23:47:13 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s AND questions.badcase_review_status = %(badcase_review_status_1)s AND questions.is_badcase = false) AS anon_1
2025-08-18 23:47:13 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-18 23:47:13 - sqlalchemy.engine.Engine - INFO - 
                WITH dimension_scores AS (
                    -- 维度1的数据
                    SELECT
                        s.dimension_1_name as dimension_name,
                        s.score_1 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_1_name IS NOT NULL
                    AND s.score_1 IS NOT NULL

                    UNION ALL

                    -- 维度2的数据
                    SELECT
                        s.dimension_2_name as dimension_name,
                        s.score_2 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_2_name IS NOT NULL
                    AND s.score_2 IS NOT NULL

                    UNION ALL

                    -- 维度3的数据
                    SELECT
                        s.dimension_3_name as dimension_name,
                        s.score_3 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_3_name IS NOT NULL
                    AND s.score_3 IS NOT NULL

                    UNION ALL

                    -- 维度4的数据
                    SELECT
                        s.dimension_4_name as dimension_name,
                        s.score_4 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_4_name IS NOT NULL
                    AND s.score_4 IS NOT NULL

                    UNION ALL

                    -- 维度5的数据
                    SELECT
                        s.dimension_5_name as dimension_name,
                        s.score_5 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_5_name IS NOT NULL
                    AND s.score_5 IS NOT NULL
                )
                SELECT
                    dimension_name,
                    AVG(score) as avg_score,
                    COUNT(*) as sample_count
                FROM dimension_scores
                GROUP BY dimension_name
                ORDER BY avg_score ASC
            
2025-08-18 23:47:13 - sqlalchemy.engine.Engine - INFO - [cached since 198.7s ago] {'created_at_1': datetime.datetime(2025, 8, 18, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 24, 23, 59, 59, 999999), 'processing_status_1': 'scored', 'badcase_review_status_1': 'reviewed'}
2025-08-18 23:47:13 - sqlalchemy.engine.Engine - INFO - SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.query IS NOT NULL AND questions.query != %(query_1)s AND questions.is_deleted = false
2025-08-18 23:47:13 - sqlalchemy.engine.Engine - INFO - [cached since 198.7s ago] {'classification': '产品使用'}
2025-08-18 23:47:13 - sqlalchemy.engine.Engine - INFO - [cached since 168.7s ago] {'created_at_1': datetime.datetime(2025, 8, 18, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 24, 23, 59, 59, 999999), 'query_1': ''}
2025-08-18 23:47:13 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-18 23:47:13 - app.services.word_analysis_service - INFO - 查询到 53 个问题，时间范围: 2025-08-18 00:00:00 至 2025-08-24 23:59:59.999999
2025-08-18 23:47:13 - app.services.word_analysis_service - INFO - 查询到 53 个问题，时间范围: 2025-08-18 00:00:00 至 2025-08-24 23:59:59.999999
2025-08-18 23:47:13 - app.services.word_analysis_service - INFO - 问题样本 1: 价格是多少？...
2025-08-18 23:47:13 - app.services.word_analysis_service - INFO - 问题样本 1: 价格是多少？...
2025-08-18 23:47:13 - app.services.word_analysis_service - INFO - 问题样本 2: 定制开发相关的政策？...
2025-08-18 23:47:13 - app.services.word_analysis_service - INFO - 问题样本 2: 定制开发相关的政策？...
2025-08-18 23:47:13 - sqlalchemy.engine.Engine - INFO - 
                WITH dimension_scores AS (
                    -- 维度1的数据
                    SELECT
                        s.dimension_1_name as dimension_name,
                        s.score_1 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_1_name IS NOT NULL
                    AND s.score_1 IS NOT NULL

                    UNION ALL

                    -- 维度2的数据
                    SELECT
                        s.dimension_2_name as dimension_name,
                        s.score_2 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_2_name IS NOT NULL
                    AND s.score_2 IS NOT NULL

                    UNION ALL

                    -- 维度3的数据
                    SELECT
                        s.dimension_3_name as dimension_name,
                        s.score_3 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_3_name IS NOT NULL
                    AND s.score_3 IS NOT NULL

                    UNION ALL

                    -- 维度4的数据
                    SELECT
                        s.dimension_4_name as dimension_name,
                        s.score_4 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_4_name IS NOT NULL
                    AND s.score_4 IS NOT NULL

                    UNION ALL

                    -- 维度5的数据
                    SELECT
                        s.dimension_5_name as dimension_name,
                        s.score_5 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_5_name IS NOT NULL
                    AND s.score_5 IS NOT NULL
                )
                SELECT
                    dimension_name,
                    AVG(score) as avg_score,
                    COUNT(*) as sample_count
                FROM dimension_scores
                GROUP BY dimension_name
                ORDER BY avg_score ASC
            
2025-08-18 23:47:13 - app.services.word_analysis_service - INFO - 问题样本 3: 用户设置在哪里可以找到？...
2025-08-18 23:47:13 - sqlalchemy.engine.Engine - INFO - [cached since 198.7s ago] {'classification': '其他'}
2025-08-18 23:47:13 - app.services.word_analysis_service - INFO - 问题样本 3: 用户设置在哪里可以找到？...
2025-08-18 23:47:13 - app.services.word_analysis_service - INFO - 有效问题文本数: 53, 总文本长度: 596
2025-08-18 23:47:13 - app.services.word_analysis_service - INFO - 有效问题文本数: 53, 总文本长度: 596
2025-08-18 23:47:13 - app.services.word_analysis_service - INFO - 文本分析完成，原始词汇: 361, 过滤后: 129, 唯一词汇: 46
2025-08-18 23:47:13 - app.services.word_analysis_service - INFO - 文本分析完成，原始词汇: 361, 过滤后: 129, 唯一词汇: 46
2025-08-18 23:47:13 - sqlalchemy.engine.Engine - INFO - 
                WITH dimension_scores AS (
                    -- 维度1的数据
                    SELECT
                        s.dimension_1_name as dimension_name,
                        s.score_1 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_1_name IS NOT NULL
                    AND s.score_1 IS NOT NULL

                    UNION ALL

                    -- 维度2的数据
                    SELECT
                        s.dimension_2_name as dimension_name,
                        s.score_2 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_2_name IS NOT NULL
                    AND s.score_2 IS NOT NULL

                    UNION ALL

                    -- 维度3的数据
                    SELECT
                        s.dimension_3_name as dimension_name,
                        s.score_3 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_3_name IS NOT NULL
                    AND s.score_3 IS NOT NULL

                    UNION ALL

                    -- 维度4的数据
                    SELECT
                        s.dimension_4_name as dimension_name,
                        s.score_4 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_4_name IS NOT NULL
                    AND s.score_4 IS NOT NULL

                    UNION ALL

                    -- 维度5的数据
                    SELECT
                        s.dimension_5_name as dimension_name,
                        s.score_5 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_5_name IS NOT NULL
                    AND s.score_5 IS NOT NULL
                )
                SELECT
                    dimension_name,
                    AVG(score) as avg_score,
                    COUNT(*) as sample_count
                FROM dimension_scores
                GROUP BY dimension_name
                ORDER BY avg_score ASC
            
2025-08-18 23:47:13 - app.services.word_analysis_service - INFO - 热词分析完成，共分析 53 个问题，生成 40 个热词
2025-08-18 23:47:13 - app.services.word_analysis_service - INFO - 热词分析完成，共分析 53 个问题，生成 40 个热词
2025-08-18 23:47:13 - sqlalchemy.engine.Engine - INFO - [cached since 198.7s ago] {'classification': '经济问题'}
2025-08-18 23:47:13 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-18 23:47:13 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-18 23:47:14 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-18 23:47:14 - sqlalchemy.engine.Engine - INFO - SELECT questions.classification AS name, count(questions.id) AS count 
FROM questions 
WHERE questions.classification IS NOT NULL AND questions.classification != %(classification_1)s GROUP BY questions.classification
2025-08-18 23:47:14 - sqlalchemy.engine.Engine - INFO - [cached since 138.4s ago] {'classification_1': ''}
2025-08-18 23:47:14 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:47:14 - sqlalchemy.engine.Engine - INFO - [cached since 7.225s ago] {'classification_1': '科学问题', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-18 23:47:14 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:47:14 - sqlalchemy.engine.Engine - INFO - [cached since 7.226s ago] {'classification_1': '科学问题', 'assistant_type_1': 'doubao', 'param_1': 1}
2025-08-18 23:47:14 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:47:14 - sqlalchemy.engine.Engine - INFO - [cached since 7.228s ago] {'classification_1': '科学问题', 'assistant_type_1': 'xiaotian', 'param_1': 1}
2025-08-18 23:47:14 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:47:14 - sqlalchemy.engine.Engine - INFO - [cached since 7.229s ago] {'classification_1': '数据分析', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-18 23:47:14 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:47:14 - sqlalchemy.engine.Engine - INFO - [cached since 7.231s ago] {'classification_1': '数据分析', 'assistant_type_1': 'doubao', 'param_1': 1}
2025-08-18 23:47:14 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:47:14 - sqlalchemy.engine.Engine - INFO - [cached since 7.232s ago] {'classification_1': '数据分析', 'assistant_type_1': 'xiaotian', 'param_1': 1}
2025-08-18 23:47:14 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:47:14 - sqlalchemy.engine.Engine - INFO - [cached since 7.234s ago] {'classification_1': '用户体验', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-18 23:47:14 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:47:14 - sqlalchemy.engine.Engine - INFO - [cached since 7.236s ago] {'classification_1': '用户体验', 'assistant_type_1': 'doubao', 'param_1': 1}
2025-08-18 23:47:14 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:47:14 - sqlalchemy.engine.Engine - INFO - [cached since 7.237s ago] {'classification_1': '用户体验', 'assistant_type_1': 'xiaotian', 'param_1': 1}
2025-08-18 23:47:14 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:47:14 - sqlalchemy.engine.Engine - INFO - [cached since 7.239s ago] {'classification_1': '性能优化', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-18 23:47:14 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:47:14 - sqlalchemy.engine.Engine - INFO - [cached since 7.24s ago] {'classification_1': '性能优化', 'assistant_type_1': 'doubao', 'param_1': 1}
2025-08-18 23:47:14 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:47:14 - sqlalchemy.engine.Engine - INFO - [cached since 7.242s ago] {'classification_1': '性能优化', 'assistant_type_1': 'xiaotian', 'param_1': 1}
2025-08-18 23:47:14 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:47:14 - sqlalchemy.engine.Engine - INFO - [cached since 7.243s ago] {'classification_1': '业务咨询', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-18 23:47:14 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:47:14 - sqlalchemy.engine.Engine - INFO - [cached since 7.245s ago] {'classification_1': '业务咨询', 'assistant_type_1': 'doubao', 'param_1': 1}
2025-08-18 23:47:14 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:47:14 - sqlalchemy.engine.Engine - INFO - [cached since 7.246s ago] {'classification_1': '业务咨询', 'assistant_type_1': 'xiaotian', 'param_1': 1}
2025-08-18 23:47:14 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:47:14 - sqlalchemy.engine.Engine - INFO - [cached since 7.248s ago] {'classification_1': '经济问题', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-18 23:47:14 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:47:14 - sqlalchemy.engine.Engine - INFO - [cached since 7.249s ago] {'classification_1': '经济问题', 'assistant_type_1': 'doubao', 'param_1': 1}
2025-08-18 23:47:14 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:47:14 - sqlalchemy.engine.Engine - INFO - [cached since 7.251s ago] {'classification_1': '经济问题', 'assistant_type_1': 'xiaotian', 'param_1': 1}
2025-08-18 23:47:14 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:47:14 - sqlalchemy.engine.Engine - INFO - [cached since 7.253s ago] {'classification_1': '账户管理', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-18 23:47:14 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:47:14 - sqlalchemy.engine.Engine - INFO - [cached since 7.254s ago] {'classification_1': '账户管理', 'assistant_type_1': 'doubao', 'param_1': 1}
2025-08-18 23:47:14 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:47:14 - sqlalchemy.engine.Engine - INFO - [cached since 7.256s ago] {'classification_1': '账户管理', 'assistant_type_1': 'xiaotian', 'param_1': 1}
2025-08-18 23:47:14 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:47:14 - sqlalchemy.engine.Engine - INFO - [cached since 7.257s ago] {'classification_1': '功能建议', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-18 23:47:14 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:47:14 - sqlalchemy.engine.Engine - INFO - [cached since 7.259s ago] {'classification_1': '功能建议', 'assistant_type_1': 'doubao', 'param_1': 1}
2025-08-18 23:47:14 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:47:14 - sqlalchemy.engine.Engine - INFO - [cached since 7.26s ago] {'classification_1': '功能建议', 'assistant_type_1': 'xiaotian', 'param_1': 1}
2025-08-18 23:47:14 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:47:14 - sqlalchemy.engine.Engine - INFO - [cached since 7.261s ago] {'classification_1': '教育问题', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-18 23:47:14 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:47:14 - sqlalchemy.engine.Engine - INFO - [cached since 7.262s ago] {'classification_1': '教育问题', 'assistant_type_1': 'doubao', 'param_1': 1}
2025-08-18 23:47:14 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:47:14 - sqlalchemy.engine.Engine - INFO - [cached since 7.263s ago] {'classification_1': '教育问题', 'assistant_type_1': 'xiaotian', 'param_1': 1}
2025-08-18 23:47:14 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:47:14 - sqlalchemy.engine.Engine - INFO - [cached since 7.265s ago] {'classification_1': '技术问题', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-18 23:47:14 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:47:14 - sqlalchemy.engine.Engine - INFO - [cached since 7.266s ago] {'classification_1': '技术问题', 'assistant_type_1': 'doubao', 'param_1': 1}
2025-08-18 23:47:14 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:47:14 - sqlalchemy.engine.Engine - INFO - [cached since 7.267s ago] {'classification_1': '技术问题', 'assistant_type_1': 'xiaotian', 'param_1': 1}
2025-08-18 23:47:14 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:47:14 - sqlalchemy.engine.Engine - INFO - [cached since 7.268s ago] {'classification_1': '其他', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-18 23:47:14 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:47:14 - sqlalchemy.engine.Engine - INFO - [cached since 7.27s ago] {'classification_1': '其他', 'assistant_type_1': 'doubao', 'param_1': 1}
2025-08-18 23:47:14 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:47:14 - sqlalchemy.engine.Engine - INFO - [cached since 7.271s ago] {'classification_1': '其他', 'assistant_type_1': 'xiaotian', 'param_1': 1}
2025-08-18 23:47:14 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:47:14 - sqlalchemy.engine.Engine - INFO - [cached since 7.272s ago] {'classification_1': '安全设置', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-18 23:47:14 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:47:14 - sqlalchemy.engine.Engine - INFO - [cached since 7.274s ago] {'classification_1': '安全设置', 'assistant_type_1': 'doubao', 'param_1': 1}
2025-08-18 23:47:14 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:47:14 - sqlalchemy.engine.Engine - INFO - [cached since 7.276s ago] {'classification_1': '安全设置', 'assistant_type_1': 'xiaotian', 'param_1': 1}
2025-08-18 23:47:14 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:47:14 - sqlalchemy.engine.Engine - INFO - [cached since 7.277s ago] {'classification_1': '故障排查', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-18 23:47:14 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:47:14 - sqlalchemy.engine.Engine - INFO - [cached since 7.279s ago] {'classification_1': '故障排查', 'assistant_type_1': 'doubao', 'param_1': 1}
2025-08-18 23:47:14 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:47:14 - sqlalchemy.engine.Engine - INFO - [cached since 7.28s ago] {'classification_1': '故障排查', 'assistant_type_1': 'xiaotian', 'param_1': 1}
2025-08-18 23:47:14 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:47:14 - sqlalchemy.engine.Engine - INFO - [cached since 7.281s ago] {'classification_1': '工程问题', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-18 23:47:14 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:47:14 - sqlalchemy.engine.Engine - INFO - [cached since 7.283s ago] {'classification_1': '工程问题', 'assistant_type_1': 'doubao', 'param_1': 1}
2025-08-18 23:47:14 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:47:14 - sqlalchemy.engine.Engine - INFO - [cached since 7.284s ago] {'classification_1': '工程问题', 'assistant_type_1': 'xiaotian', 'param_1': 1}
2025-08-18 23:47:14 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:47:14 - sqlalchemy.engine.Engine - INFO - [cached since 7.286s ago] {'classification_1': '产品使用', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-18 23:47:14 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:47:14 - sqlalchemy.engine.Engine - INFO - [cached since 7.287s ago] {'classification_1': '产品使用', 'assistant_type_1': 'doubao', 'param_1': 1}
2025-08-18 23:47:14 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:47:14 - sqlalchemy.engine.Engine - INFO - [cached since 7.288s ago] {'classification_1': '产品使用', 'assistant_type_1': 'xiaotian', 'param_1': 1}
2025-08-18 23:47:14 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-18 23:47:44 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-18 23:47:44 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s) AS anon_1
2025-08-18 23:47:44 - sqlalchemy.engine.Engine - INFO - [cached since 229.1s ago] {'created_at_1': datetime.datetime(2025, 8, 18, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 24, 23, 59, 59, 999999), 'processing_status_1': 'scored'}
2025-08-18 23:47:44 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s AND questions.is_badcase = true) AS anon_1
2025-08-18 23:47:44 - sqlalchemy.engine.Engine - INFO - [cached since 229.1s ago] {'created_at_1': datetime.datetime(2025, 8, 18, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 24, 23, 59, 59, 999999), 'processing_status_1': 'scored'}
2025-08-18 23:47:44 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s AND questions.is_badcase = true AND questions.badcase_review_status = %(badcase_review_status_1)s) AS anon_1
2025-08-18 23:47:44 - sqlalchemy.engine.Engine - INFO - [cached since 229.1s ago] {'created_at_1': datetime.datetime(2025, 8, 18, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 24, 23, 59, 59, 999999), 'processing_status_1': 'scored', 'badcase_review_status_1': 'pending'}
2025-08-18 23:47:44 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s AND questions.badcase_review_status = %(badcase_review_status_1)s) AS anon_1
2025-08-18 23:47:44 - sqlalchemy.engine.Engine - INFO - [cached since 229.1s ago] {'created_at_1': datetime.datetime(2025, 8, 18, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 24, 23, 59, 59, 999999), 'processing_status_1': 'scored', 'badcase_review_status_1': 'reviewed'}
2025-08-18 23:47:44 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s AND questions.badcase_review_status = %(badcase_review_status_1)s AND questions.is_badcase = false) AS anon_1
2025-08-18 23:47:44 - sqlalchemy.engine.Engine - INFO - [cached since 229.1s ago] {'created_at_1': datetime.datetime(2025, 8, 18, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 24, 23, 59, 59, 999999), 'processing_status_1': 'scored', 'badcase_review_status_1': 'reviewed'}
2025-08-18 23:47:44 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-18 23:47:44 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-18 23:47:44 - sqlalchemy.engine.Engine - INFO - SELECT questions.classification AS questions_classification, count(questions.id) AS badcase_count 
FROM questions 
WHERE questions.is_badcase = true GROUP BY questions.classification ORDER BY count(questions.id) DESC 
 LIMIT %(param_1)s
2025-08-18 23:47:44 - sqlalchemy.engine.Engine - INFO - [cached since 229.1s ago] {'param_1': 3}
2025-08-18 23:47:44 - sqlalchemy.engine.Engine - INFO - 
                WITH dimension_scores AS (
                    -- 维度1的数据
                    SELECT
                        s.dimension_1_name as dimension_name,
                        s.score_1 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_1_name IS NOT NULL
                    AND s.score_1 IS NOT NULL

                    UNION ALL

                    -- 维度2的数据
                    SELECT
                        s.dimension_2_name as dimension_name,
                        s.score_2 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_2_name IS NOT NULL
                    AND s.score_2 IS NOT NULL

                    UNION ALL

                    -- 维度3的数据
                    SELECT
                        s.dimension_3_name as dimension_name,
                        s.score_3 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_3_name IS NOT NULL
                    AND s.score_3 IS NOT NULL

                    UNION ALL

                    -- 维度4的数据
                    SELECT
                        s.dimension_4_name as dimension_name,
                        s.score_4 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_4_name IS NOT NULL
                    AND s.score_4 IS NOT NULL

                    UNION ALL

                    -- 维度5的数据
                    SELECT
                        s.dimension_5_name as dimension_name,
                        s.score_5 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_5_name IS NOT NULL
                    AND s.score_5 IS NOT NULL
                )
                SELECT
                    dimension_name,
                    AVG(score) as avg_score,
                    COUNT(*) as sample_count
                FROM dimension_scores
                GROUP BY dimension_name
                ORDER BY avg_score ASC
            
2025-08-18 23:47:44 - sqlalchemy.engine.Engine - INFO - [cached since 229.1s ago] {'classification': '产品使用'}
2025-08-18 23:47:44 - sqlalchemy.engine.Engine - INFO - 
                WITH dimension_scores AS (
                    -- 维度1的数据
                    SELECT
                        s.dimension_1_name as dimension_name,
                        s.score_1 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_1_name IS NOT NULL
                    AND s.score_1 IS NOT NULL

                    UNION ALL

                    -- 维度2的数据
                    SELECT
                        s.dimension_2_name as dimension_name,
                        s.score_2 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_2_name IS NOT NULL
                    AND s.score_2 IS NOT NULL

                    UNION ALL

                    -- 维度3的数据
                    SELECT
                        s.dimension_3_name as dimension_name,
                        s.score_3 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_3_name IS NOT NULL
                    AND s.score_3 IS NOT NULL

                    UNION ALL

                    -- 维度4的数据
                    SELECT
                        s.dimension_4_name as dimension_name,
                        s.score_4 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_4_name IS NOT NULL
                    AND s.score_4 IS NOT NULL

                    UNION ALL

                    -- 维度5的数据
                    SELECT
                        s.dimension_5_name as dimension_name,
                        s.score_5 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_5_name IS NOT NULL
                    AND s.score_5 IS NOT NULL
                )
                SELECT
                    dimension_name,
                    AVG(score) as avg_score,
                    COUNT(*) as sample_count
                FROM dimension_scores
                GROUP BY dimension_name
                ORDER BY avg_score ASC
            
2025-08-18 23:47:44 - sqlalchemy.engine.Engine - INFO - [cached since 229.1s ago] {'classification': '其他'}
2025-08-18 23:47:44 - sqlalchemy.engine.Engine - INFO - 
                WITH dimension_scores AS (
                    -- 维度1的数据
                    SELECT
                        s.dimension_1_name as dimension_name,
                        s.score_1 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_1_name IS NOT NULL
                    AND s.score_1 IS NOT NULL

                    UNION ALL

                    -- 维度2的数据
                    SELECT
                        s.dimension_2_name as dimension_name,
                        s.score_2 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_2_name IS NOT NULL
                    AND s.score_2 IS NOT NULL

                    UNION ALL

                    -- 维度3的数据
                    SELECT
                        s.dimension_3_name as dimension_name,
                        s.score_3 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_3_name IS NOT NULL
                    AND s.score_3 IS NOT NULL

                    UNION ALL

                    -- 维度4的数据
                    SELECT
                        s.dimension_4_name as dimension_name,
                        s.score_4 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_4_name IS NOT NULL
                    AND s.score_4 IS NOT NULL

                    UNION ALL

                    -- 维度5的数据
                    SELECT
                        s.dimension_5_name as dimension_name,
                        s.score_5 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_5_name IS NOT NULL
                    AND s.score_5 IS NOT NULL
                )
                SELECT
                    dimension_name,
                    AVG(score) as avg_score,
                    COUNT(*) as sample_count
                FROM dimension_scores
                GROUP BY dimension_name
                ORDER BY avg_score ASC
            
2025-08-18 23:47:44 - sqlalchemy.engine.Engine - INFO - [cached since 229.1s ago] {'classification': '经济问题'}
2025-08-18 23:47:44 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-18 23:48:00 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-18 23:48:00 - sqlalchemy.engine.Engine - INFO - SELECT users.id AS users_id, users.username AS users_username, users.display_name AS users_display_name, users.password_hash AS users_password_hash, users.role AS users_role, users.status AS users_status, users.created_at AS users_created_at, users.last_login_at AS users_last_login_at, users.login_count AS users_login_count 
FROM users 
WHERE users.id = %(pk_1)s
2025-08-18 23:48:00 - sqlalchemy.engine.Engine - INFO - [cached since 54.36s ago] {'pk_1': '1'}
2025-08-18 23:48:00 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-18 23:48:00 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-18 23:48:00 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s) AS anon_1
2025-08-18 23:48:00 - sqlalchemy.engine.Engine - INFO - [cached since 245.7s ago] {'created_at_1': datetime.datetime(2025, 8, 18, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 24, 23, 59, 59, 999999), 'processing_status_1': 'scored'}
2025-08-18 23:48:00 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s AND questions.is_badcase = true) AS anon_1
2025-08-18 23:48:00 - sqlalchemy.engine.Engine - INFO - [cached since 245.6s ago] {'created_at_1': datetime.datetime(2025, 8, 18, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 24, 23, 59, 59, 999999), 'processing_status_1': 'scored'}
2025-08-18 23:48:00 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s AND questions.is_badcase = true AND questions.badcase_review_status = %(badcase_review_status_1)s) AS anon_1
2025-08-18 23:48:00 - sqlalchemy.engine.Engine - INFO - [cached since 245.6s ago] {'created_at_1': datetime.datetime(2025, 8, 18, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 24, 23, 59, 59, 999999), 'processing_status_1': 'scored', 'badcase_review_status_1': 'pending'}
2025-08-18 23:48:00 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s AND questions.badcase_review_status = %(badcase_review_status_1)s) AS anon_1
2025-08-18 23:48:00 - sqlalchemy.engine.Engine - INFO - [cached since 245.6s ago] {'created_at_1': datetime.datetime(2025, 8, 18, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 24, 23, 59, 59, 999999), 'processing_status_1': 'scored', 'badcase_review_status_1': 'reviewed'}
2025-08-18 23:48:00 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s AND questions.badcase_review_status = %(badcase_review_status_1)s AND questions.is_badcase = false) AS anon_1
2025-08-18 23:48:00 - sqlalchemy.engine.Engine - INFO - [cached since 245.6s ago] {'created_at_1': datetime.datetime(2025, 8, 18, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 24, 23, 59, 59, 999999), 'processing_status_1': 'scored', 'badcase_review_status_1': 'reviewed'}
2025-08-18 23:48:00 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-18 23:48:00 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-18 23:48:00 - app.api.word_analysis_api - INFO - 获取词云数据请求: time_range=week, limit=40
2025-08-18 23:48:00 - sqlalchemy.engine.Engine - INFO - SELECT questions.classification AS questions_classification, count(questions.id) AS badcase_count 
FROM questions 
WHERE questions.is_badcase = true GROUP BY questions.classification ORDER BY count(questions.id) DESC 
 LIMIT %(param_1)s
2025-08-18 23:48:00 - app.api.word_analysis_api - INFO - 获取词云数据请求: time_range=week, limit=40
2025-08-18 23:48:00 - sqlalchemy.engine.Engine - INFO - [cached since 245.7s ago] {'param_1': 3}
2025-08-18 23:48:00 - app.services.word_analysis_service - INFO - 开始获取热词分析数据，时间范围: week, 限制: 40
2025-08-18 23:48:00 - app.services.word_analysis_service - INFO - 开始获取热词分析数据，时间范围: week, 限制: 40
2025-08-18 23:48:00 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-18 23:48:00 - sqlalchemy.engine.Engine - INFO - SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.query IS NOT NULL AND questions.query != %(query_1)s AND questions.is_deleted = false
2025-08-18 23:48:00 - sqlalchemy.engine.Engine - INFO - 
                WITH dimension_scores AS (
                    -- 维度1的数据
                    SELECT
                        s.dimension_1_name as dimension_name,
                        s.score_1 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_1_name IS NOT NULL
                    AND s.score_1 IS NOT NULL

                    UNION ALL

                    -- 维度2的数据
                    SELECT
                        s.dimension_2_name as dimension_name,
                        s.score_2 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_2_name IS NOT NULL
                    AND s.score_2 IS NOT NULL

                    UNION ALL

                    -- 维度3的数据
                    SELECT
                        s.dimension_3_name as dimension_name,
                        s.score_3 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_3_name IS NOT NULL
                    AND s.score_3 IS NOT NULL

                    UNION ALL

                    -- 维度4的数据
                    SELECT
                        s.dimension_4_name as dimension_name,
                        s.score_4 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_4_name IS NOT NULL
                    AND s.score_4 IS NOT NULL

                    UNION ALL

                    -- 维度5的数据
                    SELECT
                        s.dimension_5_name as dimension_name,
                        s.score_5 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_5_name IS NOT NULL
                    AND s.score_5 IS NOT NULL
                )
                SELECT
                    dimension_name,
                    AVG(score) as avg_score,
                    COUNT(*) as sample_count
                FROM dimension_scores
                GROUP BY dimension_name
                ORDER BY avg_score ASC
            
2025-08-18 23:48:00 - sqlalchemy.engine.Engine - INFO - [cached since 215.6s ago] {'created_at_1': datetime.datetime(2025, 8, 18, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 24, 23, 59, 59, 999999), 'query_1': ''}
2025-08-18 23:48:00 - sqlalchemy.engine.Engine - INFO - [cached since 245.7s ago] {'classification': '产品使用'}
2025-08-18 23:48:00 - app.services.word_analysis_service - INFO - 查询到 53 个问题，时间范围: 2025-08-18 00:00:00 至 2025-08-24 23:59:59.999999
2025-08-18 23:48:00 - app.services.word_analysis_service - INFO - 查询到 53 个问题，时间范围: 2025-08-18 00:00:00 至 2025-08-24 23:59:59.999999
2025-08-18 23:48:00 - app.services.word_analysis_service - INFO - 问题样本 1: 价格是多少？...
2025-08-18 23:48:00 - app.services.word_analysis_service - INFO - 问题样本 1: 价格是多少？...
2025-08-18 23:48:00 - app.services.word_analysis_service - INFO - 问题样本 2: 定制开发相关的政策？...
2025-08-18 23:48:00 - app.services.word_analysis_service - INFO - 问题样本 2: 定制开发相关的政策？...
2025-08-18 23:48:00 - app.services.word_analysis_service - INFO - 问题样本 3: 用户设置在哪里可以找到？...
2025-08-18 23:48:00 - app.services.word_analysis_service - INFO - 问题样本 3: 用户设置在哪里可以找到？...
2025-08-18 23:48:00 - app.services.word_analysis_service - INFO - 有效问题文本数: 53, 总文本长度: 596
2025-08-18 23:48:00 - app.services.word_analysis_service - INFO - 有效问题文本数: 53, 总文本长度: 596
2025-08-18 23:48:00 - app.services.word_analysis_service - INFO - 文本分析完成，原始词汇: 361, 过滤后: 129, 唯一词汇: 46
2025-08-18 23:48:00 - app.services.word_analysis_service - INFO - 文本分析完成，原始词汇: 361, 过滤后: 129, 唯一词汇: 46
2025-08-18 23:48:00 - sqlalchemy.engine.Engine - INFO - 
                WITH dimension_scores AS (
                    -- 维度1的数据
                    SELECT
                        s.dimension_1_name as dimension_name,
                        s.score_1 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_1_name IS NOT NULL
                    AND s.score_1 IS NOT NULL

                    UNION ALL

                    -- 维度2的数据
                    SELECT
                        s.dimension_2_name as dimension_name,
                        s.score_2 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_2_name IS NOT NULL
                    AND s.score_2 IS NOT NULL

                    UNION ALL

                    -- 维度3的数据
                    SELECT
                        s.dimension_3_name as dimension_name,
                        s.score_3 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_3_name IS NOT NULL
                    AND s.score_3 IS NOT NULL

                    UNION ALL

                    -- 维度4的数据
                    SELECT
                        s.dimension_4_name as dimension_name,
                        s.score_4 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_4_name IS NOT NULL
                    AND s.score_4 IS NOT NULL

                    UNION ALL

                    -- 维度5的数据
                    SELECT
                        s.dimension_5_name as dimension_name,
                        s.score_5 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_5_name IS NOT NULL
                    AND s.score_5 IS NOT NULL
                )
                SELECT
                    dimension_name,
                    AVG(score) as avg_score,
                    COUNT(*) as sample_count
                FROM dimension_scores
                GROUP BY dimension_name
                ORDER BY avg_score ASC
            
2025-08-18 23:48:00 - app.services.word_analysis_service - INFO - 热词分析完成，共分析 53 个问题，生成 40 个热词
2025-08-18 23:48:00 - app.services.word_analysis_service - INFO - 热词分析完成，共分析 53 个问题，生成 40 个热词
2025-08-18 23:48:00 - sqlalchemy.engine.Engine - INFO - [cached since 245.7s ago] {'classification': '其他'}
2025-08-18 23:48:00 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-18 23:48:00 - sqlalchemy.engine.Engine - INFO - 
                WITH dimension_scores AS (
                    -- 维度1的数据
                    SELECT
                        s.dimension_1_name as dimension_name,
                        s.score_1 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_1_name IS NOT NULL
                    AND s.score_1 IS NOT NULL

                    UNION ALL

                    -- 维度2的数据
                    SELECT
                        s.dimension_2_name as dimension_name,
                        s.score_2 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_2_name IS NOT NULL
                    AND s.score_2 IS NOT NULL

                    UNION ALL

                    -- 维度3的数据
                    SELECT
                        s.dimension_3_name as dimension_name,
                        s.score_3 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_3_name IS NOT NULL
                    AND s.score_3 IS NOT NULL

                    UNION ALL

                    -- 维度4的数据
                    SELECT
                        s.dimension_4_name as dimension_name,
                        s.score_4 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_4_name IS NOT NULL
                    AND s.score_4 IS NOT NULL

                    UNION ALL

                    -- 维度5的数据
                    SELECT
                        s.dimension_5_name as dimension_name,
                        s.score_5 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_5_name IS NOT NULL
                    AND s.score_5 IS NOT NULL
                )
                SELECT
                    dimension_name,
                    AVG(score) as avg_score,
                    COUNT(*) as sample_count
                FROM dimension_scores
                GROUP BY dimension_name
                ORDER BY avg_score ASC
            
2025-08-18 23:48:00 - sqlalchemy.engine.Engine - INFO - [cached since 245.7s ago] {'classification': '经济问题'}
2025-08-18 23:48:00 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-18 23:48:01 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-18 23:48:01 - sqlalchemy.engine.Engine - INFO - SELECT questions.classification AS name, count(questions.id) AS count 
FROM questions 
WHERE questions.classification IS NOT NULL AND questions.classification != %(classification_1)s GROUP BY questions.classification
2025-08-18 23:48:01 - sqlalchemy.engine.Engine - INFO - [cached since 185.4s ago] {'classification_1': ''}
2025-08-18 23:48:01 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:48:01 - sqlalchemy.engine.Engine - INFO - [cached since 54.23s ago] {'classification_1': '科学问题', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-18 23:48:01 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:48:01 - sqlalchemy.engine.Engine - INFO - [cached since 54.24s ago] {'classification_1': '科学问题', 'assistant_type_1': 'doubao', 'param_1': 1}
2025-08-18 23:48:01 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:48:01 - sqlalchemy.engine.Engine - INFO - [cached since 54.24s ago] {'classification_1': '科学问题', 'assistant_type_1': 'xiaotian', 'param_1': 1}
2025-08-18 23:48:01 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:48:01 - sqlalchemy.engine.Engine - INFO - [cached since 54.24s ago] {'classification_1': '数据分析', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-18 23:48:01 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:48:01 - sqlalchemy.engine.Engine - INFO - [cached since 54.24s ago] {'classification_1': '数据分析', 'assistant_type_1': 'doubao', 'param_1': 1}
2025-08-18 23:48:01 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:48:01 - sqlalchemy.engine.Engine - INFO - [cached since 54.24s ago] {'classification_1': '数据分析', 'assistant_type_1': 'xiaotian', 'param_1': 1}
2025-08-18 23:48:01 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:48:01 - sqlalchemy.engine.Engine - INFO - [cached since 54.24s ago] {'classification_1': '用户体验', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-18 23:48:01 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:48:01 - sqlalchemy.engine.Engine - INFO - [cached since 54.24s ago] {'classification_1': '用户体验', 'assistant_type_1': 'doubao', 'param_1': 1}
2025-08-18 23:48:01 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:48:01 - sqlalchemy.engine.Engine - INFO - [cached since 54.24s ago] {'classification_1': '用户体验', 'assistant_type_1': 'xiaotian', 'param_1': 1}
2025-08-18 23:48:01 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:48:01 - sqlalchemy.engine.Engine - INFO - [cached since 54.25s ago] {'classification_1': '性能优化', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-18 23:48:01 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:48:01 - sqlalchemy.engine.Engine - INFO - [cached since 54.25s ago] {'classification_1': '性能优化', 'assistant_type_1': 'doubao', 'param_1': 1}
2025-08-18 23:48:01 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:48:01 - sqlalchemy.engine.Engine - INFO - [cached since 54.25s ago] {'classification_1': '性能优化', 'assistant_type_1': 'xiaotian', 'param_1': 1}
2025-08-18 23:48:01 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:48:01 - sqlalchemy.engine.Engine - INFO - [cached since 54.25s ago] {'classification_1': '业务咨询', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-18 23:48:01 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:48:01 - sqlalchemy.engine.Engine - INFO - [cached since 54.25s ago] {'classification_1': '业务咨询', 'assistant_type_1': 'doubao', 'param_1': 1}
2025-08-18 23:48:01 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:48:01 - sqlalchemy.engine.Engine - INFO - [cached since 54.25s ago] {'classification_1': '业务咨询', 'assistant_type_1': 'xiaotian', 'param_1': 1}
2025-08-18 23:48:01 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:48:01 - sqlalchemy.engine.Engine - INFO - [cached since 54.25s ago] {'classification_1': '经济问题', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-18 23:48:01 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:48:01 - sqlalchemy.engine.Engine - INFO - [cached since 54.25s ago] {'classification_1': '经济问题', 'assistant_type_1': 'doubao', 'param_1': 1}
2025-08-18 23:48:01 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:48:01 - sqlalchemy.engine.Engine - INFO - [cached since 54.26s ago] {'classification_1': '经济问题', 'assistant_type_1': 'xiaotian', 'param_1': 1}
2025-08-18 23:48:01 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:48:01 - sqlalchemy.engine.Engine - INFO - [cached since 54.26s ago] {'classification_1': '账户管理', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-18 23:48:01 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:48:01 - sqlalchemy.engine.Engine - INFO - [cached since 54.26s ago] {'classification_1': '账户管理', 'assistant_type_1': 'doubao', 'param_1': 1}
2025-08-18 23:48:01 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:48:01 - sqlalchemy.engine.Engine - INFO - [cached since 54.26s ago] {'classification_1': '账户管理', 'assistant_type_1': 'xiaotian', 'param_1': 1}
2025-08-18 23:48:01 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:48:01 - sqlalchemy.engine.Engine - INFO - [cached since 54.26s ago] {'classification_1': '功能建议', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-18 23:48:01 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:48:01 - sqlalchemy.engine.Engine - INFO - [cached since 54.26s ago] {'classification_1': '功能建议', 'assistant_type_1': 'doubao', 'param_1': 1}
2025-08-18 23:48:01 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:48:01 - sqlalchemy.engine.Engine - INFO - [cached since 54.26s ago] {'classification_1': '功能建议', 'assistant_type_1': 'xiaotian', 'param_1': 1}
2025-08-18 23:48:01 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:48:01 - sqlalchemy.engine.Engine - INFO - [cached since 54.26s ago] {'classification_1': '教育问题', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-18 23:48:01 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:48:01 - sqlalchemy.engine.Engine - INFO - [cached since 54.27s ago] {'classification_1': '教育问题', 'assistant_type_1': 'doubao', 'param_1': 1}
2025-08-18 23:48:01 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:48:01 - sqlalchemy.engine.Engine - INFO - [cached since 54.27s ago] {'classification_1': '教育问题', 'assistant_type_1': 'xiaotian', 'param_1': 1}
2025-08-18 23:48:01 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:48:01 - sqlalchemy.engine.Engine - INFO - [cached since 54.27s ago] {'classification_1': '技术问题', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-18 23:48:01 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:48:01 - sqlalchemy.engine.Engine - INFO - [cached since 54.27s ago] {'classification_1': '技术问题', 'assistant_type_1': 'doubao', 'param_1': 1}
2025-08-18 23:48:01 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:48:01 - sqlalchemy.engine.Engine - INFO - [cached since 54.27s ago] {'classification_1': '技术问题', 'assistant_type_1': 'xiaotian', 'param_1': 1}
2025-08-18 23:48:01 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:48:01 - sqlalchemy.engine.Engine - INFO - [cached since 54.27s ago] {'classification_1': '其他', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-18 23:48:01 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:48:01 - sqlalchemy.engine.Engine - INFO - [cached since 54.27s ago] {'classification_1': '其他', 'assistant_type_1': 'doubao', 'param_1': 1}
2025-08-18 23:48:01 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:48:01 - sqlalchemy.engine.Engine - INFO - [cached since 54.27s ago] {'classification_1': '其他', 'assistant_type_1': 'xiaotian', 'param_1': 1}
2025-08-18 23:48:01 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:48:01 - sqlalchemy.engine.Engine - INFO - [cached since 54.28s ago] {'classification_1': '安全设置', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-18 23:48:01 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:48:01 - sqlalchemy.engine.Engine - INFO - [cached since 54.28s ago] {'classification_1': '安全设置', 'assistant_type_1': 'doubao', 'param_1': 1}
2025-08-18 23:48:01 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:48:01 - sqlalchemy.engine.Engine - INFO - [cached since 54.28s ago] {'classification_1': '安全设置', 'assistant_type_1': 'xiaotian', 'param_1': 1}
2025-08-18 23:48:01 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:48:01 - sqlalchemy.engine.Engine - INFO - [cached since 54.28s ago] {'classification_1': '故障排查', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-18 23:48:01 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:48:01 - sqlalchemy.engine.Engine - INFO - [cached since 54.28s ago] {'classification_1': '故障排查', 'assistant_type_1': 'doubao', 'param_1': 1}
2025-08-18 23:48:01 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:48:01 - sqlalchemy.engine.Engine - INFO - [cached since 54.28s ago] {'classification_1': '故障排查', 'assistant_type_1': 'xiaotian', 'param_1': 1}
2025-08-18 23:48:01 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:48:01 - sqlalchemy.engine.Engine - INFO - [cached since 54.28s ago] {'classification_1': '工程问题', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-18 23:48:01 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:48:01 - sqlalchemy.engine.Engine - INFO - [cached since 54.29s ago] {'classification_1': '工程问题', 'assistant_type_1': 'doubao', 'param_1': 1}
2025-08-18 23:48:01 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:48:01 - sqlalchemy.engine.Engine - INFO - [cached since 54.29s ago] {'classification_1': '工程问题', 'assistant_type_1': 'xiaotian', 'param_1': 1}
2025-08-18 23:48:01 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:48:01 - sqlalchemy.engine.Engine - INFO - [cached since 54.29s ago] {'classification_1': '产品使用', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-18 23:48:01 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:48:01 - sqlalchemy.engine.Engine - INFO - [cached since 54.29s ago] {'classification_1': '产品使用', 'assistant_type_1': 'doubao', 'param_1': 1}
2025-08-18 23:48:01 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:48:01 - sqlalchemy.engine.Engine - INFO - [cached since 54.29s ago] {'classification_1': '产品使用', 'assistant_type_1': 'xiaotian', 'param_1': 1}
2025-08-18 23:48:01 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-18 23:48:25 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-18 23:48:25 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions) AS anon_1
2025-08-18 23:48:25 - sqlalchemy.engine.Engine - INFO - [cached since 250.8s ago] {}
2025-08-18 23:48:25 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers) AS anon_1
2025-08-18 23:48:25 - sqlalchemy.engine.Engine - INFO - [cached since 250.8s ago] {}
2025-08-18 23:48:25 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.question_business_id AS answers_question_business_id 
FROM answers JOIN questions ON answers.question_business_id = questions.business_id 
WHERE answers.is_scored = true AND answers.assistant_type IN (%(assistant_type_1_1)s, %(assistant_type_1_2)s, %(assistant_type_1_3)s) GROUP BY answers.question_business_id 
HAVING count(distinct(answers.assistant_type)) = %(count_2)s) AS anon_1
2025-08-18 23:48:25 - sqlalchemy.engine.Engine - INFO - [cached since 250.8s ago] {'count_2': 3, 'assistant_type_1_1': 'yoyo', 'assistant_type_1_2': 'doubao', 'assistant_type_1_3': 'xiaotian'}
2025-08-18 23:48:25 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT scores.id AS scores_id, scores.answer_id AS scores_answer_id, scores.score_1 AS scores_score_1, scores.score_2 AS scores_score_2, scores.score_3 AS scores_score_3, scores.score_4 AS scores_score_4, scores.score_5 AS scores_score_5, scores.dimension_1_name AS scores_dimension_1_name, scores.dimension_2_name AS scores_dimension_2_name, scores.dimension_3_name AS scores_dimension_3_name, scores.dimension_4_name AS scores_dimension_4_name, scores.dimension_5_name AS scores_dimension_5_name, scores.average_score AS scores_average_score, scores.comment AS scores_comment, scores.rated_at AS scores_rated_at 
FROM scores) AS anon_1
2025-08-18 23:48:25 - sqlalchemy.engine.Engine - INFO - [cached since 250.8s ago] {}
2025-08-18 23:48:25 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.assistant_type = %(assistant_type_1)s) AS anon_1
2025-08-18 23:48:25 - sqlalchemy.engine.Engine - INFO - [cached since 250.8s ago] {'assistant_type_1': 'doubao'}
2025-08-18 23:48:25 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.assistant_type = %(assistant_type_1)s) AS anon_1
2025-08-18 23:48:25 - sqlalchemy.engine.Engine - INFO - [cached since 250.8s ago] {'assistant_type_1': 'xiaotian'}
2025-08-18 23:48:25 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.classification IS NOT NULL AND questions.classification != %(classification_1)s) AS anon_1
2025-08-18 23:48:25 - sqlalchemy.engine.Engine - INFO - [cached since 250.8s ago] {'classification_1': ''}
2025-08-18 23:48:25 - sqlalchemy.engine.Engine - INFO - SELECT count(questions.id) AS count_1 
FROM questions
2025-08-18 23:48:25 - sqlalchemy.engine.Engine - INFO - [cached since 250.8s ago] {}
2025-08-18 23:48:25 - sqlalchemy.engine.Engine - INFO - SELECT count(answers.id) AS count_1 
FROM answers
2025-08-18 23:48:25 - sqlalchemy.engine.Engine - INFO - [cached since 250.8s ago] {}
2025-08-18 23:48:25 - sqlalchemy.engine.Engine - INFO - SELECT count(answers.id) AS count_1 
FROM answers 
WHERE answers.assistant_type = %(assistant_type_1)s
2025-08-18 23:48:25 - sqlalchemy.engine.Engine - INFO - [cached since 250.8s ago] {'assistant_type_1': 'yoyo'}
2025-08-18 23:48:25 - sqlalchemy.engine.Engine - INFO - SELECT COUNT(*) FROM table1
2025-08-18 23:48:25 - sqlalchemy.engine.Engine - INFO - [cached since 250.8s ago] {}
2025-08-18 23:48:25 - sqlalchemy.engine.Engine - INFO - SELECT COUNT(*) FROM table1 WHERE answer IS NOT NULL AND answer != '' AND TRIM(answer) != ''
2025-08-18 23:48:25 - sqlalchemy.engine.Engine - INFO - [cached since 250.8s ago] {}
2025-08-18 23:48:25 - sqlalchemy.engine.Engine - INFO - SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions ORDER BY questions.sendmessagetime DESC 
 LIMIT %(param_1)s
2025-08-18 23:48:25 - sqlalchemy.engine.Engine - INFO - [cached since 250.8s ago] {'param_1': 1}
2025-08-18 23:48:25 - sqlalchemy.engine.Engine - INFO - SELECT MAX(sendmessagetime) FROM table1
2025-08-18 23:48:25 - sqlalchemy.engine.Engine - INFO - [cached since 250.8s ago] {}
2025-08-18 23:48:25 - sqlalchemy.engine.Engine - INFO - SELECT date(questions.sendmessagetime) AS date, count(questions.id) AS questions 
FROM questions 
WHERE questions.sendmessagetime >= %(sendmessagetime_1)s GROUP BY date(questions.sendmessagetime)
2025-08-18 23:48:25 - sqlalchemy.engine.Engine - INFO - [cached since 250.8s ago] {'sendmessagetime_1': datetime.datetime(2025, 8, 11, 15, 48, 25, 653611)}
2025-08-18 23:48:25 - sqlalchemy.engine.Engine - INFO - SELECT date(questions.sendmessagetime) AS date, count(questions.id) AS classifications 
FROM questions 
WHERE questions.sendmessagetime >= %(sendmessagetime_1)s AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s GROUP BY date(questions.sendmessagetime)
2025-08-18 23:48:25 - sqlalchemy.engine.Engine - INFO - [cached since 250.8s ago] {'sendmessagetime_1': datetime.datetime(2025, 8, 11, 15, 48, 25, 653611), 'classification_1': ''}
2025-08-18 23:48:25 - sqlalchemy.engine.Engine - INFO - SELECT date(scores.rated_at) AS date, count(scores.id) AS scores 
FROM scores 
WHERE scores.rated_at >= %(rated_at_1)s GROUP BY date(scores.rated_at)
2025-08-18 23:48:25 - sqlalchemy.engine.Engine - INFO - [cached since 250.8s ago] {'rated_at_1': datetime.datetime(2025, 8, 11, 15, 48, 25, 653611)}
2025-08-18 23:48:25 - sqlalchemy.engine.Engine - INFO - SELECT questions.classification AS questions_classification, count(questions.id) AS count_1 
FROM questions 
WHERE questions.classification IS NOT NULL GROUP BY questions.classification
2025-08-18 23:48:25 - sqlalchemy.engine.Engine - INFO - [cached since 250.8s ago] {}
2025-08-18 23:48:25 - sqlalchemy.engine.Engine - INFO - SELECT answers.assistant_type AS answers_assistant_type, count(answers.id) AS total 
FROM answers GROUP BY answers.assistant_type
2025-08-18 23:48:25 - sqlalchemy.engine.Engine - INFO - [cached since 250.8s ago] {}
2025-08-18 23:48:25 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-18 23:48:31 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-18 23:48:31 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s) AS anon_1
2025-08-18 23:48:31 - sqlalchemy.engine.Engine - INFO - [cached since 276.1s ago] {'created_at_1': datetime.datetime(2025, 8, 18, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 24, 23, 59, 59, 999999), 'processing_status_1': 'scored'}
2025-08-18 23:48:31 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s AND questions.is_badcase = true) AS anon_1
2025-08-18 23:48:31 - sqlalchemy.engine.Engine - INFO - [cached since 276.1s ago] {'created_at_1': datetime.datetime(2025, 8, 18, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 24, 23, 59, 59, 999999), 'processing_status_1': 'scored'}
2025-08-18 23:48:31 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s AND questions.is_badcase = true AND questions.badcase_review_status = %(badcase_review_status_1)s) AS anon_1
2025-08-18 23:48:31 - sqlalchemy.engine.Engine - INFO - [cached since 276.1s ago] {'created_at_1': datetime.datetime(2025, 8, 18, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 24, 23, 59, 59, 999999), 'processing_status_1': 'scored', 'badcase_review_status_1': 'pending'}
2025-08-18 23:48:31 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s AND questions.badcase_review_status = %(badcase_review_status_1)s) AS anon_1
2025-08-18 23:48:31 - sqlalchemy.engine.Engine - INFO - [cached since 276.1s ago] {'created_at_1': datetime.datetime(2025, 8, 18, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 24, 23, 59, 59, 999999), 'processing_status_1': 'scored', 'badcase_review_status_1': 'reviewed'}
2025-08-18 23:48:31 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s AND questions.badcase_review_status = %(badcase_review_status_1)s AND questions.is_badcase = false) AS anon_1
2025-08-18 23:48:31 - sqlalchemy.engine.Engine - INFO - [cached since 276.1s ago] {'created_at_1': datetime.datetime(2025, 8, 18, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 24, 23, 59, 59, 999999), 'processing_status_1': 'scored', 'badcase_review_status_1': 'reviewed'}
2025-08-18 23:48:31 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-18 23:48:31 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-18 23:48:31 - sqlalchemy.engine.Engine - INFO - SELECT questions.classification AS questions_classification, count(questions.id) AS badcase_count 
FROM questions 
WHERE questions.is_badcase = true GROUP BY questions.classification ORDER BY count(questions.id) DESC 
 LIMIT %(param_1)s
2025-08-18 23:48:31 - sqlalchemy.engine.Engine - INFO - [cached since 276.1s ago] {'param_1': 3}
2025-08-18 23:48:31 - sqlalchemy.engine.Engine - INFO - 
                WITH dimension_scores AS (
                    -- 维度1的数据
                    SELECT
                        s.dimension_1_name as dimension_name,
                        s.score_1 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_1_name IS NOT NULL
                    AND s.score_1 IS NOT NULL

                    UNION ALL

                    -- 维度2的数据
                    SELECT
                        s.dimension_2_name as dimension_name,
                        s.score_2 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_2_name IS NOT NULL
                    AND s.score_2 IS NOT NULL

                    UNION ALL

                    -- 维度3的数据
                    SELECT
                        s.dimension_3_name as dimension_name,
                        s.score_3 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_3_name IS NOT NULL
                    AND s.score_3 IS NOT NULL

                    UNION ALL

                    -- 维度4的数据
                    SELECT
                        s.dimension_4_name as dimension_name,
                        s.score_4 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_4_name IS NOT NULL
                    AND s.score_4 IS NOT NULL

                    UNION ALL

                    -- 维度5的数据
                    SELECT
                        s.dimension_5_name as dimension_name,
                        s.score_5 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_5_name IS NOT NULL
                    AND s.score_5 IS NOT NULL
                )
                SELECT
                    dimension_name,
                    AVG(score) as avg_score,
                    COUNT(*) as sample_count
                FROM dimension_scores
                GROUP BY dimension_name
                ORDER BY avg_score ASC
            
2025-08-18 23:48:31 - sqlalchemy.engine.Engine - INFO - [cached since 276.1s ago] {'classification': '产品使用'}
2025-08-18 23:48:31 - sqlalchemy.engine.Engine - INFO - 
                WITH dimension_scores AS (
                    -- 维度1的数据
                    SELECT
                        s.dimension_1_name as dimension_name,
                        s.score_1 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_1_name IS NOT NULL
                    AND s.score_1 IS NOT NULL

                    UNION ALL

                    -- 维度2的数据
                    SELECT
                        s.dimension_2_name as dimension_name,
                        s.score_2 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_2_name IS NOT NULL
                    AND s.score_2 IS NOT NULL

                    UNION ALL

                    -- 维度3的数据
                    SELECT
                        s.dimension_3_name as dimension_name,
                        s.score_3 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_3_name IS NOT NULL
                    AND s.score_3 IS NOT NULL

                    UNION ALL

                    -- 维度4的数据
                    SELECT
                        s.dimension_4_name as dimension_name,
                        s.score_4 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_4_name IS NOT NULL
                    AND s.score_4 IS NOT NULL

                    UNION ALL

                    -- 维度5的数据
                    SELECT
                        s.dimension_5_name as dimension_name,
                        s.score_5 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_5_name IS NOT NULL
                    AND s.score_5 IS NOT NULL
                )
                SELECT
                    dimension_name,
                    AVG(score) as avg_score,
                    COUNT(*) as sample_count
                FROM dimension_scores
                GROUP BY dimension_name
                ORDER BY avg_score ASC
            
2025-08-18 23:48:31 - sqlalchemy.engine.Engine - INFO - [cached since 276.1s ago] {'classification': '其他'}
2025-08-18 23:48:31 - sqlalchemy.engine.Engine - INFO - 
                WITH dimension_scores AS (
                    -- 维度1的数据
                    SELECT
                        s.dimension_1_name as dimension_name,
                        s.score_1 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_1_name IS NOT NULL
                    AND s.score_1 IS NOT NULL

                    UNION ALL

                    -- 维度2的数据
                    SELECT
                        s.dimension_2_name as dimension_name,
                        s.score_2 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_2_name IS NOT NULL
                    AND s.score_2 IS NOT NULL

                    UNION ALL

                    -- 维度3的数据
                    SELECT
                        s.dimension_3_name as dimension_name,
                        s.score_3 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_3_name IS NOT NULL
                    AND s.score_3 IS NOT NULL

                    UNION ALL

                    -- 维度4的数据
                    SELECT
                        s.dimension_4_name as dimension_name,
                        s.score_4 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_4_name IS NOT NULL
                    AND s.score_4 IS NOT NULL

                    UNION ALL

                    -- 维度5的数据
                    SELECT
                        s.dimension_5_name as dimension_name,
                        s.score_5 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_5_name IS NOT NULL
                    AND s.score_5 IS NOT NULL
                )
                SELECT
                    dimension_name,
                    AVG(score) as avg_score,
                    COUNT(*) as sample_count
                FROM dimension_scores
                GROUP BY dimension_name
                ORDER BY avg_score ASC
            
2025-08-18 23:48:31 - sqlalchemy.engine.Engine - INFO - [cached since 276.1s ago] {'classification': '经济问题'}
2025-08-18 23:48:31 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-18 23:49:01 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-18 23:49:01 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s) AS anon_1
2025-08-18 23:49:01 - sqlalchemy.engine.Engine - INFO - [cached since 306.1s ago] {'created_at_1': datetime.datetime(2025, 8, 18, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 24, 23, 59, 59, 999999), 'processing_status_1': 'scored'}
2025-08-18 23:49:01 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s AND questions.is_badcase = true) AS anon_1
2025-08-18 23:49:01 - sqlalchemy.engine.Engine - INFO - [cached since 306.1s ago] {'created_at_1': datetime.datetime(2025, 8, 18, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 24, 23, 59, 59, 999999), 'processing_status_1': 'scored'}
2025-08-18 23:49:01 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s AND questions.is_badcase = true AND questions.badcase_review_status = %(badcase_review_status_1)s) AS anon_1
2025-08-18 23:49:01 - sqlalchemy.engine.Engine - INFO - [cached since 306.1s ago] {'created_at_1': datetime.datetime(2025, 8, 18, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 24, 23, 59, 59, 999999), 'processing_status_1': 'scored', 'badcase_review_status_1': 'pending'}
2025-08-18 23:49:01 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s AND questions.badcase_review_status = %(badcase_review_status_1)s) AS anon_1
2025-08-18 23:49:01 - sqlalchemy.engine.Engine - INFO - [cached since 306.1s ago] {'created_at_1': datetime.datetime(2025, 8, 18, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 24, 23, 59, 59, 999999), 'processing_status_1': 'scored', 'badcase_review_status_1': 'reviewed'}
2025-08-18 23:49:01 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s AND questions.badcase_review_status = %(badcase_review_status_1)s AND questions.is_badcase = false) AS anon_1
2025-08-18 23:49:01 - sqlalchemy.engine.Engine - INFO - [cached since 306.1s ago] {'created_at_1': datetime.datetime(2025, 8, 18, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 24, 23, 59, 59, 999999), 'processing_status_1': 'scored', 'badcase_review_status_1': 'reviewed'}
2025-08-18 23:49:01 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-18 23:49:01 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-18 23:49:01 - sqlalchemy.engine.Engine - INFO - SELECT questions.classification AS questions_classification, count(questions.id) AS badcase_count 
FROM questions 
WHERE questions.is_badcase = true GROUP BY questions.classification ORDER BY count(questions.id) DESC 
 LIMIT %(param_1)s
2025-08-18 23:49:01 - app.api.word_analysis_api - INFO - 获取词云数据请求: time_range=week, limit=40
2025-08-18 23:49:01 - app.api.word_analysis_api - INFO - 获取词云数据请求: time_range=week, limit=40
2025-08-18 23:49:01 - sqlalchemy.engine.Engine - INFO - [cached since 306.1s ago] {'param_1': 3}
2025-08-18 23:49:01 - app.services.word_analysis_service - INFO - 开始获取热词分析数据，时间范围: week, 限制: 40
2025-08-18 23:49:01 - app.services.word_analysis_service - INFO - 开始获取热词分析数据，时间范围: week, 限制: 40
2025-08-18 23:49:01 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-18 23:49:01 - sqlalchemy.engine.Engine - INFO - SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.query IS NOT NULL AND questions.query != %(query_1)s AND questions.is_deleted = false
2025-08-18 23:49:01 - sqlalchemy.engine.Engine - INFO - 
                WITH dimension_scores AS (
                    -- 维度1的数据
                    SELECT
                        s.dimension_1_name as dimension_name,
                        s.score_1 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_1_name IS NOT NULL
                    AND s.score_1 IS NOT NULL

                    UNION ALL

                    -- 维度2的数据
                    SELECT
                        s.dimension_2_name as dimension_name,
                        s.score_2 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_2_name IS NOT NULL
                    AND s.score_2 IS NOT NULL

                    UNION ALL

                    -- 维度3的数据
                    SELECT
                        s.dimension_3_name as dimension_name,
                        s.score_3 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_3_name IS NOT NULL
                    AND s.score_3 IS NOT NULL

                    UNION ALL

                    -- 维度4的数据
                    SELECT
                        s.dimension_4_name as dimension_name,
                        s.score_4 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_4_name IS NOT NULL
                    AND s.score_4 IS NOT NULL

                    UNION ALL

                    -- 维度5的数据
                    SELECT
                        s.dimension_5_name as dimension_name,
                        s.score_5 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_5_name IS NOT NULL
                    AND s.score_5 IS NOT NULL
                )
                SELECT
                    dimension_name,
                    AVG(score) as avg_score,
                    COUNT(*) as sample_count
                FROM dimension_scores
                GROUP BY dimension_name
                ORDER BY avg_score ASC
            
2025-08-18 23:49:01 - sqlalchemy.engine.Engine - INFO - [cached since 276.1s ago] {'created_at_1': datetime.datetime(2025, 8, 18, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 24, 23, 59, 59, 999999), 'query_1': ''}
2025-08-18 23:49:01 - sqlalchemy.engine.Engine - INFO - [cached since 306.1s ago] {'classification': '产品使用'}
2025-08-18 23:49:01 - app.services.word_analysis_service - INFO - 查询到 53 个问题，时间范围: 2025-08-18 00:00:00 至 2025-08-24 23:59:59.999999
2025-08-18 23:49:01 - app.services.word_analysis_service - INFO - 查询到 53 个问题，时间范围: 2025-08-18 00:00:00 至 2025-08-24 23:59:59.999999
2025-08-18 23:49:01 - app.services.word_analysis_service - INFO - 问题样本 1: 价格是多少？...
2025-08-18 23:49:01 - app.services.word_analysis_service - INFO - 问题样本 1: 价格是多少？...
2025-08-18 23:49:01 - app.services.word_analysis_service - INFO - 问题样本 2: 定制开发相关的政策？...
2025-08-18 23:49:01 - app.services.word_analysis_service - INFO - 问题样本 2: 定制开发相关的政策？...
2025-08-18 23:49:01 - app.services.word_analysis_service - INFO - 问题样本 3: 用户设置在哪里可以找到？...
2025-08-18 23:49:01 - app.services.word_analysis_service - INFO - 问题样本 3: 用户设置在哪里可以找到？...
2025-08-18 23:49:01 - app.services.word_analysis_service - INFO - 有效问题文本数: 53, 总文本长度: 596
2025-08-18 23:49:01 - app.services.word_analysis_service - INFO - 有效问题文本数: 53, 总文本长度: 596
2025-08-18 23:49:01 - app.services.word_analysis_service - INFO - 文本分析完成，原始词汇: 361, 过滤后: 129, 唯一词汇: 46
2025-08-18 23:49:01 - app.services.word_analysis_service - INFO - 文本分析完成，原始词汇: 361, 过滤后: 129, 唯一词汇: 46
2025-08-18 23:49:01 - sqlalchemy.engine.Engine - INFO - 
                WITH dimension_scores AS (
                    -- 维度1的数据
                    SELECT
                        s.dimension_1_name as dimension_name,
                        s.score_1 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_1_name IS NOT NULL
                    AND s.score_1 IS NOT NULL

                    UNION ALL

                    -- 维度2的数据
                    SELECT
                        s.dimension_2_name as dimension_name,
                        s.score_2 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_2_name IS NOT NULL
                    AND s.score_2 IS NOT NULL

                    UNION ALL

                    -- 维度3的数据
                    SELECT
                        s.dimension_3_name as dimension_name,
                        s.score_3 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_3_name IS NOT NULL
                    AND s.score_3 IS NOT NULL

                    UNION ALL

                    -- 维度4的数据
                    SELECT
                        s.dimension_4_name as dimension_name,
                        s.score_4 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_4_name IS NOT NULL
                    AND s.score_4 IS NOT NULL

                    UNION ALL

                    -- 维度5的数据
                    SELECT
                        s.dimension_5_name as dimension_name,
                        s.score_5 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_5_name IS NOT NULL
                    AND s.score_5 IS NOT NULL
                )
                SELECT
                    dimension_name,
                    AVG(score) as avg_score,
                    COUNT(*) as sample_count
                FROM dimension_scores
                GROUP BY dimension_name
                ORDER BY avg_score ASC
            
2025-08-18 23:49:01 - app.services.word_analysis_service - INFO - 热词分析完成，共分析 53 个问题，生成 40 个热词
2025-08-18 23:49:01 - app.services.word_analysis_service - INFO - 热词分析完成，共分析 53 个问题，生成 40 个热词
2025-08-18 23:49:01 - sqlalchemy.engine.Engine - INFO - [cached since 306.1s ago] {'classification': '其他'}
2025-08-18 23:49:01 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-18 23:49:01 - sqlalchemy.engine.Engine - INFO - 
                WITH dimension_scores AS (
                    -- 维度1的数据
                    SELECT
                        s.dimension_1_name as dimension_name,
                        s.score_1 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_1_name IS NOT NULL
                    AND s.score_1 IS NOT NULL

                    UNION ALL

                    -- 维度2的数据
                    SELECT
                        s.dimension_2_name as dimension_name,
                        s.score_2 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_2_name IS NOT NULL
                    AND s.score_2 IS NOT NULL

                    UNION ALL

                    -- 维度3的数据
                    SELECT
                        s.dimension_3_name as dimension_name,
                        s.score_3 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_3_name IS NOT NULL
                    AND s.score_3 IS NOT NULL

                    UNION ALL

                    -- 维度4的数据
                    SELECT
                        s.dimension_4_name as dimension_name,
                        s.score_4 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_4_name IS NOT NULL
                    AND s.score_4 IS NOT NULL

                    UNION ALL

                    -- 维度5的数据
                    SELECT
                        s.dimension_5_name as dimension_name,
                        s.score_5 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_5_name IS NOT NULL
                    AND s.score_5 IS NOT NULL
                )
                SELECT
                    dimension_name,
                    AVG(score) as avg_score,
                    COUNT(*) as sample_count
                FROM dimension_scores
                GROUP BY dimension_name
                ORDER BY avg_score ASC
            
2025-08-18 23:49:01 - sqlalchemy.engine.Engine - INFO - [cached since 306.1s ago] {'classification': '经济问题'}
2025-08-18 23:49:01 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-18 23:49:06 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-18 23:49:06 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions) AS anon_1
2025-08-18 23:49:06 - sqlalchemy.engine.Engine - INFO - [cached since 291.7s ago] {}
2025-08-18 23:49:06 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers) AS anon_1
2025-08-18 23:49:06 - sqlalchemy.engine.Engine - INFO - [cached since 291.7s ago] {}
2025-08-18 23:49:06 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.question_business_id AS answers_question_business_id 
FROM answers JOIN questions ON answers.question_business_id = questions.business_id 
WHERE answers.is_scored = true AND answers.assistant_type IN (%(assistant_type_1_1)s, %(assistant_type_1_2)s, %(assistant_type_1_3)s) GROUP BY answers.question_business_id 
HAVING count(distinct(answers.assistant_type)) = %(count_2)s) AS anon_1
2025-08-18 23:49:06 - sqlalchemy.engine.Engine - INFO - [cached since 291.7s ago] {'count_2': 3, 'assistant_type_1_1': 'yoyo', 'assistant_type_1_2': 'doubao', 'assistant_type_1_3': 'xiaotian'}
2025-08-18 23:49:06 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT scores.id AS scores_id, scores.answer_id AS scores_answer_id, scores.score_1 AS scores_score_1, scores.score_2 AS scores_score_2, scores.score_3 AS scores_score_3, scores.score_4 AS scores_score_4, scores.score_5 AS scores_score_5, scores.dimension_1_name AS scores_dimension_1_name, scores.dimension_2_name AS scores_dimension_2_name, scores.dimension_3_name AS scores_dimension_3_name, scores.dimension_4_name AS scores_dimension_4_name, scores.dimension_5_name AS scores_dimension_5_name, scores.average_score AS scores_average_score, scores.comment AS scores_comment, scores.rated_at AS scores_rated_at 
FROM scores) AS anon_1
2025-08-18 23:49:06 - sqlalchemy.engine.Engine - INFO - [cached since 291.7s ago] {}
2025-08-18 23:49:06 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.assistant_type = %(assistant_type_1)s) AS anon_1
2025-08-18 23:49:06 - sqlalchemy.engine.Engine - INFO - [cached since 291.7s ago] {'assistant_type_1': 'doubao'}
2025-08-18 23:49:06 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT answers.id AS answers_id, answers.question_business_id AS answers_question_business_id, answers.answer_text AS answers_answer_text, answers.assistant_type AS answers_assistant_type, answers.is_scored AS answers_is_scored, answers.answer_time AS answers_answer_time, answers.created_at AS answers_created_at, answers.updated_at AS answers_updated_at 
FROM answers 
WHERE answers.assistant_type = %(assistant_type_1)s) AS anon_1
2025-08-18 23:49:06 - sqlalchemy.engine.Engine - INFO - [cached since 291.7s ago] {'assistant_type_1': 'xiaotian'}
2025-08-18 23:49:06 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.classification IS NOT NULL AND questions.classification != %(classification_1)s) AS anon_1
2025-08-18 23:49:06 - sqlalchemy.engine.Engine - INFO - [cached since 291.7s ago] {'classification_1': ''}
2025-08-18 23:49:06 - sqlalchemy.engine.Engine - INFO - SELECT count(questions.id) AS count_1 
FROM questions
2025-08-18 23:49:06 - sqlalchemy.engine.Engine - INFO - [cached since 291.7s ago] {}
2025-08-18 23:49:06 - sqlalchemy.engine.Engine - INFO - SELECT count(answers.id) AS count_1 
FROM answers
2025-08-18 23:49:06 - sqlalchemy.engine.Engine - INFO - [cached since 291.7s ago] {}
2025-08-18 23:49:06 - sqlalchemy.engine.Engine - INFO - SELECT count(answers.id) AS count_1 
FROM answers 
WHERE answers.assistant_type = %(assistant_type_1)s
2025-08-18 23:49:06 - sqlalchemy.engine.Engine - INFO - [cached since 291.7s ago] {'assistant_type_1': 'yoyo'}
2025-08-18 23:49:06 - sqlalchemy.engine.Engine - INFO - SELECT COUNT(*) FROM table1
2025-08-18 23:49:06 - sqlalchemy.engine.Engine - INFO - [cached since 291.7s ago] {}
2025-08-18 23:49:06 - sqlalchemy.engine.Engine - INFO - SELECT COUNT(*) FROM table1 WHERE answer IS NOT NULL AND answer != '' AND TRIM(answer) != ''
2025-08-18 23:49:06 - sqlalchemy.engine.Engine - INFO - [cached since 291.7s ago] {}
2025-08-18 23:49:06 - sqlalchemy.engine.Engine - INFO - SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions ORDER BY questions.sendmessagetime DESC 
 LIMIT %(param_1)s
2025-08-18 23:49:06 - sqlalchemy.engine.Engine - INFO - [cached since 291.7s ago] {'param_1': 1}
2025-08-18 23:49:06 - sqlalchemy.engine.Engine - INFO - SELECT MAX(sendmessagetime) FROM table1
2025-08-18 23:49:06 - sqlalchemy.engine.Engine - INFO - [cached since 291.7s ago] {}
2025-08-18 23:49:06 - sqlalchemy.engine.Engine - INFO - SELECT date(questions.sendmessagetime) AS date, count(questions.id) AS questions 
FROM questions 
WHERE questions.sendmessagetime >= %(sendmessagetime_1)s GROUP BY date(questions.sendmessagetime)
2025-08-18 23:49:06 - sqlalchemy.engine.Engine - INFO - [cached since 291.7s ago] {'sendmessagetime_1': datetime.datetime(2025, 8, 11, 15, 49, 6, 576907)}
2025-08-18 23:49:06 - sqlalchemy.engine.Engine - INFO - SELECT date(questions.sendmessagetime) AS date, count(questions.id) AS classifications 
FROM questions 
WHERE questions.sendmessagetime >= %(sendmessagetime_1)s AND questions.classification IS NOT NULL AND questions.classification != %(classification_1)s GROUP BY date(questions.sendmessagetime)
2025-08-18 23:49:06 - sqlalchemy.engine.Engine - INFO - [cached since 291.7s ago] {'sendmessagetime_1': datetime.datetime(2025, 8, 11, 15, 49, 6, 576907), 'classification_1': ''}
2025-08-18 23:49:06 - sqlalchemy.engine.Engine - INFO - SELECT date(scores.rated_at) AS date, count(scores.id) AS scores 
FROM scores 
WHERE scores.rated_at >= %(rated_at_1)s GROUP BY date(scores.rated_at)
2025-08-18 23:49:06 - sqlalchemy.engine.Engine - INFO - [cached since 291.7s ago] {'rated_at_1': datetime.datetime(2025, 8, 11, 15, 49, 6, 576907)}
2025-08-18 23:49:06 - sqlalchemy.engine.Engine - INFO - SELECT questions.classification AS questions_classification, count(questions.id) AS count_1 
FROM questions 
WHERE questions.classification IS NOT NULL GROUP BY questions.classification
2025-08-18 23:49:06 - sqlalchemy.engine.Engine - INFO - [cached since 291.7s ago] {}
2025-08-18 23:49:06 - sqlalchemy.engine.Engine - INFO - SELECT answers.assistant_type AS answers_assistant_type, count(answers.id) AS total 
FROM answers GROUP BY answers.assistant_type
2025-08-18 23:49:06 - sqlalchemy.engine.Engine - INFO - [cached since 291.7s ago] {}
2025-08-18 23:49:06 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-18 23:49:29 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-18 23:49:29 - sqlalchemy.engine.Engine - INFO - SELECT users.id AS users_id, users.username AS users_username, users.display_name AS users_display_name, users.password_hash AS users_password_hash, users.role AS users_role, users.status AS users_status, users.created_at AS users_created_at, users.last_login_at AS users_last_login_at, users.login_count AS users_login_count 
FROM users 
WHERE users.id = %(pk_1)s
2025-08-18 23:49:29 - sqlalchemy.engine.Engine - INFO - [cached since 142.8s ago] {'pk_1': '1'}
2025-08-18 23:49:29 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-18 23:49:29 - app.api.word_analysis_api - INFO - 获取词云数据请求: time_range=week, limit=40
2025-08-18 23:49:29 - app.api.word_analysis_api - INFO - 获取词云数据请求: time_range=week, limit=40
2025-08-18 23:49:29 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-18 23:49:29 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-18 23:49:29 - app.services.word_analysis_service - INFO - 开始获取热词分析数据，时间范围: week, 限制: 40
2025-08-18 23:49:29 - app.services.word_analysis_service - INFO - 开始获取热词分析数据，时间范围: week, 限制: 40
2025-08-18 23:49:29 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s) AS anon_1
2025-08-18 23:49:29 - sqlalchemy.engine.Engine - INFO - SELECT questions.classification AS questions_classification, count(questions.id) AS badcase_count 
FROM questions 
WHERE questions.is_badcase = true GROUP BY questions.classification ORDER BY count(questions.id) DESC 
 LIMIT %(param_1)s
2025-08-18 23:49:29 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-18 23:49:29 - sqlalchemy.engine.Engine - INFO - [cached since 334.2s ago] {'created_at_1': datetime.datetime(2025, 8, 18, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 24, 23, 59, 59, 999999), 'processing_status_1': 'scored'}
2025-08-18 23:49:29 - sqlalchemy.engine.Engine - INFO - [cached since 334.2s ago] {'param_1': 3}
2025-08-18 23:49:29 - sqlalchemy.engine.Engine - INFO - SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.query IS NOT NULL AND questions.query != %(query_1)s AND questions.is_deleted = false
2025-08-18 23:49:29 - sqlalchemy.engine.Engine - INFO - [cached since 304.1s ago] {'created_at_1': datetime.datetime(2025, 8, 18, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 24, 23, 59, 59, 999999), 'query_1': ''}
2025-08-18 23:49:29 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s AND questions.is_badcase = true) AS anon_1
2025-08-18 23:49:29 - sqlalchemy.engine.Engine - INFO - 
                WITH dimension_scores AS (
                    -- 维度1的数据
                    SELECT
                        s.dimension_1_name as dimension_name,
                        s.score_1 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_1_name IS NOT NULL
                    AND s.score_1 IS NOT NULL

                    UNION ALL

                    -- 维度2的数据
                    SELECT
                        s.dimension_2_name as dimension_name,
                        s.score_2 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_2_name IS NOT NULL
                    AND s.score_2 IS NOT NULL

                    UNION ALL

                    -- 维度3的数据
                    SELECT
                        s.dimension_3_name as dimension_name,
                        s.score_3 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_3_name IS NOT NULL
                    AND s.score_3 IS NOT NULL

                    UNION ALL

                    -- 维度4的数据
                    SELECT
                        s.dimension_4_name as dimension_name,
                        s.score_4 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_4_name IS NOT NULL
                    AND s.score_4 IS NOT NULL

                    UNION ALL

                    -- 维度5的数据
                    SELECT
                        s.dimension_5_name as dimension_name,
                        s.score_5 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_5_name IS NOT NULL
                    AND s.score_5 IS NOT NULL
                )
                SELECT
                    dimension_name,
                    AVG(score) as avg_score,
                    COUNT(*) as sample_count
                FROM dimension_scores
                GROUP BY dimension_name
                ORDER BY avg_score ASC
            
2025-08-18 23:49:29 - app.services.word_analysis_service - INFO - 查询到 53 个问题，时间范围: 2025-08-18 00:00:00 至 2025-08-24 23:59:59.999999
2025-08-18 23:49:29 - sqlalchemy.engine.Engine - INFO - [cached since 334.2s ago] {'created_at_1': datetime.datetime(2025, 8, 18, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 24, 23, 59, 59, 999999), 'processing_status_1': 'scored'}
2025-08-18 23:49:29 - app.services.word_analysis_service - INFO - 查询到 53 个问题，时间范围: 2025-08-18 00:00:00 至 2025-08-24 23:59:59.999999
2025-08-18 23:49:29 - sqlalchemy.engine.Engine - INFO - [cached since 334.2s ago] {'classification': '产品使用'}
2025-08-18 23:49:29 - app.services.word_analysis_service - INFO - 问题样本 1: 价格是多少？...
2025-08-18 23:49:29 - app.services.word_analysis_service - INFO - 问题样本 1: 价格是多少？...
2025-08-18 23:49:29 - app.services.word_analysis_service - INFO - 问题样本 2: 定制开发相关的政策？...
2025-08-18 23:49:29 - app.services.word_analysis_service - INFO - 问题样本 2: 定制开发相关的政策？...
2025-08-18 23:49:29 - app.services.word_analysis_service - INFO - 问题样本 3: 用户设置在哪里可以找到？...
2025-08-18 23:49:29 - app.services.word_analysis_service - INFO - 问题样本 3: 用户设置在哪里可以找到？...
2025-08-18 23:49:29 - app.services.word_analysis_service - INFO - 有效问题文本数: 53, 总文本长度: 596
2025-08-18 23:49:29 - app.services.word_analysis_service - INFO - 有效问题文本数: 53, 总文本长度: 596
2025-08-18 23:49:29 - app.services.word_analysis_service - INFO - 文本分析完成，原始词汇: 361, 过滤后: 129, 唯一词汇: 46
2025-08-18 23:49:29 - app.services.word_analysis_service - INFO - 文本分析完成，原始词汇: 361, 过滤后: 129, 唯一词汇: 46
2025-08-18 23:49:29 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s AND questions.is_badcase = true AND questions.badcase_review_status = %(badcase_review_status_1)s) AS anon_1
2025-08-18 23:49:29 - sqlalchemy.engine.Engine - INFO - 
                WITH dimension_scores AS (
                    -- 维度1的数据
                    SELECT
                        s.dimension_1_name as dimension_name,
                        s.score_1 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_1_name IS NOT NULL
                    AND s.score_1 IS NOT NULL

                    UNION ALL

                    -- 维度2的数据
                    SELECT
                        s.dimension_2_name as dimension_name,
                        s.score_2 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_2_name IS NOT NULL
                    AND s.score_2 IS NOT NULL

                    UNION ALL

                    -- 维度3的数据
                    SELECT
                        s.dimension_3_name as dimension_name,
                        s.score_3 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_3_name IS NOT NULL
                    AND s.score_3 IS NOT NULL

                    UNION ALL

                    -- 维度4的数据
                    SELECT
                        s.dimension_4_name as dimension_name,
                        s.score_4 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_4_name IS NOT NULL
                    AND s.score_4 IS NOT NULL

                    UNION ALL

                    -- 维度5的数据
                    SELECT
                        s.dimension_5_name as dimension_name,
                        s.score_5 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_5_name IS NOT NULL
                    AND s.score_5 IS NOT NULL
                )
                SELECT
                    dimension_name,
                    AVG(score) as avg_score,
                    COUNT(*) as sample_count
                FROM dimension_scores
                GROUP BY dimension_name
                ORDER BY avg_score ASC
            
2025-08-18 23:49:29 - app.services.word_analysis_service - INFO - 热词分析完成，共分析 53 个问题，生成 40 个热词
2025-08-18 23:49:29 - app.services.word_analysis_service - INFO - 热词分析完成，共分析 53 个问题，生成 40 个热词
2025-08-18 23:49:29 - sqlalchemy.engine.Engine - INFO - [cached since 334.2s ago] {'classification': '其他'}
2025-08-18 23:49:29 - sqlalchemy.engine.Engine - INFO - [cached since 334.2s ago] {'created_at_1': datetime.datetime(2025, 8, 18, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 24, 23, 59, 59, 999999), 'processing_status_1': 'scored', 'badcase_review_status_1': 'pending'}
2025-08-18 23:49:29 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-18 23:49:29 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s AND questions.badcase_review_status = %(badcase_review_status_1)s) AS anon_1
2025-08-18 23:49:29 - sqlalchemy.engine.Engine - INFO - [cached since 334.2s ago] {'created_at_1': datetime.datetime(2025, 8, 18, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 24, 23, 59, 59, 999999), 'processing_status_1': 'scored', 'badcase_review_status_1': 'reviewed'}
2025-08-18 23:49:29 - sqlalchemy.engine.Engine - INFO - SELECT count(*) AS count_1 
FROM (SELECT questions.id AS questions_id, questions.business_id AS questions_business_id, questions.pageid AS questions_pageid, questions.devicetypename AS questions_devicetypename, questions.query AS questions_query, questions.sendmessagetime AS questions_sendmessagetime, questions.classification AS questions_classification, questions.serviceid AS questions_serviceid, questions.qatype AS questions_qatype, questions.intent AS questions_intent, questions.iskeyboardinput AS questions_iskeyboardinput, questions.isstopanswer AS questions_isstopanswer, questions.is_deleted AS questions_is_deleted, questions.processing_status AS questions_processing_status, questions.is_badcase AS questions_is_badcase, questions.badcase_detected_at AS questions_badcase_detected_at, questions.badcase_review_status AS questions_badcase_review_status, questions.badcase_dimensions AS questions_badcase_dimensions, questions.reviewed_at AS questions_reviewed_at, questions.reviewed_by AS questions_reviewed_by, questions.created_at AS questions_created_at, questions.updated_at AS questions_updated_at 
FROM questions 
WHERE questions.created_at >= %(created_at_1)s AND questions.created_at <= %(created_at_2)s AND questions.processing_status = %(processing_status_1)s AND questions.badcase_review_status = %(badcase_review_status_1)s AND questions.is_badcase = false) AS anon_1
2025-08-18 23:49:29 - sqlalchemy.engine.Engine - INFO - [cached since 334.2s ago] {'created_at_1': datetime.datetime(2025, 8, 18, 0, 0), 'created_at_2': datetime.datetime(2025, 8, 24, 23, 59, 59, 999999), 'processing_status_1': 'scored', 'badcase_review_status_1': 'reviewed'}
2025-08-18 23:49:29 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-18 23:49:29 - sqlalchemy.engine.Engine - INFO - 
                WITH dimension_scores AS (
                    -- 维度1的数据
                    SELECT
                        s.dimension_1_name as dimension_name,
                        s.score_1 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_1_name IS NOT NULL
                    AND s.score_1 IS NOT NULL

                    UNION ALL

                    -- 维度2的数据
                    SELECT
                        s.dimension_2_name as dimension_name,
                        s.score_2 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_2_name IS NOT NULL
                    AND s.score_2 IS NOT NULL

                    UNION ALL

                    -- 维度3的数据
                    SELECT
                        s.dimension_3_name as dimension_name,
                        s.score_3 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_3_name IS NOT NULL
                    AND s.score_3 IS NOT NULL

                    UNION ALL

                    -- 维度4的数据
                    SELECT
                        s.dimension_4_name as dimension_name,
                        s.score_4 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_4_name IS NOT NULL
                    AND s.score_4 IS NOT NULL

                    UNION ALL

                    -- 维度5的数据
                    SELECT
                        s.dimension_5_name as dimension_name,
                        s.score_5 as score
                    FROM questions q
                    JOIN answers a ON q.business_id = a.question_business_id
                    JOIN scores s ON a.id = s.answer_id
                    WHERE q.classification = %(classification)s
                    AND q.is_badcase = true
                    AND s.dimension_5_name IS NOT NULL
                    AND s.score_5 IS NOT NULL
                )
                SELECT
                    dimension_name,
                    AVG(score) as avg_score,
                    COUNT(*) as sample_count
                FROM dimension_scores
                GROUP BY dimension_name
                ORDER BY avg_score ASC
            
2025-08-18 23:49:29 - sqlalchemy.engine.Engine - INFO - [cached since 334.2s ago] {'classification': '经济问题'}
2025-08-18 23:49:29 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-08-18 23:49:30 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-08-18 23:49:30 - sqlalchemy.engine.Engine - INFO - SELECT questions.classification AS name, count(questions.id) AS count 
FROM questions 
WHERE questions.classification IS NOT NULL AND questions.classification != %(classification_1)s GROUP BY questions.classification
2025-08-18 23:49:30 - sqlalchemy.engine.Engine - INFO - [cached since 273.9s ago] {'classification_1': ''}
2025-08-18 23:49:30 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:49:30 - sqlalchemy.engine.Engine - INFO - [cached since 142.7s ago] {'classification_1': '科学问题', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-18 23:49:30 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:49:30 - sqlalchemy.engine.Engine - INFO - [cached since 142.7s ago] {'classification_1': '科学问题', 'assistant_type_1': 'doubao', 'param_1': 1}
2025-08-18 23:49:30 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:49:30 - sqlalchemy.engine.Engine - INFO - [cached since 142.7s ago] {'classification_1': '科学问题', 'assistant_type_1': 'xiaotian', 'param_1': 1}
2025-08-18 23:49:30 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:49:30 - sqlalchemy.engine.Engine - INFO - [cached since 142.7s ago] {'classification_1': '数据分析', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-18 23:49:30 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:49:30 - sqlalchemy.engine.Engine - INFO - [cached since 142.7s ago] {'classification_1': '数据分析', 'assistant_type_1': 'doubao', 'param_1': 1}
2025-08-18 23:49:30 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:49:30 - sqlalchemy.engine.Engine - INFO - [cached since 142.7s ago] {'classification_1': '数据分析', 'assistant_type_1': 'xiaotian', 'param_1': 1}
2025-08-18 23:49:30 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:49:30 - sqlalchemy.engine.Engine - INFO - [cached since 142.7s ago] {'classification_1': '用户体验', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-18 23:49:30 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:49:30 - sqlalchemy.engine.Engine - INFO - [cached since 142.7s ago] {'classification_1': '用户体验', 'assistant_type_1': 'doubao', 'param_1': 1}
2025-08-18 23:49:30 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:49:30 - sqlalchemy.engine.Engine - INFO - [cached since 142.7s ago] {'classification_1': '用户体验', 'assistant_type_1': 'xiaotian', 'param_1': 1}
2025-08-18 23:49:30 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:49:30 - sqlalchemy.engine.Engine - INFO - [cached since 142.7s ago] {'classification_1': '性能优化', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-18 23:49:30 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:49:30 - sqlalchemy.engine.Engine - INFO - [cached since 142.7s ago] {'classification_1': '性能优化', 'assistant_type_1': 'doubao', 'param_1': 1}
2025-08-18 23:49:30 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:49:30 - sqlalchemy.engine.Engine - INFO - [cached since 142.8s ago] {'classification_1': '性能优化', 'assistant_type_1': 'xiaotian', 'param_1': 1}
2025-08-18 23:49:30 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:49:30 - sqlalchemy.engine.Engine - INFO - [cached since 142.8s ago] {'classification_1': '业务咨询', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-18 23:49:30 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:49:30 - sqlalchemy.engine.Engine - INFO - [cached since 142.8s ago] {'classification_1': '业务咨询', 'assistant_type_1': 'doubao', 'param_1': 1}
2025-08-18 23:49:30 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:49:30 - sqlalchemy.engine.Engine - INFO - [cached since 142.8s ago] {'classification_1': '业务咨询', 'assistant_type_1': 'xiaotian', 'param_1': 1}
2025-08-18 23:49:30 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:49:30 - sqlalchemy.engine.Engine - INFO - [cached since 142.8s ago] {'classification_1': '经济问题', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-18 23:49:30 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:49:30 - sqlalchemy.engine.Engine - INFO - [cached since 142.8s ago] {'classification_1': '经济问题', 'assistant_type_1': 'doubao', 'param_1': 1}
2025-08-18 23:49:30 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:49:30 - sqlalchemy.engine.Engine - INFO - [cached since 142.8s ago] {'classification_1': '经济问题', 'assistant_type_1': 'xiaotian', 'param_1': 1}
2025-08-18 23:49:30 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:49:30 - sqlalchemy.engine.Engine - INFO - [cached since 142.8s ago] {'classification_1': '账户管理', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-18 23:49:30 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:49:30 - sqlalchemy.engine.Engine - INFO - [cached since 142.8s ago] {'classification_1': '账户管理', 'assistant_type_1': 'doubao', 'param_1': 1}
2025-08-18 23:49:30 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:49:30 - sqlalchemy.engine.Engine - INFO - [cached since 142.8s ago] {'classification_1': '账户管理', 'assistant_type_1': 'xiaotian', 'param_1': 1}
2025-08-18 23:49:30 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:49:30 - sqlalchemy.engine.Engine - INFO - [cached since 142.8s ago] {'classification_1': '功能建议', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-18 23:49:30 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:49:30 - sqlalchemy.engine.Engine - INFO - [cached since 142.8s ago] {'classification_1': '功能建议', 'assistant_type_1': 'doubao', 'param_1': 1}
2025-08-18 23:49:30 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:49:30 - sqlalchemy.engine.Engine - INFO - [cached since 142.8s ago] {'classification_1': '功能建议', 'assistant_type_1': 'xiaotian', 'param_1': 1}
2025-08-18 23:49:30 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:49:30 - sqlalchemy.engine.Engine - INFO - [cached since 142.8s ago] {'classification_1': '教育问题', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-18 23:49:30 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:49:30 - sqlalchemy.engine.Engine - INFO - [cached since 142.8s ago] {'classification_1': '教育问题', 'assistant_type_1': 'doubao', 'param_1': 1}
2025-08-18 23:49:30 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:49:30 - sqlalchemy.engine.Engine - INFO - [cached since 142.8s ago] {'classification_1': '教育问题', 'assistant_type_1': 'xiaotian', 'param_1': 1}
2025-08-18 23:49:30 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:49:30 - sqlalchemy.engine.Engine - INFO - [cached since 142.8s ago] {'classification_1': '技术问题', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-18 23:49:30 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:49:30 - sqlalchemy.engine.Engine - INFO - [cached since 142.8s ago] {'classification_1': '技术问题', 'assistant_type_1': 'doubao', 'param_1': 1}
2025-08-18 23:49:30 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:49:30 - sqlalchemy.engine.Engine - INFO - [cached since 142.8s ago] {'classification_1': '技术问题', 'assistant_type_1': 'xiaotian', 'param_1': 1}
2025-08-18 23:49:30 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:49:30 - sqlalchemy.engine.Engine - INFO - [cached since 142.8s ago] {'classification_1': '其他', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-18 23:49:30 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:49:30 - sqlalchemy.engine.Engine - INFO - [cached since 142.8s ago] {'classification_1': '其他', 'assistant_type_1': 'doubao', 'param_1': 1}
2025-08-18 23:49:30 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:49:30 - sqlalchemy.engine.Engine - INFO - [cached since 142.8s ago] {'classification_1': '其他', 'assistant_type_1': 'xiaotian', 'param_1': 1}
2025-08-18 23:49:30 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:49:30 - sqlalchemy.engine.Engine - INFO - [cached since 142.8s ago] {'classification_1': '安全设置', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-18 23:49:30 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:49:30 - sqlalchemy.engine.Engine - INFO - [cached since 142.8s ago] {'classification_1': '安全设置', 'assistant_type_1': 'doubao', 'param_1': 1}
2025-08-18 23:49:30 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:49:30 - sqlalchemy.engine.Engine - INFO - [cached since 142.8s ago] {'classification_1': '安全设置', 'assistant_type_1': 'xiaotian', 'param_1': 1}
2025-08-18 23:49:30 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:49:30 - sqlalchemy.engine.Engine - INFO - [cached since 142.8s ago] {'classification_1': '故障排查', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-18 23:49:30 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:49:30 - sqlalchemy.engine.Engine - INFO - [cached since 142.8s ago] {'classification_1': '故障排查', 'assistant_type_1': 'doubao', 'param_1': 1}
2025-08-18 23:49:30 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:49:30 - sqlalchemy.engine.Engine - INFO - [cached since 142.8s ago] {'classification_1': '故障排查', 'assistant_type_1': 'xiaotian', 'param_1': 1}
2025-08-18 23:49:30 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:49:30 - sqlalchemy.engine.Engine - INFO - [cached since 142.8s ago] {'classification_1': '工程问题', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-18 23:49:30 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:49:30 - sqlalchemy.engine.Engine - INFO - [cached since 142.8s ago] {'classification_1': '工程问题', 'assistant_type_1': 'doubao', 'param_1': 1}
2025-08-18 23:49:30 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:49:30 - sqlalchemy.engine.Engine - INFO - [cached since 142.8s ago] {'classification_1': '工程问题', 'assistant_type_1': 'xiaotian', 'param_1': 1}
2025-08-18 23:49:30 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:49:30 - sqlalchemy.engine.Engine - INFO - [cached since 142.8s ago] {'classification_1': '产品使用', 'assistant_type_1': 'yoyo', 'param_1': 1}
2025-08-18 23:49:30 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:49:30 - sqlalchemy.engine.Engine - INFO - [cached since 142.8s ago] {'classification_1': '产品使用', 'assistant_type_1': 'doubao', 'param_1': 1}
2025-08-18 23:49:30 - sqlalchemy.engine.Engine - INFO - SELECT avg(scores.average_score) AS avg_score, count(scores.id) AS score_count 
FROM scores JOIN answers ON scores.answer_id = answers.id JOIN questions ON answers.question_business_id = questions.business_id 
WHERE questions.classification = %(classification_1)s AND answers.assistant_type = %(assistant_type_1)s AND scores.average_score IS NOT NULL 
 LIMIT %(param_1)s
2025-08-18 23:49:30 - sqlalchemy.engine.Engine - INFO - [cached since 142.8s ago] {'classification_1': '产品使用', 'assistant_type_1': 'xiaotian', 'param_1': 1}
2025-08-18 23:49:30 - sqlalchemy.engine.Engine - INFO - ROLLBACK
